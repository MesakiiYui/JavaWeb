package com.mesakiiyui.springdatamysql.common.controller;

import com.mesakiiyui.springdatamysql.common.entity.City;
import com.mesakiiyui.springdatamysql.common.repo.CityRepository;
import com.mesakiiyui.springdatamysql.common.utils.common.ApiResponse;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.ui.Model;

import java.util.List;

//2)如果需要返回到指定页面，则需要用 @Controller配合视图解析器InternalResourceViewResolver才行。
//3)如果需要返回json或者xml或者自定义mediaType内容到页面，则需要在对应的方法上加上@ResponseBody注解

@Api(value = "与CITY表交互的controller")
@Controller    // This means that this class is a Controller
@RequestMapping(path="/City") // This means URL's start with /demo (after Application path)
public class CityController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CityRepository cityRepository;


    @PostMapping(path = "/addOneCity") // Map ONLY POST Requests
    public @ResponseBody
    String addNewCity(@RequestParam String name
            , @RequestParam String countryCode, @RequestParam String district, @RequestParam Integer population) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        City c = new City();
        c.setName(name);
        c.setCountryCode(countryCode);
        c.setDistrict(district);
        c.setPopulation(population);
        cityRepository.save(c);
        return "Saved";
    }

    @ResponseBody
    @GetMapping(path = "/allCity")
    @ApiOperation(value="获取所有的city数据", notes="全量获取")
//    @ApiImplicitParam(paramType="query", name = "userNumber", value = "用户编号", required = true, dataType = "Integer")
    public ApiResponse<List<City>> getAllCities() {
        // This returns a JSON or XML with the users
        return ApiResponse.success(cityRepository.findAll());
    }


    /**
     * 添加一个城市
     *
     * @param name
     * @param countryCode
     * @param district
     * @param population
     * @return
     */
    @ResponseBody
    @PostMapping(value = "/addCity")
    public City cityAdd(@RequestParam("name") String name,
                        @RequestParam("countryCode") String countryCode,
                        @RequestParam("district") String district,
                        @RequestParam("population") Integer population) {
        City city = new City();
        city.setName(name);
        city.setCountryCode(countryCode);
        city.setDistrict(district);
        city.setPopulation(population);

        return cityRepository.save(city);
    }

    /**
     * 查询一个城市
     *
     * @param ID
     * @return
     */
    @ResponseBody
    @GetMapping(value = "/findCity/{ID}")
    public City cityFindOne(@PathVariable("ID") Integer ID) {
        return cityRepository.findById(ID).orElse(null);
    }

    /**
     * 删除一个城市
     *
     * @param ID
     */
    @ApiImplicitParam(paramType="del", name = "id", value = "city id ", required = true, dataType = "Integer")
    @ResponseBody
    @DeleteMapping(value = "/delCity/{ID}")
    public void personDelete(@PathVariable("ID") Integer ID) {
        cityRepository.deleteById(ID);
    }

    /**
     * 更新一个城市
     *
     * @param ID
     * @param name
     * @param countryCode
     * @param district
     * @param population
     * @return
     */
    @ResponseBody
    @PutMapping(value = "/updateCity/{ID}")
    public City personUpdate(@PathVariable("ID") Integer ID,
                             @RequestParam("name") String name,
                             @RequestParam("countryCode") String countryCode,
                             @RequestParam("district") String district,
                             @RequestParam("population") Integer population) {
        City city = new City();
        city.setID(ID);
        city.setName(name);
        city.setCountryCode(countryCode);
        city.setDistrict(district);
        city.setPopulation(population);
        return cityRepository.save(city);


    }

    // 全量查询
    @GetMapping(value="/table")
    public String getCityTable(Model model){
        Iterable<City> cityList = cityRepository.findAll();
        model.addAttribute("cityList", cityList);

        return "city-single-table";
    }

}