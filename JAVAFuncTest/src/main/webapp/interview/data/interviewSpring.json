[
  {
  "category": "spring",
  "qes": "Spring的两大特征（IOC和AOP）",
  "ans": "<div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-light\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <p>众所周知，Spring的核心特性就是IOC和AOP，IOC（Inversion of Control），即“控制反转”；AOP（Aspect-OrientedProgramming），即“面向切面编程”。参考书《Spring In Action》，下面分享一下我对这两大特性的个人理解。</p> \n<p>IOC：IOC，另外一种说法叫DI（Dependency Injection），即依赖注入。它并不是一种技术实现，而是一种设计思想。在任何一个有实际开发意义的程序项目中，我们会使用很多类来描述它们特有的功能，并且通过类与类之间的相互协作来完成特定的业务逻辑。这个时候，每个类都需要负责管理与自己有交互的类的引用和依赖，代码将会变的异常难以维护和极度的高耦合。而IOC的出现正是用来解决这个问题，我们通过IOC将这些相互依赖对象的创建、协调工作交给Spring容器去处理，每个对象只需要关注其自身的业务逻辑关系就可以了。在这样的角度上来看，获得依赖的对象的方式，进行了反转，变成了由spring容器控制对象如何获取外部资源（包括其他对象和文件资料等等）。</p> \n<blockquote> \n <p>举例：某一天，你生病了，但是你不清楚自己到底得了什么病，你只知道自己头疼，咳嗽，全身无力。这个时候你决定去药店买药，药店有很多种药，仅仅是治疗头疼就有好几十种，还有西药中药等区别。然后你自己看了看说明书，选择了一盒你自己觉得最能治疗自己病症的药，付钱吃药，期待可以早点好起来。 <br> 但是这个过程，对于一个病人来说，太辛苦了。头疼，咳嗽，全身无力，还要一个个的看药品说明书，一个个的比较哪个药比较好，简直是太累了。这个时候，你决定直接去医院看医生。 <br> 医生给你做了检查，知道你的病症是什么，有什么原因引起的；同时医生非常了解有哪些药能治疗你的病痛，并且能根据你的自身情况进行筛选。只需要短短的十几分钟，你就能拿到对症下药的药品，即省时又省力。</p> \n</blockquote> \n<p>在上面这个例子中，IOC起到的就是医生的作用，它收集你的需求要求，并且对症下药，直接把药开给你。你就是对象，药品就是你所需要的外部资源。通过医生，你不用再去找药品，而是通过医生把药品开给你。这就是整个IOC的精髓所在。</p> \n<p>AOP：面向切面编程，往往被定义为促使软件系统实现关注点的分离的技术。系统是由许多不同的组件所组成的，每一个组件各负责一块特定功能。除了实现自身核心功能之外，这些组件还经常承担着额外的职责。例如日志、事务管理和安全这样的核心服务经常融入到自身具有核心业务逻辑的组件中去。这些系统服务经常被称为横切关注点，因为它们会跨越系统的多个组件。</p> \n<p>AOP的概念不好像IOC一样实例化举例，现在我们以一个系统中的具体实现来讲讲AOP具体是个什么技术。</p> \n<blockquote> \n <p>我们以系统中常用到的事务管控举例子。在系统操作数据库的过程中，不可避免地要考虑到事务相关的内容。如果在每一个方法中都新建一个事务管理器，那么无疑是对代码严重的耦合和侵入。为了简化我们的开发过程（实际上spring所做的一切实现都是为了简化开发过程），需要把事务相关的代码抽成出来做为一个独立的模块。通过AOP，确认每一个操作数据库方法为一个连接点，这些连接点组成了一个切面。当程序运行到其中某个一个切点时，我们将事务管理模块顺势织入对象中，通过通知功能，完成整个事务管控的实现。这样一来，所有的操作数据库的方法中不需要再单独关心事务管理的内容，只需要关注自身的业务代码的实现即可。所有的事务管控相关的内容都通过AOP的方式进行了实现。简化了代码的内容，将目标对象复杂的内容进行解耦，分离业务逻辑与横切关注点。</p> \n</blockquote> \n<p>下面介绍一下AOP相关的术语：</p> \n<ul><li><p>通知： 通知定义了切面是什么以及何时使用的概念。Spring 切面可以应用5种类型的通知：</p> \n  <ul><li>前置通知（Before）：在目标方法被调用之前调用通知功能。</li><li>后置通知（After）：在目标方法完成之后调用通知，此时不会关心方法的输出是什么。</li><li>返回通知（After-returning）：在目标方法成功执行之后调用通知。</li><li>异常通知（After-throwing）：在目标方法抛出异常后调用通知。</li><li>环绕通知（Around）：通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为。</li></ul></li><li><p>连接点：是在应用执行过程中能够插入切面的一个点。</p></li><li>切点： 切点定义了切面在何处要织入的一个或者多个连接点。</li><li>切面：是通知和切点的结合。通知和切点共同定义了切面的全部内容。</li><li>引入：引入允许我们向现有类添加新方法或属性。</li><li>织入：是把切面应用到目标对象，并创建新的代理对象的过程。切面在指定的连接点被织入到目标对象中。在目标对象的生命周期中有多个点可以进行织入： <br> \n  <ul><li>编译期： 在目标类编译时，切面被织入。这种方式需要特殊的编译器。AspectJ的织入编译器就是以这种方式织入切面的。</li><li>类加载期：切面在目标加载到JVM时被织入。这种方式需要特殊的类加载器(class loader)它可以在目标类被引入应用之前增强该目标类的字节码。</li><li>运行期： 切面在应用运行到某个时刻时被织入。一般情况下，在织入切面时，AOP容器会为目标对象动态地创建一个代理对象。SpringAOP就是以这种方式织入切面的。</li></ul></li></ul>\n                </div><div data-report-view=\"{&quot;mod&quot;:&quot;1585297308_001&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/gloomy_114/article/details/68946881&quot;,&quot;extend1&quot;:&quot;pc&quot;,&quot;ab&quot;:&quot;new&quot;}\"><div></div></div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-ba784fbaf8.css\" rel=\"stylesheet\">\n        </div>"
  },
  {
    "category": "spring",
    "qes": "Spring AOP 最热门面试题及答案",
    "ans": "<div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-github-gist\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h1><a name=\"t0\"></a><a name=\"t0\"></a><a id=\"_0\"></a>译者的话</h1> \n<p>之前去京东面试，被问到 AOP 相关的问题，之前一直没有系统地学习相关的知识，答得不是很好。趁着假期，找了一下相关的资料，CSDN上有很多不错的文章，看了之后对 AOP 有比较好的理解了。然后 Google 了一下 AOP 相关面试题（AOP interview），搜出来的第一条结果是一个叫 <a href=\"https://howtodoinjava.com\">HowToDoInJava</a> 的网站上的一篇文章 <a href=\"https://howtodoinjava.com/interview-questions/top-spring-aop-interview-questions-with-answers/\">Top Spring AOP Interview Questions with Answers</a>。<br> <img src=\"https://img-blog.csdn.net/20181002001153267?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RhZGl5YW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"><br> 看了一下，实话说，写得并不是很简单易懂，只是介绍性的文章而已。但是通篇看下来，基本的知识点也都覆盖到了。文章不是很长，所以为了加深印象，顺便把它翻译出来，以供大家参考。</p> \n<h1><a name=\"t1\"></a><a name=\"t1\"></a><a id=\"Spring_AOP__5\"></a>Spring AOP 最热门面试题及答案</h1> \n<p>看完 <a href=\"https://howtodoinjava.com\">Spring 核心面试题之后</a>，让我们来看一下 Spring AOP 面试题，这个你可能会在下一次技术面试的时候遇到。同样的，请尽管提出一些这个帖子相关的新的问题来，我会把它们包含进来，以让更多的读者受益。</p> \n<h1><a name=\"t2\"></a><a name=\"t2\"></a><a id=\"_8\"></a>内容大纲：</h1> \n<ul><li>描述一下Spring AOP？</li><li>在Spring AOP中关注点(concern)和横切关注点(cross-cutting concern)有什么不同？</li><li>AOP有哪些可用的实现？</li><li>Spring中有哪些不同的通知类型(advice types)？</li><li>Spring AOP 代理是什么？</li><li>引介(Introduction)是什么？</li><li>连接点(Joint Point)和切入点(Point Cut)是什么？</li><li>织入（Weaving）是什么？</li></ul> \n<h1><a name=\"t3\"></a><a name=\"t3\"></a><a id=\"Spring_AOP_18\"></a>描述一下Spring AOP</h1> \n<p>Spring AOP(Aspect Oriented Programming，面向切面编程)是OOPs(面向对象编程)的补充，它也提供了模块化。在面向对象编程中，关键的单元是对象，AOP的关键单元是切面，或者说关注点（可以简单地理解为你程序中的独立模块）。一些切面可能有集中的代码，但是有些可能被分散或者混杂在一起，例如日志或者事务。<strong>这些分散的切面被称为横切关注点</strong>。一个横切关注点是一个可以影响到整个应用的关注点，而且应该被尽量地集中到代码的一个地方，例如事务管理、权限、日志、安全等。<br> AOP让你可以使用简单可插拔的配置，在实际逻辑执行之前、之后或周围动态添加横切关注点。这让代码在当下和将来都变得易于维护。如果你是使用XML来使用切面的话，要添加或删除关注点，你不用重新编译完整的源代码，而仅仅需要修改配置文件就可以了。<br> Spring AOP通过以下两种方式来使用。但是最广泛使用的方式是Spring AspectJ 注解风格(Spring AspectJ Annotation Style)</p> \n<ul><li>使用AspectJ 注解风格</li><li>使用Spring XML 配置风格</li></ul> \n<h1><a name=\"t4\"></a><a name=\"t4\"></a><a id=\"Spring_AOP_25\"></a>在Spring AOP中关注点和横切关注点有什么不同？</h1> \n<p><strong>关注点是我们想在应用的模块中实现的行为</strong>。关注点可以被定义为：我们想实现以解决特定业务问题的方法。比如，在所有电子商务应用中，不同的关注点（或者模块）可能是库存管理、航运管理、用户管理等。<br> <strong>横切关注点是贯穿整个应用程序的关注点</strong>。像日志、安全和数据转换，它们在应用的每一个模块都是必须的，所以他们是一种横切关注点。</p> \n<h1><a name=\"t5\"></a><a name=\"t5\"></a><a id=\"AOP_29\"></a>AOP有哪些可用的实现？</h1> \n<p>基于Java的主要AOP实现有：</p> \n<ol><li>AspectJ</li><li>Spring AOP</li><li>JBoss AOP</li></ol> \n<p>在维基百科上你可以找到一个<a href=\"https://en.wikipedia.org/wiki/Aspect-oriented_programming#Implementations\">AOP实现的大列表</a>。</p> \n<h1><a name=\"t6\"></a><a name=\"t6\"></a><a id=\"Spring_36\"></a>Spring中有哪些不同的通知类型</h1> \n<p>通知(advice)是你在你的程序中想要应用在其他模块中的横切关注点的实现。Advice主要有以下5种类型：</p> \n<ol><li><strong>前置通知(Before Advice)</strong>: 在连接点之前执行的Advice，不过除非它抛出异常，否则没有能力中断执行流。使用 <code>@Before</code> 注解使用这个Advice。</li><li><strong>返回之后通知(After Retuning Advice)</strong>: 在连接点正常结束之后执行的Advice。例如，如果一个方法没有抛出异常正常返回。通过 <code>@AfterReturning</code> 关注使用它。</li><li><strong>抛出（异常）后执行通知(After Throwing Advice)</strong>: 如果一个方法通过抛出异常来退出的话，这个Advice就会被执行。通用 <code>@AfterThrowing</code> 注解来使用。</li><li><strong>后置通知(After Advice)</strong>: 无论连接点是通过什么方式退出的(正常返回或者抛出异常)都会执行在结束后执行这些Advice。通过 <code>@After</code> 注解使用。</li><li><strong>围绕通知(Around Advice)</strong>: 围绕连接点执行的Advice，就你一个方法调用。这是最强大的Advice。通过 <code>@Around</code> 注解使用。</li></ol> \n<h1><a name=\"t7\"></a><a name=\"t7\"></a><a id=\"Spring_AOP__44\"></a>Spring AOP 代理是什么？</h1> \n<p>代理是使用非常广泛的设计模式。简单来说，<strong>代理是一个看其他像另一个对象的对象，但它添加了一些特殊的功能</strong>。<br> Spring AOP是基于代理实现的。<strong>AOP 代理是一个由 AOP 框架创建的用于在运行时实现切面协议的对象</strong>。<br> Spring AOP默认为 AOP 代理使用标准的 JDK 动态代理。这使得任何接口（或者接口的集合）可以被代理。Spring AOP 也可以使用 CGLIB 代理。这对代理类而不是接口是必须的。<br> <strong>如果业务对象没有实现任何接口那么默认使用CGLIB</strong>。</p> \n<h1><a name=\"t8\"></a><a name=\"t8\"></a><a id=\"Introduction_49\"></a>引介(Introduction)是什么？</h1> \n<p><strong>引介让一个切面可以声明被通知的对象实现了任何他们没有真正实现的额外接口</strong>，而且为这些对象提供接口的实现<br> 使用 <code>@DeclareParaents</code> 注解来生成一个引介。<br> 更多详情，请参考 <a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#aop\">官方文档</a></p> \n<h1><a name=\"t9\"></a><a name=\"t9\"></a><a id=\"Joint_PointPoint_cut_54\"></a>连接点(Joint Point)和切入点(Point cut)是什么？</h1> \n<p>连接点是程序执行的一个点。例如，一个方法的执行或者一个异常的处理。在 Spring AOP 中，<strong>一个连接点总是代表一个方法执行</strong>。举例来说，所有定义在你的 <code>EmpoyeeManager</code> 接口中的方法都可以被认为是一个连接点，如果你在这些方法上使用横切关注点的话。<br> <strong>切入点(切入点)是一个匹配连接点的断言或者表达式</strong>。Advice 与切入点表达式相关联，并在切入点匹配的任何连接点处运行（比如，表达式 <code>execution(* EmployeeManager.getEmployeeById(...))</code> 可以匹配 <code>EmployeeManager</code> 接口的 <code>getEmployeeById()</code> ）。由切入点表达式匹配的连接点的概念是 AOP 的核心。Spring 默认使用 AspectJ 切入点表达式语言。</p> \n<h1><a name=\"t10\"></a><a name=\"t10\"></a><a id=\"weaving_59\"></a>什么是织入(weaving)？</h1> \n<p><strong>Spring AOP 框架仅支持有限的几个 AspectJ 切入点的类型，它允许将切面运用到在 IoC 容器中声明的 bean 上。如果你想使用额外的切入点类型或者将切面应用到在 Spring IoC 容器外部创建的类，那么你必须在你的 Spring 程序中使用 AspectJ 框架，并且使用它的织入特性。</strong><br> 织入是将切面与外部的应用类型或者类连接起来以创建通知对象(adviced object)的过程。这可以在编译时(比如使用 AspectJ 编译器)、加载时或者运行时完成。Spring AOP 跟其他纯 Java AOP 框架一样，只在运行时执行织入。在协议上，AspectJ 框架支持编译时和加载时织入。<br> AspectJ 编译时织入是通过一个叫做 <em><strong>ajc</strong></em> 特殊的 AspectJ 编译器完成的。它可以将切面织入到你的 Java 源码文件中，然后输出织入后的二进制 class 文件。它也可以将切面织入你的编译后的 class 文件或者 Jar 文件。这个过程叫做后编译时织入(post-compile-time weaving)。在 Spring IoC 容器中声明你的类之前，你可以为它们运行编译时和后编译时织入。Spring 完全没有被包含到织入的过程中。更多关于编译时和后编译时织入的信息，请查阅 AspectJ 文档。<br> AspectJ 加载时织入(load-time weaving, LTW)在目标类被类加载器加载到JVM时触发。对于一个被织入的对象，需要一个特殊的类加载器来增强目标类的字节码。AspectJ 和 Spring 都提供了加载时织入器以为类加载添加加载时织入的能力。你只需要简单的配置就可以打开这个加载时织入器。<br> 现在轮到你来分享更多你上次面试时遇到的 <strong>Spring AOP 面试题</strong>了，那样我可以把它们都加入到这个帖子里，使它对于其他人也更加有用。</p> \n<p>学习快乐！！</p>\n                </div><div><div></div></div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-ba784fbaf8.css\" rel=\"stylesheet\">\n        </div>"
  },
  {
    "category": "spring",
    "qes": "spring七大核心模块",
    "ans": "<div id=\"cnblogs_post_body\" class=\"blogpost-body\">\n    <p><img src=\"https://images2017.cnblogs.com/blog/1219227/201709/1219227-20170930225010356-45057485.gif\" alt=\"\"></p>\n<p><span style=\"font-family: 宋体; font-size: 16px\"><strong>核心容器（Spring Core）</strong></span></p>\n<p>　　核心容器提供Spring框架的基本功能。Spring以bean的方式组织和管理Java应用中的各个组件及其关系。Spring使用BeanFactory来产生和管理Bean，它是工厂模式的实现。BeanFactory使用控制反转(IoC)模式将应用的配置和依赖性规范与实际的应用程序代码分开。</p>\n<p><span style=\"font-family: 宋体; font-size: 16px\"><strong>应用上下文（Spring Context）</strong></span></p>\n<p>　　Spring上下文是一个配置文件，向Spring框架提供上下文信息。Spring上下文包括企业服务，如JNDI、EJB、电子邮件、国际化、校验和调度功能。</p>\n<p><span style=\"font-family: 宋体; font-size: 16px\"><strong>Spring面向切面编程（Spring AOP）</strong></span></p>\n<p>　　通过配置管理特性，Spring AOP 模块直接将面向方面的编程功能集成到了 Spring框架中。所以，可以很容易地使 Spring框架管理的任何对象支持 AOP。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖 EJB 组件，就可以将声明性事务管理集成到应用程序中。</p>\n<p><span style=\"font-family: 宋体; font-size: 16px\"><strong>JDBC和DAO模块（Spring DAO）</strong></span></p>\n<p>　　JDBC、DAO的抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理，和不同数据库供应商所抛出的错误信息。异常层次结构简化了错误处理，并且极大的降低了需要编写的代码数量，比如打开和关闭链接。</p>\n<p><span style=\"font-family: 宋体; font-size: 16px\"><strong>对象实体映射（Spring ORM）</strong></span></p>\n<p>　　Spring框架插入了若干个ORM框架，从而提供了ORM对象的关系工具，其中包括了Hibernate、JDO和 IBatis SQL Map等，所有这些都遵从Spring的通用事物和DAO异常层次结构。</p>\n<p><span style=\"font-family: 宋体; font-size: 16px\"><strong>Web模块（Spring Web）</strong></span></p>\n<p>　　Web上下文模块建立在应用程序上下文模块之上，为基于web的应用程序提供了上下文。所以Spring框架支持与Struts集成，web模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。</p>\n<p><span style=\"font-family: 宋体; font-size: 16px\"><strong>MVC模块（Spring Web MVC）</strong></span></p>\n<p>　　MVC框架是一个全功能的构建Web应用程序的MVC实现。通过策略接口，MVC框架变成为高度可配置的。MVC容纳了大量视图技术，其中包括JSP、POI等，模型来有JavaBean来构成，存放于m当中，而视图是一个街口，负责实现模型，控制器表示逻辑代码，由c的事情。Spring框架的功能可以用在任何J2EE服务器当中，大多数功能也适用于不受管理的环境。Spring的核心要点就是支持不绑定到特定J2EE服务的可重用业务和数据的访问的对象，毫无疑问这样的对象可以在不同的J2EE环境，独立应用程序和测试环境之间重用。</p>\n</div>"
  },
  {
    "category": "spring",
    "qes": "@Controller和@RestController的区别",
    "ans": "<div id=\"cnblogs_post_body\" class=\"blogpost-body\">\n    <p>知识点：<span style=\"font-size: 18px\">@RestController注解相当于@ResponseBody ＋ @Controller合在一起的作用。</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px\">1) 如果只是使用@RestController注解Controller，则Controller中的方法无法返回jsp页面，或者html，配置的视图解析器 InternalResourceViewResolver不起作用，返回的内容就是Return 里的内容。</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px\"><span style=\"font-size: 18px\">2) 如果需要返回到指定页面，则需要用 @Controller配合视图解析器InternalResourceViewResolver才行。<br>&nbsp;&nbsp;&nbsp;\n如果需要返回JSON，XML或自定义mediaType内容到页面，则需要在对应的方法上加上@ResponseBody注解。</span></span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px\"><span style=\"font-size: 18px\">例如：</span></span></p>\n<p><span style=\"font-size: 18px\"><span style=\"font-size: 18px\"><span style=\"color: rgba(255, 0, 0, 1)\">1</span>.<span style=\"color: rgba(255, 0, 0, 1)\">使用@Controller 注解，在对应的方法上，视图解析器可以解析return 的jsp,html页面，并且跳转到相应页面</span></span></span></p>\n<p><span style=\"font-size: 18px\"><span style=\"font-size: 18px\"><span style=\"color: rgba(255, 0, 0, 1)\">若返回json等内容到页面，则需要加@ResponseBody注解</span></span></span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px\"><span style=\"font-size: 18px\"><span style=\"color: rgba(128, 128, 0, 1)\">@CrossOrigin<br><span style=\"color: rgba(128, 128, 0, 1)\"><span style=\"color: rgba(255, 0, 0, 1)\">@Controller</span><br><span style=\"color: rgba(0, 0, 128, 1); font-weight: bold\">public class FileUploadController {<br><br>    <span style=\"color: rgba(128, 128, 128, 1)\">//跳转到上传文件的页面<br><span style=\"color: rgba(128, 128, 128, 1)\">    <span style=\"color: rgba(128, 128, 0, 1)\">@RequestMapping(value=<span style=\"color: rgba(0, 128, 0, 1); font-weight: bold\">\"/<span style=\"color: rgba(255, 0, 0, 1)\">gouploadimg</span>\", method = RequestMethod.<span style=\"color: rgba(102, 14, 122, 1); font-weight: bold\">GET)<br>    <span style=\"color: rgba(0, 0, 128, 1); font-weight: bold\">public <span style=\"color: rgba(255, 0, 0, 1)\">String</span> goUploadImg() {<br>        <span style=\"color: rgba(128, 128, 128, 1)\">//跳转到 templates 目录下的 <span style=\"color: rgba(255, 0, 0, 1)\">uploadimg.html</span><br><span style=\"color: rgba(128, 128, 128, 1)\">        <span style=\"color: rgba(0, 0, 128, 1); font-weight: bold\">return <span style=\"color: rgba(0, 128, 0, 1); font-weight: bold\">\"<span style=\"color: rgba(255, 0, 0, 1)\">uploadimg</span>\";<br>    }<br><br>    <span style=\"color: rgba(128, 128, 128, 1)\">//处理文件上传<br><span style=\"color: rgba(128, 128, 128, 1)\">    <span style=\"color: rgba(128, 128, 0, 1)\">@RequestMapping(value=<span style=\"color: rgba(0, 128, 0, 1); font-weight: bold\">\"/testuploadimg\", method = RequestMethod.<span style=\"color: rgba(102, 14, 122, 1); font-weight: bold\">POST)<br>    <span style=\"color: rgba(0, 0, 128, 1); font-weight: bold\">public <span style=\"color: rgba(128, 128, 0, 1)\"><span style=\"color: rgba(255, 0, 0, 1)\">@ResponseBody</span> String uploadImg(<span style=\"color: rgba(128, 128, 0, 1)\">@RequestParam(<span style=\"color: rgba(0, 128, 0, 1); font-weight: bold\">\"file\") MultipartFile file,<br>                                          HttpServletRequest request) {<br>        System.<span style=\"color: rgba(102, 14, 122, 1); font-weight: bold\">out.println(<span style=\"color: rgba(0, 128, 0, 1); font-weight: bold\">\"调用文件上传方法\");<br>        String contentType = file.getContentType();<br>        String fileName = file.getOriginalFilename();</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px\"><span style=\"font-size: 18px\"><span style=\"color: rgba(128, 128, 0, 1)\"><span style=\"color: rgba(128, 128, 0, 1)\"><span style=\"color: rgba(0, 0, 128, 1); font-weight: bold\"><span style=\"color: rgba(128, 128, 128, 1)\"><span style=\"color: rgba(128, 128, 128, 1)\"><span style=\"color: rgba(128, 128, 0, 1)\"><span style=\"color: rgba(0, 128, 0, 1); font-weight: bold\"><span style=\"color: rgba(102, 14, 122, 1); font-weight: bold\"><span style=\"color: rgba(0, 0, 128, 1); font-weight: bold\"><span style=\"color: rgba(128, 128, 128, 1)\"><span style=\"color: rgba(128, 128, 128, 1)\"><span style=\"color: rgba(0, 0, 128, 1); font-weight: bold\"><span style=\"color: rgba(0, 128, 0, 1); font-weight: bold\"><span style=\"color: rgba(128, 128, 128, 1)\"><span style=\"color: rgba(128, 128, 128, 1)\"><span style=\"color: rgba(128, 128, 0, 1)\"><span style=\"color: rgba(0, 128, 0, 1); font-weight: bold\"><span style=\"color: rgba(102, 14, 122, 1); font-weight: bold\"><span style=\"color: rgba(0, 0, 128, 1); font-weight: bold\"><span style=\"color: rgba(128, 128, 0, 1)\"><span style=\"color: rgba(128, 128, 0, 1)\"><span style=\"color: rgba(0, 128, 0, 1); font-weight: bold\"><span style=\"color: rgba(102, 14, 122, 1); font-weight: bold\"><span style=\"color: rgba(0, 128, 0, 1); font-weight: bold\">&nbsp;<span style=\"color: rgba(255, 0, 0, 1)\"> 2</span>.<span style=\"color: rgba(255, 0, 0, 1)\">@RestController注解，相当于@Controller+@ResponseBody两个注解的结合，返回json数据不需要在方法前面加@ResponseBody注解了，但使用<span style=\"font-size: 18px\"><span style=\"font-size: 18px\"><span style=\"color: rgba(128, 128, 0, 1)\"><span style=\"color: rgba(128, 128, 0, 1)\"><span style=\"color: rgba(0, 0, 128, 1); font-weight: bold\"><span style=\"color: rgba(128, 128, 128, 1)\"><span style=\"color: rgba(128, 128, 128, 1)\"><span style=\"color: rgba(128, 128, 0, 1)\"><span style=\"color: rgba(0, 128, 0, 1); font-weight: bold\"><span style=\"color: rgba(102, 14, 122, 1); font-weight: bold\"><span style=\"color: rgba(0, 0, 128, 1); font-weight: bold\"><span style=\"color: rgba(128, 128, 128, 1)\"><span style=\"color: rgba(128, 128, 128, 1)\"><span style=\"color: rgba(0, 0, 128, 1); font-weight: bold\"><span style=\"color: rgba(0, 128, 0, 1); font-weight: bold\"><span style=\"color: rgba(128, 128, 128, 1)\"><span style=\"color: rgba(128, 128, 128, 1)\"><span style=\"color: rgba(128, 128, 0, 1)\"><span style=\"color: rgba(0, 128, 0, 1); font-weight: bold\"><span style=\"color: rgba(102, 14, 122, 1); font-weight: bold\"><span style=\"color: rgba(0, 0, 128, 1); font-weight: bold\"><span style=\"color: rgba(128, 128, 0, 1)\"><span style=\"color: rgba(128, 128, 0, 1)\"><span style=\"color: rgba(0, 128, 0, 1); font-weight: bold\"><span style=\"color: rgba(102, 14, 122, 1); font-weight: bold\"><span style=\"color: rgba(0, 128, 0, 1); font-weight: bold\"><span style=\"color: rgba(255, 0, 0, 1)\">@RestController</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>这个注解，就不能返回jsp,html页面，视图解析器无法解析jsp,html页面</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<pre><span style=\"color: rgba(128, 128, 0, 1)\">@CrossOrigin<br><span style=\"color: rgba(128, 128, 0, 1)\"><span style=\"color: rgba(255, 0, 0, 1)\">@RestController </span><span style=\"color: rgba(128, 128, 128, 1)\"><span style=\"color: rgba(255, 0, 0, 1)\">/* @Controller + @ResponseBody*/</span><br><span style=\"color: rgba(0, 0, 128, 1); font-weight: bold\">public class HospitalController {<br><br>    <span style=\"color: rgba(128, 128, 128, 1)\">//注入Service服务对象<br><span style=\"color: rgba(128, 128, 128, 1)\">    <span style=\"color: rgba(128, 128, 0, 1)\">@Autowired<br><span style=\"color: rgba(128, 128, 0, 1)\">    <span style=\"color: rgba(0, 0, 128, 1); font-weight: bold\">private HospitalService <span style=\"color: rgba(102, 14, 122, 1); font-weight: bold\">hospitalService;<br><br>    <span style=\"color: rgba(128, 128, 128, 1)\">/**<br><span style=\"color: rgba(128, 128, 128, 1)\">     * 查询所有医院信息（未分页）<br><span style=\"color: rgba(128, 128, 128, 1)\">     */<br><span style=\"color: rgba(128, 128, 128, 1)\"><br><span style=\"color: rgba(128, 128, 128, 1)\">    <span style=\"color: rgba(128, 128, 0, 1)\">@RequestMapping(value = <span style=\"color: rgba(0, 128, 0, 1); font-weight: bold\">\"findAllHospital\",method = RequestMethod.<span style=\"color: rgba(102, 14, 122, 1); font-weight: bold\">GET)<br>    <span style=\"color: rgba(0, 0, 128, 1); font-weight: bold\">public  List&lt;Hospital&gt; findAllHospital(){<br>        List&lt;Hospital&gt; hospitalList= <span style=\"color: rgba(102, 14, 122, 1); font-weight: bold\">hospitalService.findAllHospital();<br>        <span style=\"color: rgba(0, 0, 128, 1); font-weight: bold\">return hospitalList;<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style=\"color: rgba(128, 128, 128, 1)\"><span style=\"color: rgba(0, 0, 128, 1); font-weight: bold\"><span style=\"color: rgba(128, 128, 128, 1)\"><span style=\"color: rgba(128, 128, 128, 1)\"><span style=\"color: rgba(128, 128, 0, 1)\"><span style=\"color: rgba(128, 128, 0, 1)\"><span style=\"color: rgba(0, 0, 128, 1); font-weight: bold\"><span style=\"color: rgba(102, 14, 122, 1); font-weight: bold\"><span style=\"color: rgba(128, 128, 128, 1)\"><span style=\"color: rgba(128, 128, 128, 1)\"><span style=\"color: rgba(128, 128, 128, 1)\"><span style=\"color: rgba(128, 128, 128, 1)\"><span style=\"color: rgba(128, 128, 128, 1)\"><span style=\"color: rgba(128, 128, 0, 1)\"><span style=\"color: rgba(0, 128, 0, 1); font-weight: bold\"><span style=\"color: rgba(102, 14, 122, 1); font-weight: bold\"><span style=\"color: rgba(0, 0, 128, 1); font-weight: bold\"><span style=\"color: rgba(102, 14, 122, 1); font-weight: bold\"><span style=\"color: rgba(0, 0, 128, 1); font-weight: bold\">    }</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style=\"color: rgba(128, 128, 128, 1); font-style: italic\"><span style=\"color: rgba(0, 0, 128, 1); font-weight: bold\"><span style=\"color: rgba(128, 128, 128, 1); font-style: italic\"><span style=\"color: rgba(128, 128, 128, 1); font-style: italic\"><span style=\"color: rgba(128, 128, 0, 1)\"><span style=\"color: rgba(128, 128, 0, 1)\"><span style=\"color: rgba(0, 0, 128, 1); font-weight: bold\"><span style=\"color: rgba(102, 14, 122, 1); font-weight: bold\"><span style=\"color: rgba(128, 128, 128, 1); font-style: italic\"><span style=\"color: rgba(128, 128, 128, 1); font-style: italic\"><span style=\"color: rgba(128, 128, 128, 1); font-style: italic\"><span style=\"color: rgba(128, 128, 128, 1); font-style: italic\"><span style=\"color: rgba(128, 128, 128, 1); font-style: italic\"><span style=\"color: rgba(128, 128, 0, 1)\"><span style=\"color: rgba(0, 128, 0, 1); font-weight: bold\"><span style=\"color: rgba(102, 14, 122, 1); font-weight: bold; font-style: italic\"><span style=\"color: rgba(0, 0, 128, 1); font-weight: bold\"><span style=\"color: rgba(102, 14, 122, 1); font-weight: bold\"><span style=\"color: rgba(0, 0, 128, 1); font-weight: bold\"><br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>\n<p>&nbsp;</p>\n<p>参考：http://blog.csdn.net/gg12365gg/article/details/51345601</p>\n</div>"
  },
  {
    "category": "spring",
    "qes": "Spring IoC有什么好处",
    "ans": "<div class=\"RichContent RichContent--unescapable\"><div class=\"RichContent-inner\"><span class=\"RichText ztext CopyrightRichText-richText\" itemprop=\"text\"><p>要了解<b>控制反转( Inversion of Control )</b>, 我觉得有必要先了解软件设计的一个重要思想：<b>依赖倒置原则（Dependency Inversion Principle ）</b>。</p><figure><noscript><img src=\"https://pic4.zhimg.com/50/v2-d53c75e91d959acbb0d95a835212ada5_hd.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"600\" data-rawheight=\"61\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-d53c75e91d959acbb0d95a835212ada5_r.jpg?source=1940ef5c\"/></noscript><img src=\"https://pic4.zhimg.com/80/v2-d53c75e91d959acbb0d95a835212ada5_720w.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"600\" data-rawheight=\"61\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-d53c75e91d959acbb0d95a835212ada5_r.jpg?source=1940ef5c\" data-actualsrc=\"https://pic4.zhimg.com/50/v2-d53c75e91d959acbb0d95a835212ada5_hd.jpg?source=1940ef5c\" data-lazy-status=\"ok\"></figure><p><b>什么是依赖倒置原则？</b>假设我们设计一辆汽车：先设计轮子，然后根据轮子大小设计底盘，接着根据底盘设计车身，最后根据车身设计好整个汽车。这里就出现了一个“依赖”关系：汽车依赖车身，车身依赖底盘，底盘依赖轮子。</p><figure><noscript><img src=\"https://pic2.zhimg.com/50/v2-c68248bb5d9b4d64d22600571e996446_hd.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"1562\" data-rawheight=\"186\" class=\"origin_image zh-lightbox-thumb\" width=\"1562\" data-original=\"https://pic4.zhimg.com/v2-c68248bb5d9b4d64d22600571e996446_r.jpg?source=1940ef5c\"/></noscript><img src=\"https://pic2.zhimg.com/80/v2-c68248bb5d9b4d64d22600571e996446_720w.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"1562\" data-rawheight=\"186\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1562\" data-original=\"https://pic4.zhimg.com/v2-c68248bb5d9b4d64d22600571e996446_r.jpg?source=1940ef5c\" data-actualsrc=\"https://pic2.zhimg.com/50/v2-c68248bb5d9b4d64d22600571e996446_hd.jpg?source=1940ef5c\" data-lazy-status=\"ok\"></figure><p>这样的设计看起来没问题，但是可维护性却很低。假设设计完工之后，上司却突然说根据市场需求的变动，要我们把车子的轮子设计都改大一码。这下我们就蛋疼了：因为我们是根据轮子的尺寸设计的底盘，轮子的尺寸一改，底盘的设计就得修改；同样因为我们是根据底盘设计的车身，那么车身也得改，同理汽车设计也得改——整个设计几乎都得改！</p><p>我们现在换一种思路。我们先设计汽车的大概样子，然后根据汽车的样子来设计车身，根据车身来设计底盘，最后根据底盘来设计轮子。这时候，依赖关系就倒置过来了：轮子依赖底盘， 底盘依赖车身， 车身依赖汽车。</p><figure><noscript><img src=\"https://pic2.zhimg.com/50/v2-e64bf72c5c04412f626b21753aa9e1a1_hd.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"1504\" data-rawheight=\"190\" class=\"origin_image zh-lightbox-thumb\" width=\"1504\" data-original=\"https://pic4.zhimg.com/v2-e64bf72c5c04412f626b21753aa9e1a1_r.jpg?source=1940ef5c\"/></noscript><img src=\"https://pic2.zhimg.com/80/v2-e64bf72c5c04412f626b21753aa9e1a1_720w.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"1504\" data-rawheight=\"190\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1504\" data-original=\"https://pic4.zhimg.com/v2-e64bf72c5c04412f626b21753aa9e1a1_r.jpg?source=1940ef5c\" data-actualsrc=\"https://pic2.zhimg.com/50/v2-e64bf72c5c04412f626b21753aa9e1a1_hd.jpg?source=1940ef5c\" data-lazy-status=\"ok\"></figure><p>这时候，上司再说要改动轮子的设计，我们就只需要改动轮子的设计，而不需要动底盘，车身，汽车的设计了。</p><p>这就是依赖倒置原则——把原本的高层建筑依赖底层建筑“倒置”过来，变成底层建筑依赖高层建筑。高层建筑决定需要什么，底层去实现这样的需求，但是高层并不用管底层是怎么实现的。这样就不会出现前面的“牵一发动全身”的情况。</p><figure><noscript><img src=\"https://pic1.zhimg.com/50/v2-d53c75e91d959acbb0d95a835212ada5_hd.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"600\" data-rawheight=\"61\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-d53c75e91d959acbb0d95a835212ada5_r.jpg?source=1940ef5c\"/></noscript><img src=\"https://pic1.zhimg.com/80/v2-d53c75e91d959acbb0d95a835212ada5_720w.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"600\" data-rawheight=\"61\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-d53c75e91d959acbb0d95a835212ada5_r.jpg?source=1940ef5c\" data-actualsrc=\"https://pic1.zhimg.com/50/v2-d53c75e91d959acbb0d95a835212ada5_hd.jpg?source=1940ef5c\" data-lazy-status=\"ok\"></figure><p><b>控制反转（Inversion of Control）</b> 就是依赖倒置原则的一种代码设计的思路。具体采用的方法就是所谓的<b>依赖注入（Dependency Injection）</b>。其实这些概念初次接触都会感到云里雾里的。说穿了，这几种概念的关系大概如下：</p><figure><noscript><img src=\"https://pic4.zhimg.com/50/v2-ee924f8693cff51785ad6637ac5b21c1_hd.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"1398\" data-rawheight=\"630\" class=\"origin_image zh-lightbox-thumb\" width=\"1398\" data-original=\"https://pic4.zhimg.com/v2-ee924f8693cff51785ad6637ac5b21c1_r.jpg?source=1940ef5c\"/></noscript><img src=\"https://pic4.zhimg.com/80/v2-ee924f8693cff51785ad6637ac5b21c1_720w.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"1398\" data-rawheight=\"630\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1398\" data-original=\"https://pic4.zhimg.com/v2-ee924f8693cff51785ad6637ac5b21c1_r.jpg?source=1940ef5c\" data-actualsrc=\"https://pic4.zhimg.com/50/v2-ee924f8693cff51785ad6637ac5b21c1_hd.jpg?source=1940ef5c\" data-lazy-status=\"ok\"></figure><p>为了理解这几个概念，我们还是用上面汽车的例子。只不过这次换成代码。我们先定义四个Class，车，车身，底盘，轮胎。然后初始化这辆车，最后跑这辆车。代码结构如下：</p><figure><noscript><img src=\"https://pic2.zhimg.com/50/v2-8ec294de7d0f9013788e3fb5c76069ef_hd.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"512\" data-rawheight=\"717\" class=\"origin_image zh-lightbox-thumb\" width=\"512\" data-original=\"https://pic1.zhimg.com/v2-8ec294de7d0f9013788e3fb5c76069ef_r.jpg?source=1940ef5c\"/></noscript><img src=\"https://pic2.zhimg.com/80/v2-8ec294de7d0f9013788e3fb5c76069ef_720w.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"512\" data-rawheight=\"717\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"512\" data-original=\"https://pic1.zhimg.com/v2-8ec294de7d0f9013788e3fb5c76069ef_r.jpg?source=1940ef5c\" data-actualsrc=\"https://pic2.zhimg.com/50/v2-8ec294de7d0f9013788e3fb5c76069ef_hd.jpg?source=1940ef5c\" data-lazy-status=\"ok\"></figure><p>这样，就相当于上面第一个例子，上层建筑依赖下层建筑——每一个类的构造函数都直接调用了底层代码的构造函数。假设我们需要改动一下轮胎（Tire）类，把它的尺寸变成动态的，而不是一直都是30。我们需要这样改：</p><figure><noscript><img src=\"https://pic2.zhimg.com/50/v2-64e8b19eeb70d9cf87c27fe4c5c0fc81_hd.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"534\" data-rawheight=\"154\" class=\"origin_image zh-lightbox-thumb\" width=\"534\" data-original=\"https://pic4.zhimg.com/v2-64e8b19eeb70d9cf87c27fe4c5c0fc81_r.jpg?source=1940ef5c\"/></noscript><img src=\"https://pic2.zhimg.com/80/v2-64e8b19eeb70d9cf87c27fe4c5c0fc81_720w.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"534\" data-rawheight=\"154\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"534\" data-original=\"https://pic4.zhimg.com/v2-64e8b19eeb70d9cf87c27fe4c5c0fc81_r.jpg?source=1940ef5c\" data-actualsrc=\"https://pic2.zhimg.com/50/v2-64e8b19eeb70d9cf87c27fe4c5c0fc81_hd.jpg?source=1940ef5c\" data-lazy-status=\"ok\"></figure><p>由于我们修改了轮胎的定义，为了让整个程序正常运行，我们需要做以下改动：</p><figure><noscript><img src=\"https://pic2.zhimg.com/50/v2-82e0c12a1b26f7979ed9241e169affda_hd.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"1186\" data-rawheight=\"1452\" class=\"origin_image zh-lightbox-thumb\" width=\"1186\" data-original=\"https://pic4.zhimg.com/v2-82e0c12a1b26f7979ed9241e169affda_r.jpg?source=1940ef5c\"/></noscript><img src=\"https://pic2.zhimg.com/80/v2-82e0c12a1b26f7979ed9241e169affda_720w.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"1186\" data-rawheight=\"1452\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1186\" data-original=\"https://pic4.zhimg.com/v2-82e0c12a1b26f7979ed9241e169affda_r.jpg?source=1940ef5c\" data-actualsrc=\"https://pic2.zhimg.com/50/v2-82e0c12a1b26f7979ed9241e169affda_hd.jpg?source=1940ef5c\" data-lazy-status=\"ok\"></figure><p>由此我们可以看到，仅仅是为了修改轮胎的构造函数，这种设计却需要<b>修改整个上层所有类的构造函数</b>！在软件工程中，<b>这样的设计几乎是不可维护的</b>——在实际工程项目中，有的类可能会是几千个类的底层，如果每次修改这个类，我们都要修改所有以它作为依赖的类，那软件的维护成本就太高了。</p><p>所以我们需要进行控制反转（IoC），及上层控制下层，而不是下层控制着上层。我们用依赖注入（Dependency Injection）这种方式来实现控制反转。<b>所谓依赖注入，就是把底层类作为参数传入上层类，实现上层类对下层类的“控制</b>”。这里我们用<b>构造方法传递的依赖注入方式</b>重新写车类的定义：</p><figure><noscript><img src=\"https://pic1.zhimg.com/50/v2-c920a0540ce0651003a5326f6ef9891d_hd.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"1338\" data-rawheight=\"1424\" class=\"origin_image zh-lightbox-thumb\" width=\"1338\" data-original=\"https://pic1.zhimg.com/v2-c920a0540ce0651003a5326f6ef9891d_r.jpg?source=1940ef5c\"/></noscript><img src=\"https://pic1.zhimg.com/80/v2-c920a0540ce0651003a5326f6ef9891d_720w.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"1338\" data-rawheight=\"1424\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1338\" data-original=\"https://pic1.zhimg.com/v2-c920a0540ce0651003a5326f6ef9891d_r.jpg?source=1940ef5c\" data-actualsrc=\"https://pic1.zhimg.com/50/v2-c920a0540ce0651003a5326f6ef9891d_hd.jpg?source=1940ef5c\" data-lazy-status=\"ok\"></figure><p>这里我们再把轮胎尺寸变成动态的，同样为了让整个系统顺利运行，我们需要做如下修改：</p><figure><noscript><img src=\"https://pic1.zhimg.com/50/v2-99ad2cd809fcb86dd791ff7f65fb1779_hd.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"1344\" data-rawheight=\"1424\" class=\"origin_image zh-lightbox-thumb\" width=\"1344\" data-original=\"https://pic4.zhimg.com/v2-99ad2cd809fcb86dd791ff7f65fb1779_r.jpg?source=1940ef5c\"/></noscript><img src=\"https://pic1.zhimg.com/80/v2-99ad2cd809fcb86dd791ff7f65fb1779_720w.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"1344\" data-rawheight=\"1424\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1344\" data-original=\"https://pic4.zhimg.com/v2-99ad2cd809fcb86dd791ff7f65fb1779_r.jpg?source=1940ef5c\" data-actualsrc=\"https://pic1.zhimg.com/50/v2-99ad2cd809fcb86dd791ff7f65fb1779_hd.jpg?source=1940ef5c\" data-lazy-status=\"ok\"></figure><p>看到没？这里<b>我只需要修改轮胎类就行了，不用修改其他任何上层类。</b>这显然是更容易维护的代码。不仅如此，在实际的工程中，这种设计模式还有利于<b>不同组的协同合作和单元测试：</b>比如开发这四个类的分别是四个不同的组，那么只要定义好了接口，四个不同的组可以同时进行开发而不相互受限制；而对于单元测试，如果我们要写Car类的单元测试，就只需要Mock一下Framework类传入Car就行了，而不用把Framework, Bottom, Tire全部new一遍再来构造Car。</p><p>这里我们是采用的<b>构造函数传入</b>的方式进行的依赖注入。其实还有另外两种方法：<b>Setter传递</b>和<b>接口传递</b>。这里就不多讲了，核心思路都是一样的，都是为了实现<b>控制反转</b>。</p><figure><noscript><img src=\"https://pic1.zhimg.com/50/v2-861683acac47577c81f2b7493dd05649_hd.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"924\" data-rawheight=\"298\" class=\"origin_image zh-lightbox-thumb\" width=\"924\" data-original=\"https://pic1.zhimg.com/v2-861683acac47577c81f2b7493dd05649_r.jpg?source=1940ef5c\"/></noscript><img src=\"https://pic1.zhimg.com/80/v2-861683acac47577c81f2b7493dd05649_720w.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"924\" data-rawheight=\"298\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"924\" data-original=\"https://pic1.zhimg.com/v2-861683acac47577c81f2b7493dd05649_r.jpg?source=1940ef5c\" data-actualsrc=\"https://pic1.zhimg.com/50/v2-861683acac47577c81f2b7493dd05649_hd.jpg?source=1940ef5c\" data-lazy-status=\"ok\"></figure><p class=\"ztext-empty-paragraph\"><br></p><figure><noscript><img src=\"https://pic4.zhimg.com/50/v2-d53c75e91d959acbb0d95a835212ada5_hd.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"600\" data-rawheight=\"61\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-d53c75e91d959acbb0d95a835212ada5_r.jpg?source=1940ef5c\"/></noscript><img src=\"https://pic4.zhimg.com/80/v2-d53c75e91d959acbb0d95a835212ada5_720w.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"600\" data-rawheight=\"61\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-d53c75e91d959acbb0d95a835212ada5_r.jpg?source=1940ef5c\" data-actualsrc=\"https://pic4.zhimg.com/50/v2-d53c75e91d959acbb0d95a835212ada5_hd.jpg?source=1940ef5c\" data-lazy-status=\"ok\"></figure><p>看到这里你应该能理解什么控制反转和依赖注入了。那什么是<b>控制反转容器(IoC Container)</b>呢？其实上面的例子中，对车类进行初始化的那段代码发生的地方，就是控制反转容器。</p><figure><noscript><img src=\"https://pic1.zhimg.com/50/v2-c845802f9187953ed576e0555f76da42_hd.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"1422\" data-rawheight=\"628\" class=\"origin_image zh-lightbox-thumb\" width=\"1422\" data-original=\"https://pic2.zhimg.com/v2-c845802f9187953ed576e0555f76da42_r.jpg?source=1940ef5c\"/></noscript><img src=\"https://pic1.zhimg.com/80/v2-c845802f9187953ed576e0555f76da42_720w.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"1422\" data-rawheight=\"628\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1422\" data-original=\"https://pic2.zhimg.com/v2-c845802f9187953ed576e0555f76da42_r.jpg?source=1940ef5c\" data-actualsrc=\"https://pic1.zhimg.com/50/v2-c845802f9187953ed576e0555f76da42_hd.jpg?source=1940ef5c\" data-lazy-status=\"ok\"></figure><p>显然你也应该观察到了，因为采用了依赖注入，在初始化的过程中就不可避免的会写大量的new。这里IoC容器就解决了这个问题。<b>这个容器可以自动对你的代码进行初始化，你只需要维护一个Configuration（可以是xml可以是一段代码），而不用每次初始化一辆车都要亲手去写那一大段初始化的代码</b>。这是引入IoC Container的第一个好处。</p><p>IoC Container的第二个好处是：<b>我们在创建实例的时候不需要了解其中的细节。</b>在上面的例子中，我们自己手动创建一个车instance时候，是从底层往上层new的：</p><figure><noscript><img src=\"https://pic2.zhimg.com/50/v2-555b2be7d76e78511a6d6fed3304927f_hd.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"2430\" data-rawheight=\"168\" class=\"origin_image zh-lightbox-thumb\" width=\"2430\" data-original=\"https://pic1.zhimg.com/v2-555b2be7d76e78511a6d6fed3304927f_r.jpg?source=1940ef5c\"/></noscript><img src=\"https://pic2.zhimg.com/80/v2-555b2be7d76e78511a6d6fed3304927f_720w.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"2430\" data-rawheight=\"168\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2430\" data-original=\"https://pic1.zhimg.com/v2-555b2be7d76e78511a6d6fed3304927f_r.jpg?source=1940ef5c\" data-actualsrc=\"https://pic2.zhimg.com/50/v2-555b2be7d76e78511a6d6fed3304927f_hd.jpg?source=1940ef5c\" data-lazy-status=\"ok\"></figure><p>这个过程中，我们需要了解整个Car/Framework/Bottom/Tire类构造函数是怎么定义的，才能一步一步new/注入。</p><p>而IoC Container在进行这个工作的时候是反过来的，它先从最上层开始往下找依赖关系，到达最底层之后再往上一步一步new（有点像深度优先遍历）：</p><figure><noscript><img src=\"https://pic4.zhimg.com/50/v2-24a96669241e81439c636e83976ba152_hd.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"2522\" data-rawheight=\"354\" class=\"origin_image zh-lightbox-thumb\" width=\"2522\" data-original=\"https://pic1.zhimg.com/v2-24a96669241e81439c636e83976ba152_r.jpg?source=1940ef5c\"/></noscript><img src=\"https://pic4.zhimg.com/80/v2-24a96669241e81439c636e83976ba152_720w.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"2522\" data-rawheight=\"354\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2522\" data-original=\"https://pic1.zhimg.com/v2-24a96669241e81439c636e83976ba152_r.jpg?source=1940ef5c\" data-actualsrc=\"https://pic4.zhimg.com/50/v2-24a96669241e81439c636e83976ba152_hd.jpg?source=1940ef5c\" data-lazy-status=\"ok\"></figure><p>这里IoC Container可以直接隐藏具体的创建实例的细节，在我们来看它就像一个工厂：</p><figure><noscript><img src=\"https://pic1.zhimg.com/50/v2-5ca61395f37cef73c7bbe7808f9ea219_hd.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"2448\" data-rawheight=\"524\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic4.zhimg.com/v2-5ca61395f37cef73c7bbe7808f9ea219_r.jpg?source=1940ef5c\"/></noscript><img src=\"https://pic1.zhimg.com/80/v2-5ca61395f37cef73c7bbe7808f9ea219_720w.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"2448\" data-rawheight=\"524\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2448\" data-original=\"https://pic4.zhimg.com/v2-5ca61395f37cef73c7bbe7808f9ea219_r.jpg?source=1940ef5c\" data-actualsrc=\"https://pic1.zhimg.com/50/v2-5ca61395f37cef73c7bbe7808f9ea219_hd.jpg?source=1940ef5c\" data-lazy-status=\"ok\"></figure><p>我们就像是工厂的客户。我们只需要向工厂请求一个Car实例，然后它就给我们按照Config创建了一个Car实例。我们完全不用管这个Car实例是怎么一步一步被创建出来。</p><p>实际项目中，有的Service Class可能是十年前写的，有几百个类作为它的底层。假设我们新写的一个API需要实例化这个Service，我们总不可能回头去搞清楚这几百个类的构造函数吧？IoC Container的这个特性就很完美的解决了这类问题——<b>因为这个架构要求你在写class的时候需要写相应的Config文件，所以你要初始化很久以前的Service类的时候，前人都已经写好了Config文件，你直接在需要用的地方注入这个Service就可以了</b>。这大大增加了项目的可维护性且降低了开发难度。</p><figure><noscript><img src=\"https://pic1.zhimg.com/50/v2-d53c75e91d959acbb0d95a835212ada5_hd.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"600\" data-rawheight=\"61\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-d53c75e91d959acbb0d95a835212ada5_r.jpg?source=1940ef5c\"/></noscript><img src=\"https://pic1.zhimg.com/80/v2-d53c75e91d959acbb0d95a835212ada5_720w.jpg?source=1940ef5c\" data-caption=\"\" data-rawwidth=\"600\" data-rawheight=\"61\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-d53c75e91d959acbb0d95a835212ada5_r.jpg?source=1940ef5c\" data-actualsrc=\"https://pic1.zhimg.com/50/v2-d53c75e91d959acbb0d95a835212ada5_hd.jpg?source=1940ef5c\" data-lazy-status=\"ok\"></figure><p>这里只是很粗略的讲了一下我自己对IoC和DI的理解。主要的目的是在于<b>最大限度避免晦涩难懂的专业词汇，用尽量简洁，通俗，直观的例子</b>来解释这些概念。如果让大家能有一个类似“哦！原来就是这么个玩意嘛！”的印象，我觉得就OK了。想要深入了解的话，可以上网查阅一些更权威的资料。这里推荐一下 <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Dependency_injection\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">Dependency injection </a> 和 <a href=\"https://link.zhihu.com/?target=https%3A//martinfowler.com/articles/injection.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">Inversion of Control Containers and the Dependency Injection pattern</a> 这两篇文章，讲的很好很详细。</p></span></div><div><div class=\"ContentItem-time\"><a target=\"_blank\" href=\"//www.zhihu.com/question/23277575/answer/169698662\"><span data-tooltip=\"发布于 2017-05-15 13:51\">编辑于 2017-10-25</span></a></div></div><div><div class=\"ContentItem-actions Sticky RichContent-actions is-bottom\" style=\"\"><span><button aria-label=\"赞同 3764 \" type=\"button\" class=\"Button VoteButton VoteButton--up\"><span style=\"display: inline-flex; align-items: center;\">&#8203;<svg class=\"Zi Zi--TriangleUp VoteButton-TriangleUp\" fill=\"currentColor\" viewBox=\"0 0 24 24\" width=\"10\" height=\"10\"><path d=\"M2 18.242c0-.326.088-.532.237-.896l7.98-13.203C10.572 3.57 11.086 3 12 3c.915 0 1.429.571 1.784 1.143l7.98 13.203c.15.364.236.57.236.896 0 1.386-.875 1.9-1.955 1.9H3.955c-1.08 0-1.955-.517-1.955-1.9z\" fill-rule=\"evenodd\"></path></svg></span>赞同 3764</button><button aria-label=\"反对\" type=\"button\" class=\"Button VoteButton VoteButton--down\"><span style=\"display: inline-flex; align-items: center;\">&#8203;<svg class=\"Zi Zi--TriangleDown\" fill=\"currentColor\" viewBox=\"0 0 24 24\" width=\"10\" height=\"10\"><path d=\"M20.044 3H3.956C2.876 3 2 3.517 2 4.9c0 .326.087.533.236.896L10.216 19c.355.571.87 1.143 1.784 1.143s1.429-.572 1.784-1.143l7.98-13.204c.149-.363.236-.57.236-.896 0-1.386-.876-1.9-1.956-1.9z\" fill-rule=\"evenodd\"></path></svg></span></button></span><button type=\"button\" class=\"Button ContentItem-action Button--plain Button--withIcon Button--withLabel\"><span style=\"display: inline-flex; align-items: center;\">&#8203;<svg class=\"Zi Zi--Comment Button-zi\" fill=\"currentColor\" viewBox=\"0 0 24 24\" width=\"1.2em\" height=\"1.2em\"><path d=\"M10.241 19.313a.97.97 0 0 0-.77.2 7.908 7.908 0 0 1-3.772 1.482.409.409 0 0 1-.38-.637 5.825 5.825 0 0 0 1.11-2.237.605.605 0 0 0-.227-.59A7.935 7.935 0 0 1 3 11.25C3 6.7 7.03 3 12 3s9 3.7 9 8.25-4.373 9.108-10.759 8.063z\" fill-rule=\"evenodd\"></path></svg></span>231 条评论</button><div class=\"Popover ShareMenu ContentItem-action\"><div class=\"ShareMenu-toggler\" id=\"Popover32-toggle\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-owns=\"Popover32-content\"><button type=\"button\" class=\"Button Button--plain Button--withIcon Button--withLabel\"><span style=\"display: inline-flex; align-items: center;\">&#8203;<svg class=\"Zi Zi--Share Button-zi\" fill=\"currentColor\" viewBox=\"0 0 24 24\" width=\"1.2em\" height=\"1.2em\"><path d=\"M2.931 7.89c-1.067.24-1.275 1.669-.318 2.207l5.277 2.908 8.168-4.776c.25-.127.477.198.273.39L9.05 14.66l.927 5.953c.18 1.084 1.593 1.376 2.182.456l9.644-15.242c.584-.892-.212-2.029-1.234-1.796L2.93 7.89z\" fill-rule=\"evenodd\"></path></svg></span>分享</button></div></div><button type=\"button\" class=\"Button ContentItem-action Button--plain Button--withIcon Button--withLabel\"><span style=\"display: inline-flex; align-items: center;\">&#8203;<svg class=\"Zi Zi--Star Button-zi\" fill=\"currentColor\" viewBox=\"0 0 24 24\" width=\"1.2em\" height=\"1.2em\"><path d=\"M5.515 19.64l.918-5.355-3.89-3.792c-.926-.902-.639-1.784.64-1.97L8.56 7.74l2.404-4.871c.572-1.16 1.5-1.16 2.072 0L15.44 7.74l5.377.782c1.28.186 1.566 1.068.64 1.97l-3.89 3.793.918 5.354c.219 1.274-.532 1.82-1.676 1.218L12 18.33l-4.808 2.528c-1.145.602-1.896.056-1.677-1.218z\" fill-rule=\"evenodd\"></path></svg></span>收藏</button><button type=\"button\" class=\"Button ContentItem-action Button--plain Button--withIcon Button--withLabel\"><span style=\"display: inline-flex; align-items: center;\">&#8203;<svg class=\"Zi Zi--Heart Button-zi\" fill=\"currentColor\" viewBox=\"0 0 24 24\" width=\"1.2em\" height=\"1.2em\"><path d=\"M2 8.437C2 5.505 4.294 3.094 7.207 3 9.243 3 11.092 4.19 12 6c.823-1.758 2.649-3 4.651-3C19.545 3 22 5.507 22 8.432 22 16.24 13.842 21 12 21 10.158 21 2 16.24 2 8.437z\" fill-rule=\"evenodd\"></path></svg></span>喜欢</button><div class=\"Popover ContentItem-action\"><button aria-label=\"更多\" id=\"Popover33-toggle\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-owns=\"Popover33-content\" type=\"button\" class=\"Button OptionsButton Button--plain Button--withIcon Button--iconOnly\"><span style=\"display: inline-flex; align-items: center;\">&#8203;<svg class=\"Zi Zi--Dots Button-zi\" fill=\"currentColor\" viewBox=\"0 0 24 24\" width=\"1.2em\" height=\"1.2em\"><path d=\"M5 14a2 2 0 1 1 0-4 2 2 0 0 1 0 4zm7 0a2 2 0 1 1 0-4 2 2 0 0 1 0 4zm7 0a2 2 0 1 1 0-4 2 2 0 0 1 0 4z\" fill-rule=\"evenodd\"></path></svg></span></button></div><button data-zop-retract-question=\"true\" type=\"button\" class=\"Button ContentItem-action ContentItem-rightButton Button--plain\"><span class=\"RichContent-collapsedText\">收起</span><span style=\"display: inline-flex; align-items: center;\">&#8203;<svg class=\"Zi Zi--ArrowDown ContentItem-arrowIcon is-active\" fill=\"currentColor\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\"><path d=\"M12 13L8.285 9.218a.758.758 0 0 0-1.064 0 .738.738 0 0 0 0 1.052l4.249 4.512a.758.758 0 0 0 1.064 0l4.246-4.512a.738.738 0 0 0 0-1.052.757.757 0 0 0-1.063 0L12.002 13z\" fill-rule=\"evenodd\"></path></svg></span></button></div></div></div>"
  },
  {
    "category": "spring",
    "qes": "Spring Bean的作用域",
    "ans": "<div id=\"content_views\" class=\"htmledit_views\">\n                    <p>在Spring中，bean作用域用于确定哪种类型的bean实例应该从Spring容器中返回给调用者。</p> \n<p>目前Spring Bean的作用域或者说范围主要有五种。</p> \n<div class=\"table-box\"><table border=\"1\" cellpadding=\"1\" cellspacing=\"1\"><tbody><tr><td style=\"width:91px;\">作用域</td><td>描述</td></tr><tr><td style=\"width:91px;\">singleton</td><td>在spring&nbsp;IoC容器仅存在一个Bean实例，Bean以单例方式存在，bean作用域范围的默认值。</td></tr><tr><td style=\"width:91px;\">prototype</td><td>每次从容器中调用Bean时，都返回一个新的实例，即每次调用getBean()时，相当于执行newXxxBean()。</td></tr><tr><td style=\"width:91px;\">request</td><td>每次HTTP请求都会创建一个新的Bean，该作用域仅适用于web的Spring&nbsp;WebApplicationContext环境。</td></tr><tr><td style=\"width:91px;\">session</td><td>同一个HTTP Session共享一个Bean，不同Session使用不同的Bean。该作用域仅适用于web的Spring&nbsp;WebApplicationContext环境。</td></tr><tr><td style=\"width:91px;\">application</td><td>限定一个Bean的作用域为<code>ServletContext</code>的生命周期。该作用域仅适用于web的Spring&nbsp;WebApplicationContext环境。</td></tr></tbody></table></div>\n<h2><a name=\"t0\"></a><a name=\"t0\"></a>（1）被声明为<strong>singleton的bean</strong></h2> \n<p>如果bean的作用域的属性被声明为<strong>singleton，</strong>那么Spring Ioc容器只会创建一个共享的bean实例。对于所有的bean请求，只要id与该bean定义的相匹配，那么Spring在每次需要时都返回同一个bean实例。</p> \n<p style=\"margin-left:0px;\"><span style=\"color:#333333;\"><span style=\"color:#ff0000;\">Singleton是单例类型，就是在创建起容器时就同时自动创建了一个bean的对象，不管你是否使用，他都存在了，每次获取到的对象都是同一个对象。注意，singleton作用域是Spring中的缺省作用域</span>。你可以在 bean 的配置文件中设置作用域的属性为 singleton，如下所示：</span></p> \n<pre class=\"has\" name=\"code\"><code class=\"language-html hljs xml\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">&lt;!-- A bean definition with singleton scope --&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"...\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"...\"</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">\"singleton\"</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-comment\">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>单例的例子</p> \n<p>1.首先创建一个bean。</p> \n<pre class=\"has\" name=\"code\"><code class=\"language-java hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">package</span> com.spring.demo;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>  <span class=\"hljs-title\">SingletonBean</span></span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">   <span class=\"hljs-keyword\">private</span> String message;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">   <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setMessage</span><span class=\"hljs-params\">(String message)</span></span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">      <span class=\"hljs-keyword\">this</span>.message  = message;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">   }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">   <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getMessage</span><span class=\"hljs-params\">()</span></span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">      System.out.println(<span class=\"hljs-string\">\"Your Message : \"</span> + message);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">   }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>2.在Spring的配置文件中配置该bean。</p> \n<pre class=\"has\" name=\"code\"><code class=\"language-html hljs xml\"><ol class=\"hljs-ln\" style=\"width:952px\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\"><span class=\"hljs-string\">\"</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-string\">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"SingletonBean\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.spring.demo.SingletonBean\"</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">\"singleton\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-comment\">&lt;!-- 或者 --&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-comment\">&lt;!--  &lt;bean id=\"SingletonBean\" class=\"com.spring.demo.SingletonBean\" &gt;&lt;/bean&gt; --&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>测试该Bean是否为单例的。</p> \n<pre class=\"has\" name=\"code\"><code class=\"language-java hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">package</span> com.spring.demo;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContext;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> org.junit.Test;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestBean</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-meta\">@Test</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">textUser</span><span class=\"hljs-params\">()</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-comment\">//1.获取spring文件</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"13\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        ApplicationContext context = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">\"Bean.xml\"</span>);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"14\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-comment\">//2.由配置文件返回对象</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"15\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        SingletonBean singletonBeanA = (SingletonBean)context.getBean(<span class=\"hljs-string\">\"SingletonBean\"</span>);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"16\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        singletonBeanA.setMessage(<span class=\"hljs-string\">\"I'm object A\"</span>);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"17\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        singletonBeanA.getMessage();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"18\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        SingletonBean singletonBeanB = (SingletonBean)context.getBean(<span class=\"hljs-string\">\"SingletonBean\"</span>);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"19\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        singletonBeanB.getMessage();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"20\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"21\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"22\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>运行结果：</p> \n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/2018082510503176?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tvbmdtaW5fMTIz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p> \n<p>由于SingletonBean是单例的作用域，创建两个SingletonBean对象，第二个对象获取SingletonBean对象中的消息值得时候即使是由一个新的getBean()方法来获取，也可以不用设置对象中消息的值就可以直接获取SingletonBean中的消息，因为这时的消息已经由第一个对象初始化了。在单例中，每个Spring&nbsp;IoC容器只有一个实例，无论创建多少个对象，调用多少次getMessafe( )方法获取它，它总是返回同一个实例。&nbsp;</p> \n<h2><a name=\"t1\"></a><a name=\"t1\"></a>（2）被声明为p<span style=\"color:#333333;\">rototype</span><strong>的bean</strong></h2> \n<p><span style=\"color:#333333;\">当一个bean的作用域为prototype，表示一个bean定义对应多个对象实例。声明为prototype作用域的bean会导致在每次对该bean请求（将其注入到另一个bean中，或者以程序的方式调用容器的getBean()方法）时都会创建一个新的bean实例。</span><span style=\"color:#f33b45;\">p</span><span style=\"color:#ff0000;\">rototype是原型类型，它在我们创建容器的时候并没有实例化，而是当我们获取bean的时候才会去创建一个对象，而且我们每次获取到的对象都不是同一个对象。</span><span style=\"color:#333333;\">根据经验，对有状态的bean应该使用prototype作用域，而对无状态的bean则应该使用singleton作用域。</span></p> \n<p>prototype的例子。</p> \n<p>还是上面的代码。其他代码不变，把Bean.xml文件中bean的作用域由singleton改为prototype。</p> \n<pre class=\"has\" name=\"code\"><code class=\"language-html hljs xml\"><ol class=\"hljs-ln\" style=\"width:952px\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\"><span class=\"hljs-string\">\"</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-string\">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"SingletonBean\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.spring.demo.SingletonBean\"</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">\"prototype\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">   </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>执行代码，程序的执行结果为：</p> \n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180825110630865?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tvbmdtaW5fMTIz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p> \n<p>从图上可以看出在SingletonBeanA中设置的参数值在SingletonBeanB就获取不到了，说明这两个对象现在返回的就不是同一个对象实例。</p> \n<h2><a name=\"t2\"></a><a name=\"t2\"></a>（3）使用注解定义 bean 的作用域。</h2> \n<p>除了在Bean.xml文件中定义bean的作用域之外，还可以使用注解来定义 bean 的作用域。</p> \n<p>1.在Bean中加上注解。</p> \n<pre class=\"has\" name=\"code\"><code class=\"language-java hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">package</span> com.spring.demo;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Scope;;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-meta\">@Component(\"SingletonBean\")</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-meta\">@Scope(\"prototype\")</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SingletonBean</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-keyword\">private</span> String message;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setMessage</span><span class=\"hljs-params\">(String message)</span></span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">this</span>.message  = message;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"13\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getMessage</span><span class=\"hljs-params\">()</span></span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"14\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        System.out.println(<span class=\"hljs-string\">\"Your Message : \"</span> + message);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"15\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"16\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>@Component(\"SingletonBean\")注解是告诉Spring这是一个bean。<br> @Scope(\"prototype\")&nbsp;注解是告诉Spring该bean的作用域是prototype。</p> \n<p>2.bean.xml文件修改一下。</p> \n<pre class=\"has\" name=\"code\"><code class=\"language-html hljs xml\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">       <span class=\"hljs-attr\">xmlns:context</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/context\"</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\"><span class=\"hljs-string\">\"http://www.springframework.org/schema/beans</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-string\">\thttp://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-string\">\thttp://www.springframework.org/schema/context</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-string\">\thttp://www.springframework.org/schema/context/spring-context-4.2.xsd\"</span>&gt;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">   </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:component-scan</span> <span class=\"hljs-attr\">base-package</span>=<span class=\"hljs-string\">\"com.spring.demo\"</span> /&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>&lt;context:component-scan base-package=\"com.spring.demo\" /&gt;就是扫描com.spring.demo包中的所有类的注解。</p> \n<p>测试代码不用变，运行测试。</p> \n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180825113415744?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tvbmdtaW5fMTIz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p> \n<p>和在bean.xml中直接定义bean和其作用域是一样的效果。其他作用域也可以使用注解方式声明bean的作用域。</p> \n<p><code>request</code>,<code>session和application</code>这三个作用域都是基于web的Spring Web<code>ApplicationContext</code>实现的，只有在web环境下（比如<code>XmlWebApplicationContext</code>）中才能使用。&nbsp;<br> 如果开发者仅仅在常规的Spring IoC容器中比如<code>ClassPathXmlApplicationContext在</code>中使用这些作用域，那么将会抛出一个<code>IllegalStateException</code>来说明使用了未知的作用域。</p> \n<p>也就是当用户使用Spring的WebApplicationContext时，除了使用常规的singleton和<span style=\"color:#333333;\">prototype作用域之外，</span>还可以使用另外3种Bean的作用域，即request,session和application。</p> \n<p>在使用Web应用环境相关的Bean作用域时，必须在Web容器中进行一些额外的配置：</p> \n<p>1.如果开发者使用了Spring Web MVC框架的话，每一个请求都会通过Spring的<code>DispatcherServlet</code>来处理，也就没有其他特殊的初始化配置，就不需要配置了。<code>DispatcherServlet</code>已经包含了相关的状态。</p> \n<p>2.如果开发者使用的是低版本Web容器比如Servlet 2.5的web容器，请求不是通过Spring的<code>DispatcherServlet</code>（比如JSF或者Struts）来处理的。那么开发者需要注册<code>org.springframework.web.context.request.RequestContextListener</code>或者<code>ServletRequestListener</code>。可以在<code>web.xml</code>中增加如下的Listener声明：&nbsp;</p> \n<pre class=\"has\" name=\"code\"><code class=\"language-html hljs xml\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">web-app</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    ...</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">listener</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">listener-class</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            org.springframework.web.context.request.RequestContextListener</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">listener-class</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">listener</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    ...</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">web-app</span>&gt;</span></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>ServletContextListener只负责监听web容器启动和关闭的事件，而RequestContextListener实现了ServletRequestListener监听器接口，该监听器监听http请求事件。Web服务器接收到的每一次请求都会通知该监听器。&nbsp;</p> \n<p>而在Servlet 3.0以后，这些都能够通过<code>WebApplicationInitializer</code>接口来实现配置。</p> \n<p>3.如果不使用Listener，也可以考虑使用Spring的<code>RequestContextFilter，</code>通过http过滤器进行配置，在url-pattern中对所有的页面进行过滤。也是在web.xml中进行配置。</p> \n<pre class=\"has\" name=\"code\"><code class=\"language-html hljs xml\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">web-app</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    ...</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter-name</span>&gt;</span>requestContextFilter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter-name</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter-class</span>&gt;</span>org.springframework.web.filter.RequestContextFilter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter-class</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter-mapping</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter-name</span>&gt;</span>requestContextFilter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter-name</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url-pattern</span>&gt;</span>/*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url-pattern</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter-mapping</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    ...</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">web-app</span>&gt;</span></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>配置完这些额外的配置之后，就可以使用另外的3种bean的作用域了。&nbsp;</p> \n<h2><a name=\"t3\"></a><a name=\"t3\"></a>（4）请求作用域</h2> \n<p>请求作用域参考如下的Bean定义</p> \n<pre class=\"has\" name=\"code\"><code class=\"language-html hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"loginAction\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.foo.LoginAction\"</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">\"request\"</span>/&gt;</span></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>Spring容器会在每次用到<code>loginAction</code>来处理每个HTTP请求的时候都会创建一个新的<code>LoginAction</code>实例。也就是说，<code>loginAction</code>Bean的作用域是HTTP&nbsp;<code>Request</code>级别的。&nbsp;<br> 当http请求调用作用域为request的bean的时候，每增加一个HTTP请求，Spring就会创建一个新的bean，在请求处理完成之后便及时销毁这个bean。开发者可以随意改变实例的状态，因为通过<code>loginAction</code>请求来创建的其他实例根本看不到开发者改变的实例状态，所有创建的Bean实例都是根据独立的请求来的。</p> \n<h2><a name=\"t4\"></a><a name=\"t4\"></a>（5）会话作用域</h2> \n<p>会话作用域参考如下的Bean定义</p> \n<pre class=\"has\" name=\"code\"><code class=\"language-html hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"userPreferences\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.foo.UserPreferences\"</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">\"session\"</span>/&gt;</span></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>Spring容器会在每次调用到<code>userPreferences时，</code>在一个单独的HTTP会话周期来创建一个新的<code>UserPreferences</code>实例。换言之，<code>userPreferences</code>Bean的作用域是HTTP&nbsp;<code>Session</code>级别的。</p> \n<p>Session中所有http请求共享同一个请求的bean实例。Session结束后就销毁bean。&nbsp;在<code>request-scoped</code>作用域的Bean上，开发者可以随意的更改实例的状态。同样，使用从同一个userPreferences bean定义创建的其他HTTP Session实例在看不到不是自己的内部状态的修改，因为他们是单个的HTTP会话。每个Session请求都会创建新的<code>userPreferences</code>实例，所以开发者更改一个Bean的状态，对于其他的Bean仍然是不可见的。</p> \n<h2><a name=\"t5\"></a><a name=\"t5\"></a>（6）全局作用域</h2> \n<p>全局作用域参考如下的Bean定义</p> \n<pre class=\"has\" name=\"code\"><code class=\"language-html hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"appPreferences\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.foo.AppPreferences\"</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">\"application\"</span>/&gt;</span></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>Spring容器会在整个web应用范围使用到<code>appPreferences</code>的时候创建一个新的<code>AppPreferences</code>的实例。也就是说，<code>appPreferences</code>Bean是在<code>ServletContext</code>级别的，作为常规的ServletContext属性。这种作用域在一些程度上来说和Spring的单例作用域相似，但是也有如下不同之处：</p> \n<p><code>1.application</code>作用域是每个<code>ServletContext</code>中包含一个，而不是每个Spring<code>ApplicationContext</code>之中包含一个（某些应用中可能包含不止一个<code>ApplicationContext</code>）。</p> \n<p><code>2.application</code>作用域仅仅作为<code>ServletContext</code>的属性可见，单例Bean是<code>ApplicationContext</code>可见。</p> \n<p>接下来再来简单的学习下在Spring当中如何自定义作用域：</p> \n<p>在Spring 2.0中，Spring的Bean作用域机制是可以扩展的，这意味着，你不仅可以使用Spring提供的预定义Bean作用域，还可以定义自己的作用域，甚至重新定义现有的作用域（不提倡这么做，而且你不能覆盖内置的singleton和prototype作用域）</p> \n<h2><a name=\"t6\"></a><a name=\"t6\"></a>（7）自定义作用域</h2> \n<p>除了使用Spring已经定义好的作用域之外，还可以自定义bean的作用域。</p> \n<p>要底线自定义作用域</p> \n<p>1.首先需要实现自定义Scope类。</p> \n<p>首先要先实现org.springframework.beans.factory.config.Scope这个接口，要将自定义scope集成到Spring容器当中就必须要实现这个接口。接口中有两个常用的方法，分别用于底层存储机制获取和删除这个对象。</p> \n<p>2.在实现一个或多个自定义Scope并测试通过之后，接下来便是如何让Spring容器来识别新的作用域。registerScope方法就是在Spring容器中用来注册新的作用域。</p> \n<p>void registerScope(String scopeName, Scope scope);</p> \n<p>其中：第一个参数是与作用域相关的全局唯一的名称，第二个参数是准备实现的作用域的实例，就是实现Scope接口的实例。</p> \n<p>比如实现Scope接口的类为SimpleThreadScope，要实现的自定义的bean的作用域的名称为“thread”,那就可以这么写。</p> \n<pre class=\"has\" name=\"code\"><code class=\"language-java hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">Scope threadScope = <span class=\"hljs-keyword\">new</span> SimpleThreadScope();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">beanFactory.registerScope(<span class=\"hljs-string\">\"thread\"</span>, threadScope);</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>3.在实现和注册自定义的scope类之后，就可以通过如下类似的Bean定义来使用自定义的<code>Scope</code>:</p> \n<pre class=\"has\" name=\"code\"><code class=\"language-html hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"...\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"...\"</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">\"thread\"</span>&gt;</span></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>另外，在自定义的<code>Scope</code>中，开发者也不限于仅仅通过编程方式来实现自定义的bean的作用域，也可以在Spring的配置文件中配置和使用自定义作用域和，比如配置<code>CustomScopeConfigurer实例实现自定义的作用域，声明作用域名称为“thread”，就可以在xml文件中做如下类似的定义。</code></p> \n<pre class=\"has\" name=\"code\"><code class=\"language-html hljs xml\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-attr\">xmlns:aop</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/aop\"</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\"><span class=\"hljs-string\">\"http://www.springframework.org/schema/beans</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-string\">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-string\">        http://www.springframework.org/schema/aop</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-string\">        http://www.springframework.org/schema/aop/spring-aop.xsd\"</span>&gt;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.beans.factory.config.CustomScopeConfigurer\"</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"scopes\"</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">map</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"13\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"thread\"</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"14\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.context.support.SimpleThreadScope\"</span>/&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"15\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">entry</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"16\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">map</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"17\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"18\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"19\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"20\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"bar\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"x.y.Bar\"</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">\"thread\"</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"21\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"name\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"Rick\"</span>/&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"22\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:scoped-proxy</span>/&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"23\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"24\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"25\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"foo\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"x.y.Foo\"</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"26\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"bar\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"bar\"</span>/&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"27\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"28\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"29\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>以上就是Spring&nbsp;Bean作用域的一些基本信息。</p>\n                </div>"
  },
  {
    "category": "spring",
    "qes": "Spring 中的bean 是线程安全的吗",
    "ans": "<div id=\"post_detail\">\n    <div id=\"topics\">\n        <div class=\"post\">\n            <h1 class=\"postTitle\">\n                \n<a id=\"cb_post_title_url\" class=\"postTitle2 vertical-middle\" href=\"https://www.cnblogs.com/myseries/p/11729800.html\">\n    <span>Spring 中的bean 是线程安全的吗？</span>\n    \n\n\n</a>\n\n            </h1>\n            <div class=\"clear\"></div>\n            <div class=\"postBody\">\n                \n<div id=\"cnblogs_post_body\" class=\"blogpost-body\">\n    <p>结论： <span style=\"color: rgba(255, 0, 0, 1)\"><strong>不是线程安全的</strong></span></p>\n<p>Spring容器中的Bean是否线程安全，容器本身并没有提供Bean的线程安全策略，因此可以说Spring容器中的Bean本身不具备线程安全的特性，但是具体还是要结合具体scope的Bean去研究。</p>\n<p>Spring 的 bean 作用域（scope）类型<br>　　1、singleton:单例，默认作用域。</p>\n<p>　　2、prototype:原型，每次创建一个新对象。</p>\n<p>　　3、request:请求，每次Http请求创建一个新对象，适用于WebApplicationContext环境下。</p>\n<p>　　4、session:会话，同一个会话共享一个实例，不同会话使用不用的实例。</p>\n<p>　　5、global-session:全局会话，所有会话共享一个实例。</p>\n<p>线程安全这个问题，要从单例与原型Bean分别进行说明。</p>\n<p>原型Bean<br>　　对于原型Bean,每次创建一个新对象，也就是线程之间并不存在Bean共享，自然是不会有线程安全的问题。</p>\n<p>单例Bean<br>　　对于单例Bean,所有线程都共享一个单例实例Bean,因此是存在资源的竞争。</p>\n<p>　　如果单例Bean,是一个<span style=\"color: rgba(255, 0, 255, 1)\">无状态Bean</span>，也就是线程中的操作不会对Bean的成员执行<strong><span style=\"color: rgba(255, 0, 255, 1)\">查询</span></strong>以外的操作，那么这个单例Bean是线程安全的。比如Spring mvc 的 Controller、Service、Dao等，这些Bean大多是无状态的，只关注于方法本身。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p><span style=\"color: rgba(51, 153, 102, 1)\"><strong>spring单例，为什么controller、service和dao确能保证线程安全？</strong></span></p>\n<p>　　Spring中的Bean默认是单例模式的，框架并没有对bean进行多线程的封装处理。<br>　　实际上大部分时间Bean是无状态的（比如Dao） 所以说在某种程度上来说Bean其实是安全的。<br>　　但是如果Bean是有状态的 那就需要开发人员自己来进行线程安全的保证，最简单的办法就是改变bean的作用域 把 \"singleton\"改为’‘protopyte’ 这样每次请求Bean就相当于是 new Bean() 这样就可以保证线程的安全了。</p>\n<p>　　有状态就是有数据存储功能<br>　　无状态就是不会保存数据<br>　　</p>\n<p>　　controller、service和dao层本身并不是线程安全的，只是如果只是调用里面的方法，而且多线程调用一个实例的方法，会在内存中复制变量，这是自己的线程的工作内存，是安全的。</p>\n<p>　　想理解原理可以看看《深入理解JVM虚拟机》，2.2.2节：</p>\n<div class=\"cnblogs_code\">\n<pre>Java虚拟机栈是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。</pre>\n</div>\n<p>&nbsp;</p>\n<p>　　《Java并发编程实战》第3.2.2节：</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: rgba(0, 0, 0, 1)\">局部变量的固有属性之一就是封闭在执行线程中。\n它们位于执行线程的栈中，其他线程无法访问这个栈。</span></pre>\n</div>\n<p>　　所以其实任何无状态单例都是线程安全的。<br>　　Spring的根本就是通过大量这种单例构建起系统，以事务脚本的方式提供服务</p>\n<p>&nbsp;</p>\n<p>也可以看看这篇加深理解：&nbsp;<a title=\"关于Spring的@Controller @Service等的线程安全问题\" href=\"https://blog.csdn.net/u012843361/article/details/84023869\" target=\"_blank\">关于Spring的@Controller @Service等的线程安全问题</a></p>\n<p>首先问@Controller @Service是不是线程安全的？<br>　　答：默认配置下不是的。为啥呢？因为默认情况下@Controller没有加上@Scope，没有加@Scope就是默认值singleton，单例的。意思就是系统只会初始化一次Controller容器，所以每次请求的都是同一个Controller容器，当然是非线程安全的。举个栗子：</p>\n<div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div>\n<pre><span style=\"color: rgba(0, 0, 0, 1)\">@RestController\n</span><span style=\"color: rgba(0, 0, 255, 1)\">public</span> <span style=\"color: rgba(0, 0, 255, 1)\">class</span><span style=\"color: rgba(0, 0, 0, 1)\"> TestController {\n\n    </span><span style=\"color: rgba(0, 0, 255, 1)\">private</span> <span style=\"color: rgba(0, 0, 255, 1)\">int</span> var = 0<span style=\"color: rgba(0, 0, 0, 1)\">;\n    \n    @GetMapping(value </span>= \"/test_var\"<span style=\"color: rgba(0, 0, 0, 1)\">)\n    </span><span style=\"color: rgba(0, 0, 255, 1)\">public</span><span style=\"color: rgba(0, 0, 0, 1)\"> String test() {\n        System.out.println(</span>\"普通变量var:\" + (++<span style=\"color: rgba(0, 0, 0, 1)\">var));\n        </span><span style=\"color: rgba(0, 0, 255, 1)\">return</span> \"普通变量var:\" +<span style=\"color: rgba(0, 0, 0, 1)\"> var ;\n    }\n}</span></pre>\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div>\n<p>在postman里面发三次请求，结果如下：</p>\n<div class=\"cnblogs_Highlighter sh-gutter\">\n<div><div id=\"highlighter_281113\" class=\"syntaxhighlighter  html\"><div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"html plain\">普通变量var:1</code></div><div class=\"line number2 index1 alt1\"><code class=\"html plain\">普通变量var:2</code></div><div class=\"line number3 index2 alt2\"><code class=\"html plain\">普通变量var:3</code></div></div></td></tr></tbody></table></div></div>\n</div>\n<p>说明他不是线程安全的。怎么办呢？可以给他加上上面说的@Scope注解，如下：　　</p>\n<div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div>\n<pre><span style=\"color: rgba(0, 0, 0, 1)\">@RestController\n@Scope(value </span>= \"prototype\") <span style=\"color: rgba(0, 128, 0, 1)\">//</span><span style=\"color: rgba(0, 128, 0, 1)\"> 加上@Scope注解，他有2个取值：单例-singleton 多实例-prototype</span>\n<span style=\"color: rgba(0, 0, 255, 1)\">public</span> <span style=\"color: rgba(0, 0, 255, 1)\">class</span><span style=\"color: rgba(0, 0, 0, 1)\"> TestController {\n\n    </span><span style=\"color: rgba(0, 0, 255, 1)\">private</span> <span style=\"color: rgba(0, 0, 255, 1)\">int</span> var = 0<span style=\"color: rgba(0, 0, 0, 1)\">;\n    \n    @GetMapping(value </span>= \"/test_var\"<span style=\"color: rgba(0, 0, 0, 1)\">)\n    </span><span style=\"color: rgba(0, 0, 255, 1)\">public</span><span style=\"color: rgba(0, 0, 0, 1)\"> String test() {\n        System.out.println(</span>\"普通变量var:\" + (++<span style=\"color: rgba(0, 0, 0, 1)\">var));\n        </span><span style=\"color: rgba(0, 0, 255, 1)\">return</span> \"普通变量var:\" +<span style=\"color: rgba(0, 0, 0, 1)\"> var ;\n    }\n}</span></pre>\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div>\n<p>这样一来，每个请求都单独创建一个Controller容器，所以各个请求之间是线程安全的，三次请求结果：</p>\n<div class=\"cnblogs_Highlighter sh-gutter\">\n<div><div id=\"highlighter_659345\" class=\"syntaxhighlighter  html\"><div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"html plain\">普通变量var:1</code></div><div class=\"line number2 index1 alt1\"><code class=\"html plain\">普通变量var:1</code></div><div class=\"line number3 index2 alt2\"><code class=\"html plain\">普通变量var:1</code></div></div></td></tr></tbody></table></div></div>\n</div>\n<p>加了@Scope注解多的实例prototype是不是一定就是线程安全的呢？　　</p>\n<div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div>\n<pre><span style=\"color: rgba(0, 0, 0, 1)\">@RestController\n@Scope(value </span>= \"prototype\") <span style=\"color: rgba(0, 128, 0, 1)\">//</span><span style=\"color: rgba(0, 128, 0, 1)\"> 加上@Scope注解，他有2个取值：单例-singleton 多实例-prototype</span>\n<span style=\"color: rgba(0, 0, 255, 1)\">public</span> <span style=\"color: rgba(0, 0, 255, 1)\">class</span><span style=\"color: rgba(0, 0, 0, 1)\"> TestController {\n    </span><span style=\"color: rgba(0, 0, 255, 1)\">private</span> <span style=\"color: rgba(0, 0, 255, 1)\">int</span> var = 0<span style=\"color: rgba(0, 0, 0, 1)\">;\n    </span><span style=\"color: rgba(0, 0, 255, 1)\">private</span> <span style=\"color: rgba(0, 0, 255, 1)\">static</span> <span style=\"color: rgba(0, 0, 255, 1)\">int</span> staticVar = 0<span style=\"color: rgba(0, 0, 0, 1)\">;\n\n    @GetMapping(value </span>= \"/test_var\"<span style=\"color: rgba(0, 0, 0, 1)\">)\n    </span><span style=\"color: rgba(0, 0, 255, 1)\">public</span><span style=\"color: rgba(0, 0, 0, 1)\"> String test() {\n        System.out.println(</span>\"普通变量var:\" + (++var)+ \"---静态变量staticVar:\" + (++<span style=\"color: rgba(0, 0, 0, 1)\">staticVar));\n        </span><span style=\"color: rgba(0, 0, 255, 1)\">return</span> \"普通变量var:\" + var + \"静态变量staticVar:\" +<span style=\"color: rgba(0, 0, 0, 1)\"> staticVar;\n    }\n}</span></pre>\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div>\n<p>看三次请求结果：</p>\n<div class=\"cnblogs_Highlighter sh-gutter\">\n<div><div id=\"highlighter_947627\" class=\"syntaxhighlighter  html\"><div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"html plain\">普通变量var:1---静态变量staticVar:1</code></div><div class=\"line number2 index1 alt1\"><code class=\"html plain\">普通变量var:1---静态变量staticVar:2</code></div><div class=\"line number3 index2 alt2\"><code class=\"html plain\">普通变量var:1---静态变量staticVar:3</code></div></div></td></tr></tbody></table></div></div>\n</div>\n<p>　　虽然每次都是单独创建一个Controller但是扛不住他变量本身是static的呀，所以说呢，即便是加上@Scope注解也不一定能保证Controller 100%的线程安全。所以是否线程安全在于怎样去定义变量以及Controller的配置。所以来个全乎一点的实验，代码如下：　　</p>\n<div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div>\n<pre><span style=\"color: rgba(0, 0, 0, 1)\">@RestController\n@Scope(value </span>= \"singleton\") <span style=\"color: rgba(0, 128, 0, 1)\">//</span><span style=\"color: rgba(0, 128, 0, 1)\"> prototype singleton</span>\n<span style=\"color: rgba(0, 0, 255, 1)\">public</span> <span style=\"color: rgba(0, 0, 255, 1)\">class</span><span style=\"color: rgba(0, 0, 0, 1)\"> TestController {\n\n    </span><span style=\"color: rgba(0, 0, 255, 1)\">private</span> <span style=\"color: rgba(0, 0, 255, 1)\">int</span> var = 0; <span style=\"color: rgba(0, 128, 0, 1)\">//</span><span style=\"color: rgba(0, 128, 0, 1)\"> 定义一个普通变量</span>\n\n    <span style=\"color: rgba(0, 0, 255, 1)\">private</span> <span style=\"color: rgba(0, 0, 255, 1)\">static</span> <span style=\"color: rgba(0, 0, 255, 1)\">int</span> staticVar = 0; <span style=\"color: rgba(0, 128, 0, 1)\">//</span><span style=\"color: rgba(0, 128, 0, 1)\"> 定义一个静态变量</span>\n<span style=\"color: rgba(0, 0, 0, 1)\">\n    @Value(</span>\"${test-int}\"<span style=\"color: rgba(0, 0, 0, 1)\">)\n    </span><span style=\"color: rgba(0, 0, 255, 1)\">private</span> <span style=\"color: rgba(0, 0, 255, 1)\">int</span> testInt; <span style=\"color: rgba(0, 128, 0, 1)\">//</span><span style=\"color: rgba(0, 128, 0, 1)\"> 从配置文件中读取变量</span>\n<span style=\"color: rgba(0, 0, 0, 1)\">\n    ThreadLocal</span>&lt;Integer&gt; tl = <span style=\"color: rgba(0, 0, 255, 1)\">new</span> ThreadLocal&lt;&gt;(); <span style=\"color: rgba(0, 128, 0, 1)\">//</span><span style=\"color: rgba(0, 128, 0, 1)\"> 用ThreadLocal来封装变量</span>\n<span style=\"color: rgba(0, 0, 0, 1)\">\n    @Autowired\n    </span><span style=\"color: rgba(0, 0, 255, 1)\">private</span> User user; <span style=\"color: rgba(0, 128, 0, 1)\">//</span><span style=\"color: rgba(0, 128, 0, 1)\"> 注入一个对象来封装变量</span>\n<span style=\"color: rgba(0, 0, 0, 1)\">\n    @GetMapping(value </span>= \"/test_var\"<span style=\"color: rgba(0, 0, 0, 1)\">)\n    </span><span style=\"color: rgba(0, 0, 255, 1)\">public</span><span style=\"color: rgba(0, 0, 0, 1)\"> String test() {\n        tl.set(</span>1<span style=\"color: rgba(0, 0, 0, 1)\">);\n        System.out.println(</span>\"先取一下user对象中的值：\"+user.getAge()+\"===再取一下hashCode:\"+<span style=\"color: rgba(0, 0, 0, 1)\">user.hashCode());\n        user.setAge(</span>1<span style=\"color: rgba(0, 0, 0, 1)\">);\n        System.out.println(</span>\"普通变量var:\" + (++var) + \"===静态变量staticVar:\" + (++staticVar) + \"===配置变量testInt:\" + (++<span style=\"color: rgba(0, 0, 0, 1)\">testInt)\n                </span>+ \"===ThreadLocal变量tl:\" + tl.get()+\"===注入变量user:\" +<span style=\"color: rgba(0, 0, 0, 1)\"> user.getAge());\n        </span><span style=\"color: rgba(0, 0, 255, 1)\">return</span> \"普通变量var:\" + var + \",静态变量staticVar:\" + staticVar + \",配置读取变量testInt:\" + testInt + \",ThreadLocal变量tl:\"\n                + tl.get() + \"注入变量user:\" +<span style=\"color: rgba(0, 0, 0, 1)\"> user.getAge();\n    }\n}</span></pre>\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div>\n<p>补充Controller以外的代码：<br>config里面自己定义的Bean:User</p>\n<div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div>\n<pre><span style=\"color: rgba(0, 0, 0, 1)\">@Configuration\n</span><span style=\"color: rgba(0, 0, 255, 1)\">public</span> <span style=\"color: rgba(0, 0, 255, 1)\">class</span><span style=\"color: rgba(0, 0, 0, 1)\"> MyConfig {\n    @Bean\n    </span><span style=\"color: rgba(0, 0, 255, 1)\">public</span><span style=\"color: rgba(0, 0, 0, 1)\"> User user(){\n        </span><span style=\"color: rgba(0, 0, 255, 1)\">return</span> <span style=\"color: rgba(0, 0, 255, 1)\">new</span><span style=\"color: rgba(0, 0, 0, 1)\"> User();\n    }\n}</span></pre>\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div>\n<p>我暂时能想到的定义变量的方法就这么多了，三次http请求结果如下：</p>\n<div class=\"cnblogs_Highlighter sh-gutter\">\n<div><div id=\"highlighter_925470\" class=\"syntaxhighlighter  html\"><div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"html plain\">先取一下user对象中的值：0===再取一下hashCode:241165852</code></div><div class=\"line number2 index1 alt1\"><code class=\"html plain\">普通变量var:1===静态变量staticVar:1===配置变量testInt:1===ThreadLocal变量tl:1===注入变量user:1</code></div><div class=\"line number3 index2 alt2\"><code class=\"html plain\">先取一下user对象中的值：1===再取一下hashCode:241165852</code></div><div class=\"line number4 index3 alt1\"><code class=\"html plain\">普通变量var:2===静态变量staticVar:2===配置变量testInt:2===ThreadLocal变量tl:1===注入变量user:1</code></div><div class=\"line number5 index4 alt2\"><code class=\"html plain\">先取一下user对象中的值：1===再取一下hashCode:241165852</code></div><div class=\"line number6 index5 alt1\"><code class=\"html plain\">普通变量var:3===静态变量staticVar:3===配置变量testInt:3===ThreadLocal变量tl:1===注入变量user:1</code></div></div></td></tr></tbody></table></div></div>\n</div>\n<p>　　可以看到，在单例模式下Controller中只有用ThreadLocal封装的变量是线程安全的。为什么这样说呢？我们可以看到3次请求结果里面只有ThreadLocal变量值每次都是从0+1=1的，其他的几个都是累加的，而user对象呢，默认值是0，第二交取值的时候就已经是1了，关键他的hashCode是一样的，说明每次请求调用的都是同一个user对象。<br>下面将TestController 上的@Scope注解的属性改一下改成多实例的：@Scope(value = \"prototype\")，其他都不变，再次请求，结果如下：<br><br></p>\n<div class=\"cnblogs_Highlighter sh-gutter\">\n<div><div id=\"highlighter_841263\" class=\"syntaxhighlighter  html\"><div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"html plain\">先取一下user对象中的值：0===再取一下hashCode:853315860</code></div><div class=\"line number2 index1 alt1\"><code class=\"html plain\">普通变量var:1===静态变量staticVar:1===配置变量testInt:1===ThreadLocal变量tl:1===注入变量user:1</code></div><div class=\"line number3 index2 alt2\"><code class=\"html plain\">先取一下user对象中的值：1===再取一下hashCode:853315860</code></div><div class=\"line number4 index3 alt1\"><code class=\"html plain\">普通变量var:1===静态变量staticVar:2===配置变量testInt:1===ThreadLocal变量tl:1===注入变量user:1</code></div><div class=\"line number5 index4 alt2\"><code class=\"html plain\">先取一下user对象中的值：1===再取一下hashCode:853315860</code></div><div class=\"line number6 index5 alt1\"><code class=\"html plain\">普通变量var:1===静态变量staticVar:3===配置变量testInt:1===ThreadLocal变量tl:1===注入变量user:1</code></div></div></td></tr></tbody></table></div></div>\n</div>\n<p>　　分析这个结果发现，多实例模式下普通变量，取配置的变量还有ThreadLocal变量都是线程安全的，而静态变量和user（看他的hashCode都是一样的）对象中的变量都是非线程安全的。也就是说尽管TestController 是每次请求的时候都初始化了一个对象，但是静态变量始终是只有一份的，而且这个注入的user对象也是只有一份的。静态变量只有一份这是当然的咯，那么有没有办法让user对象可以每次都new一个新的呢？当然可以：<br><br></p>\n<div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div>\n<pre><span style=\"color: rgba(0, 0, 255, 1)\">public</span> <span style=\"color: rgba(0, 0, 255, 1)\">class</span><span style=\"color: rgba(0, 0, 0, 1)\"> MyConfig {\n    @Bean\n    @Scope(value </span>= \"prototype\"<span style=\"color: rgba(0, 0, 0, 1)\">)\n    </span><span style=\"color: rgba(0, 0, 255, 1)\">public</span><span style=\"color: rgba(0, 0, 0, 1)\"> User user(){\n        </span><span style=\"color: rgba(0, 0, 255, 1)\">return</span> <span style=\"color: rgba(0, 0, 255, 1)\">new</span><span style=\"color: rgba(0, 0, 0, 1)\"> User();\n    }    \n}</span></pre>\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div>\n<p>在config里面给这个注入的Bean加上一个相同的注解<code>@Scope(value = \"prototype\")</code>就可以了，再来请求一下看看：</p>\n<div class=\"cnblogs_Highlighter sh-gutter\">\n<div><div id=\"highlighter_967428\" class=\"syntaxhighlighter  html\"><div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"html plain\">先取一下user对象中的值：0===再取一下hashCode:1612967699</code></div><div class=\"line number2 index1 alt1\"><code class=\"html plain\">普通变量var:1===静态变量staticVar:1===配置变量testInt:1===ThreadLocal变量tl:1===注入变量user:1</code></div><div class=\"line number3 index2 alt2\"><code class=\"html plain\">先取一下user对象中的值：0===再取一下hashCode:985418837</code></div><div class=\"line number4 index3 alt1\"><code class=\"html plain\">普通变量var:1===静态变量staticVar:2===配置变量testInt:1===ThreadLocal变量tl:1===注入变量user:1</code></div><div class=\"line number5 index4 alt2\"><code class=\"html plain\">先取一下user对象中的值：0===再取一下hashCode:1958952789</code></div><div class=\"line number6 index5 alt1\"><code class=\"html plain\">普通变量var:1===静态变量staticVar:3===配置变量testInt:1===ThreadLocal变量tl:1===注入变量user:1</code></div></div></td></tr></tbody></table></div></div>\n</div>\n<p>可以看到每次请求的user对象的hashCode都不是一样的，每次赋值前取user中的变量值也都是默认值0。<br>下面总结一下：</p>\n<p>　　1、在@Controller/@Service等容器中，默认情况下，scope值是单例-singleton的，也是线程不安全的。<br>　　2、尽量不要在@Controller/@Service等容器中定义静态变量，不论是单例(singleton)还是多实例(prototype)他都是线程不安全的。<br>　　3、默认注入的Bean对象，在不设置scope的时候他也是线程不安全的。<br>　　4、一定要定义变量的话，用ThreadLocal来封装，这个是线程安全的<br><br></p>\n<p>&nbsp;</p>\n</div>\n<div id=\"MySignature\"></div>\n<div class=\"clear\"></div>\n<div id=\"blog_post_info_block\"><div id=\"BlogPostCategory\">\n    分类: \n            <a href=\"https://www.cnblogs.com/myseries/category/1454517.html\" target=\"_blank\">后台框架</a></div>\n\n\n    <div id=\"blog_post_info\">\n<div id=\"green_channel\">\n        <a href=\"javascript:void(0);\" id=\"green_channel_digg\" onclick=\"DiggIt(11729800,cb_blogId,1);green_channel_success(this,'谢谢推荐！');\">好文要顶</a>\n        <a id=\"green_channel_follow\" onclick=\"follow('7050080e-71c1-e511-9fc1-ac853d9f53cc');\" href=\"javascript:void(0);\">关注我</a>\n    <a id=\"green_channel_favorite\" onclick=\"AddToWz(cb_entryId);return false;\" href=\"javascript:void(0);\">收藏该文</a>\n    <a id=\"green_channel_weibo\" href=\"javascript:void(0);\" title=\"分享至新浪微博\" onclick=\"ShareToTsina()\"><img src=\"https://common.cnblogs.com/images/icon_weibo_24.png\" alt=\"\"></a>\n    <a id=\"green_channel_wechat\" href=\"javascript:void(0);\" title=\"分享至微信\" onclick=\"shareOnWechat()\"><img src=\"https://common.cnblogs.com/images/wechat.png\" alt=\"\"></a>\n</div>\n<div id=\"author_profile\">\n    <div id=\"author_profile_info\" class=\"author_profile_info\">\n            <a href=\"https://home.cnblogs.com/u/myseries/\" target=\"_blank\"><img src=\"https://pic.cnblogs.com/face/885859/20160123093456.png\" class=\"author_avatar\" alt=\"\"></a>\n        <div id=\"author_profile_detail\" class=\"author_profile_info\">\n            <a href=\"https://home.cnblogs.com/u/myseries/\">myseries</a><br>\n            <a href=\"https://home.cnblogs.com/u/myseries/followees/\">关注 - 32</a><br>\n            <a href=\"https://home.cnblogs.com/u/myseries/followers/\">粉丝 - 142</a>\n        </div>\n    </div>\n    <div class=\"clear\"></div>\n    <div id=\"author_profile_honor\"></div>\n    <div id=\"author_profile_follow\">\n                <a href=\"javascript:void(0);\" onclick=\"follow('7050080e-71c1-e511-9fc1-ac853d9f53cc');return false;\">+加关注</a>\n    </div>\n</div>\n<div id=\"div_digg\">\n    <div class=\"diggit\" onclick=\"votePost(11729800,'Digg')\">\n        <span class=\"diggnum\" id=\"digg_count\">14</span>\n    </div>\n    <div class=\"buryit\" onclick=\"votePost(11729800,'Bury')\">\n        <span class=\"burynum\" id=\"bury_count\">0</span>\n    </div>\n    <div class=\"clear\"></div>\n    <div class=\"diggword\" id=\"digg_tips\">\n    </div>\n</div>\n\n<script type=\"text/javascript\">\n    currentDiggType = 0;\n</script></div>\n    <div class=\"clear\"></div>\n    <div id=\"post_next_prev\">\n\n    <a href=\"https://www.cnblogs.com/myseries/p/11729260.html\" class=\"p_n_p_prefix\">« </a> 上一篇：    <a href=\"https://www.cnblogs.com/myseries/p/11729260.html\" title=\"发布于 2019-10-23 21:57\">Spring 自定义注解，结合AOP，配置简单日志注解 （转）</a>\n    <br>\n    <a href=\"https://www.cnblogs.com/myseries/p/11733861.html\" class=\"p_n_p_prefix\">» </a> 下一篇：    <a href=\"https://www.cnblogs.com/myseries/p/11733861.html\" title=\"发布于 2019-10-24 18:03\">redis 单线程的理解</a>\n\n</div>\n</div>\n            </div>\n            <div class=\"postDesc\">posted @ \n<span id=\"post-date\">2019-10-23 23:30</span>&nbsp;\n<a href=\"https://www.cnblogs.com/myseries/\">myseries</a>&nbsp;\n阅读(<span id=\"post_view_count\">13816</span>)&nbsp;\n评论(<span id=\"post_comment_count\">2</span>)&nbsp;\n<a href=\"https://i.cnblogs.com/EditPosts.aspx?postid=11729800\" rel=\"nofollow\">编辑</a>&nbsp;\n<a href=\"javascript:void(0)\" onclick=\"AddToWz(11729800);return false;\">收藏</a></div>\n        </div>\n        <script src=\"https://common.cnblogs.com/highlight/10.3.1/highlight.min.js\"></script>\n<script>markdown_highlight();</script>\n<script>\n    var allowComments = true, cb_blogId = 264749, cb_blogApp = 'myseries', cb_blogUserGuid = '7050080e-71c1-e511-9fc1-ac853d9f53cc';\n    var cb_entryId = 11729800, cb_entryCreatedDate = '2019-10-23 23:30', cb_postType = 1;\n    updatePostStats(\n        [cb_entryId],\n        function(id, count) { $(\"#post_view_count\").text(count) },\n        function(id, count) { $(\"#post_comment_count\").text(count) })\n</script>\n        <a name=\"!comments\"></a>\n<div id=\"blog-comments-placeholder\">\n\n<div id=\"comment_pager_top\">\n    \n</div>\n\n\n<div class=\"feedback_area_title\">评论列表</div>\n<div class=\"feedbackNoItems\"></div>\n\n    <div class=\"feedbackItem\">\n        <div class=\"feedbackListSubtitle\">\n            <div class=\"feedbackManage\">\n                &nbsp;&nbsp;\n                \n\n<span class=\"comment_actions\">\n    \n    \n    \n    \n</span>\n\n\n            </div>\n            <!-- Title -->\n            \n<a href=\"#4493440\" class=\"layer\">#1楼</a>\n<a name=\"4493440\" id=\"comment_anchor_4493440\"></a>\n\n            <!-- PostDate -->\n            \n<span class=\"comment_date\">2020-02-05 11:51</span>\n\n\n            <!--NameLink-->\n            \n        <a id=\"a_comment_author_4493440\" href=\"https://home.cnblogs.com/u/1482301/\" target=\"_blank\">DH-Jessica</a>\n\n            <div class=\"feedbackCon\">\n                \n<div id=\"comment_body_4493440\" data-format-type=\"Ubb\" class=\"blog_comment_body cnblogs-ubb\">\n    很全面，写的很好。\n</div>\n        <div class=\"comment_vote\">\n            <span class=\"comment_error\" style=\"color: red\"></span>\n            <a href=\"javascript:void(0);\" class=\"comment_digg\" onclick=\"return voteComment(4493440, 'Digg', this.parentElement, false);\">\n                支持(1)\n            </a>\n            <a href=\"javascript:void(0);\" class=\"comment_burry\" onclick=\"return voteComment(4493440, 'Bury', this.parentElement, false);\">\n                反对(0)\n            </a>\n        </div>\n        \n\n            </div>\n        </div>\n    </div>\n    <div class=\"feedbackItem\">\n        <div class=\"feedbackListSubtitle\">\n            <div class=\"feedbackManage\">\n                &nbsp;&nbsp;\n                \n\n<span class=\"comment_actions\">\n    \n    \n    \n    \n</span>\n\n\n            </div>\n            <!-- Title -->\n            \n<a href=\"#4702346\" class=\"layer\">#2楼</a>\n<a name=\"4702346\" id=\"comment_anchor_4702346\"></a>\n    <span id=\"comment-maxId\" style=\"display: none\">4702346</span>\n    <span id=\"comment-maxDate\" style=\"display: none\">2020/10/11 下午2:21:00</span>\n\n            <!-- PostDate -->\n            \n<span class=\"comment_date\">2020-10-11 14:21</span>\n\n\n            <!--NameLink-->\n            \n        <a id=\"a_comment_author_4702346\" href=\"https://www.cnblogs.com/amoschen/\" target=\"_blank\">helloAmos</a>\n\n            <div class=\"feedbackCon\">\n                \n<div id=\"comment_body_4702346\" data-format-type=\"Markdown\" class=\"blog_comment_body cnblogs-markdown\">\n    <p>很好，很受用哈。</p>\n\n</div>\n        <div class=\"comment_vote\">\n            <span class=\"comment_error\" style=\"color: red\"></span>\n            <a href=\"javascript:void(0);\" class=\"comment_digg\" onclick=\"return voteComment(4702346, 'Digg', this.parentElement, false);\">\n                支持(0)\n            </a>\n            <a href=\"javascript:void(0);\" class=\"comment_burry\" onclick=\"return voteComment(4702346, 'Bury', this.parentElement, false);\">\n                反对(0)\n            </a>\n        </div>\n        <span id=\"comment_4702346_avatar\" style=\"display:none\">\n            https://pic.cnblogs.com/face/1501685/20200106114254.png\n        </span>\n\n            </div>\n        </div>\n    </div>\n\n\n<div id=\"comment_pager_bottom\">\n    \n</div>\n</div>\n<div id=\"comment_form\" class=\"commentform\">\n    <a name=\"commentform\"></a>\n    <div id=\"divCommentShow\"></div>\n    <div id=\"comment_nav\"><span id=\"span_refresh_tips\"></span><a href=\"javascript:void(0);\" onclick=\"return RefreshCommentList();\" id=\"lnk_RefreshComments\" runat=\"server\" clientidmode=\"Static\">刷新评论</a><a href=\"#\" onclick=\"return RefreshPage();\">刷新页面</a><a href=\"#top\">返回顶部</a></div>\n    <div id=\"comment_form_container\" style=\"visibility: visible;\"><div class=\"login_tips\">\n    登录后才能发表评论，立即 <a rel=\"nofollow\" href=\"javascript:void(0);\" class=\"underline\" onclick=\"return login('commentform');\">登录</a> 或\n    <a rel=\"nofollow\" href=\"javascript:void(0);\" class=\"underline\" onclick=\"return register();\">注册</a>，\n    <a href=\"https://www.cnblogs.com/\">访问</a> 网站首页\n</div>\n<a href=\"https://www.cnblogs.com/cmt/p/14003277.html\" target=\"_blank\" onclick=\"ga('send', 'event', 'Link', 'click', 'T2-login-tip-aws')\">写给园友们的一封求助信</a>\n</div>\n    <div class=\"ad_text_commentbox\" id=\"ad_text_under_commentbox\"></div>\n    <div id=\"ad_t2\"><a href=\"http://www.softbam.com/index.htm\" target=\"_blank\" onclick=\"ga('send', 'event', 'Link', 'click', 'T2-ucancode-1103')\">【推荐】News: 大型组态、工控、仿真、CADGIS 50万行VC++源码免费下载</a><br><a href=\"https://www.wenjuan.com/s/UZBZJvjEKs/#《博客园用户消费观调查》，快来参与吧。【问卷网提供支持】\" target=\"_blank\" onclick=\"ga('send', 'event', 'Link', 'click', 'T2-博客园问卷')\">【推荐】有你助力，更好为你——博客园用户消费观调查，附带小惊喜！</a><br><a href=\"https://www.cnblogs.com/cmt/p/14152738.html\" target=\"_blank\" onclick=\"ga('send', 'event', 'Link', 'click', 'T2-丝芙兰-圣诞')\">【推荐】博客园x丝芙兰-圣诞特别活动：圣诞选礼，美力送递</a><br><a href=\"https://brands.cnblogs.com/huawei\" target=\"_blank\" onclick=\"ga('send', 'event', 'Link', 'click', 'T2-华为专区')\">【推荐】了不起的开发者，挡不住的华为，园子里的品牌专区</a><br><a href=\"https://brands.cnblogs.com/aws/free?source=CH\" target=\"_blank\" onclick=\"ga('send', 'event', 'Link', 'click', 'T2-AWS')\">【福利】AWS携手博客园为开发者送免费套餐+50元京东E卡</a><br><a href=\"https://brands.cnblogs.com/agora\" target=\"_blank\" onclick=\"ga('send', 'event', 'Link', 'click', 'T2-声网专区')\">【推荐】未知数的距离，毫秒间的传递，声网与你实时互动</a><br><a href=\"https://brands.cnblogs.com/aerospike\" target=\"_blank\" onclick=\"ga('send', 'event', 'Link', 'click', 'T2-Aerospike专区')\">【推荐】新一代 NoSQL 数据库，Aerospike专区新鲜入驻</a><br></div>\n    <div id=\"opt_under_post\"></div>\n    <div id=\"cnblogs_c1\" class=\"c_ad_block\">\n        <div id=\"div-gpt-ad-1592365906576-0\" style=\"width: 300px; height: 250px;\" data-google-query-id=\"COSPnbTL4-0CFcuBlgod7vkOLg\"><div id=\"google_ads_iframe_/1090369/C1_0__container__\" style=\"border: 0pt none;\"><iframe id=\"google_ads_iframe_/1090369/C1_0\" title=\"3rd party ad content\" name=\"google_ads_iframe_/1090369/C1_0\" width=\"300\" height=\"250\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\" srcdoc=\"\" data-google-container-id=\"1\" style=\"border: 0px; vertical-align: bottom;\" data-load-complete=\"true\"></iframe></div></div>\n    </div>\n    <div id=\"under_post_news\"><div class=\"recomm-block\"><b>相关博文：</b><br>·  <a title=\"SpringBean(一)\" href=\"https://www.cnblogs.com/qyx66/p/11960051.html\" target=\"_blank\" onclick=\"clickRecomItmem(11960051)\">SpringBean(一)</a><br>·  <a title=\"Spring（配置Bean）\" href=\"https://www.cnblogs.com/xjs1874704478/p/11967739.html\" target=\"_blank\" onclick=\"clickRecomItmem(11967739)\">Spring（配置Bean）</a><br>·  <a title=\"SpringBean生命周期\" href=\"https://www.cnblogs.com/dalianpai/p/12017252.html\" target=\"_blank\" onclick=\"clickRecomItmem(12017252)\">SpringBean生命周期</a><br>·  <a title=\"SpringBean的作用域\" href=\"https://www.cnblogs.com/kjitboy/p/12072051.html\" target=\"_blank\" onclick=\"clickRecomItmem(12072051)\">SpringBean的作用域</a><br>·  <a title=\"Spring中的Bean---xml版\" href=\"https://www.cnblogs.com/yishilin/p/12029572.html\" target=\"_blank\" onclick=\"clickRecomItmem(12029572)\">Spring中的Bean---xml版</a><br>»  <a target=\"_blank\" href=\"https://recomm.cnblogs.com/blogpost/11729800\">更多推荐...</a></div></div>\n    <div id=\"cnblogs_c2\" class=\"c_ad_block\">\n        <div id=\"div-gpt-ad-1592366332455-0\" style=\"width: 468px; height: 60px;\" data-google-query-id=\"COWPnbTL4-0CFcuBlgod7vkOLg\"><div id=\"google_ads_iframe_/1090369/C2_0__container__\" style=\"border: 0pt none;\"><iframe id=\"google_ads_iframe_/1090369/C2_0\" title=\"3rd party ad content\" name=\"google_ads_iframe_/1090369/C2_0\" width=\"468\" height=\"60\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\" srcdoc=\"\" data-google-container-id=\"2\" style=\"border: 0px; vertical-align: bottom;\" data-load-complete=\"true\"></iframe></div></div>\n    </div>\n    <div id=\"under_post_kb\">\n<div class=\"itnews c_ad_block\">\n    <b>最新 IT 新闻</b>:\n    <br>\n ·          <a href=\"//news.cnblogs.com/n/683812/\" target=\"_blank\">海尔兄弟完成合体，但这不是逆袭解药</a>\n        <br>\n ·          <a href=\"//news.cnblogs.com/n/683765/\" target=\"_blank\">北航校友打造柔性机器手：轻松抓取蛋黄，中国唯一量产商用，创新工场投资</a>\n        <br>\n ·          <a href=\"//news.cnblogs.com/n/683810/\" target=\"_blank\">疫情期硅谷员工可远程工作，但工资少了，你怎么看</a>\n        <br>\n ·          <a href=\"//news.cnblogs.com/n/683809/\" target=\"_blank\">泡泡玛特的千亿市值，是闲鱼撑起的？</a>\n        <br>\n ·          <a href=\"//news.cnblogs.com/n/683808/\" target=\"_blank\">谷歌将为玩家提供半小时的Stadia Pro免费试用体验</a>\n        <br>\n    » <a href=\"https://news.cnblogs.com/\" title=\"IT 新闻\" target=\"_blank\">更多新闻...</a>\n</div></div>\n    <div id=\"HistoryToday\" class=\"c_ad_block\"></div>\n    <script type=\"text/javascript\">\n       var commentManager = new blogCommentManager();\n       commentManager.renderComments(0);\n       fixPostBody();\n       deliverBigBanner();\nsetTimeout(function() { incrementViewCount(cb_entryId); }, 50);       deliverT2();\n       deliverC1C2();\n       loadNewsAndKb();\n       loadBlogSignature();\nLoadPostCategoriesTags(cb_blogId, cb_entryId);       LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);\n       GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);\n       loadOptUnderPost();\n       GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);\n   </script>\n</div>\n\n    </div>\n</div>"
  },
  {
    "category": "spring",
    "qes": "spring-boot @Component和@Bean的区别",
    "ans": "<div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-light\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <p>1、@Component 是用在类上的</p> \n<pre class=\"prettyprint\"><code class=\"prism language-a has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\">@Component \npublic class Student {\n\t private String name = \"lkm\";\n\t public String getName() {\n\t \treturn name; \n\t }\n\t public void setName(String name) {\n\t     this.name = name; \n\t }\n }\n\n<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li></ul></pre> \n<p>@Bean 需要在配置类中使用，即类上需要加上@Configuration注解</p> \n<pre class=\"prettyprint\"><code class=\"prism language-s has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\">@Configuration\npublic class WebSocketConfig {\n    @Bean\n    public Student student(){\n        return new Student();\n    }\n}\n<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li></ul></pre> \n<p>如果你想要将第三方库中的组件装配到你的应用中，在这种情况下，是没有办法在它的类上添加@Component注解的，因此就不能使用自动化装配的方案了，但是我们可以使用@Bean。</p>\n                </div><div><div></div></div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-ba784fbaf8.css\" rel=\"stylesheet\">\n        </div>"
  },
  {
    "category": "spring",
    "qes": "将一个类声明为Spring的 bean 的注解有哪些",
    "ans": "<div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <p>我们一般使用 <code>@Autowired</code> 注解自动装配 bean，要想把类标识成可用于 <code>@Autowired</code>注解自动装配的 bean 的类,采用以下注解可实现：</p> \n<ul><li> <p><code>@Component</code> ：通用的注解，可标注任意类为 Spring 组件。如果一个Bean不知道属于哪个层，可以使用</p> </li><li> <p><code>@Repository</code> : 对应持久层即 Dao 层，主要用于数据库相关操作。</p> </li><li> <p><code>@Service</code> :对应服务层，主要涉及一些复杂的逻辑，需要用到 Dao层。</p> </li><li> <p><code>@Controller</code> : 对应 Spring MVC控制层，主要用户接受用户请求并调用 Service 层返回数据给前端页面。</p> </li></ul> \n<p>Spring 管理事务的方式有几种？</p> \n<pre class=\"prettyprint\"><code class=\"has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\">编程式事务，在代码中硬编码。(不推荐使用)\n声明式事务，在配置文件中配置（推荐使用）\n<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li></ul></pre> \n<p>声明式事务又分为两种：</p> \n<pre class=\"prettyprint\"><code class=\"has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\">基于XML的声明式事务\n基于注解的声明式事务\n<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li></ul></pre> \n<p>事务特性（4种）:</p> \n<pre class=\"prettyprint\"><code class=\"has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\">原子性 （atomicity）:强调事务的不可分割.\n一致性 （consistency）:事务的执行的前后数据的完整性保持一致.\n隔离性 （isolation）:一个事务执行的过程中,不应该受到其他事务的干扰\n持久性（durability） :事务一旦结束,数据就持久到数据库\n<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li></ul></pre> \n<p>Spring 事务中的隔离级别有哪几种?</p> \n<pre class=\"prettyprint\"><code class=\"has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\">TransactionDefinition 接口中定义了五个表示隔离级别的常量：\nTransactionDefinition.ISOLATION_DEFAULT: 使用后端数据库默认的隔离级别，Mysql 默认采用的 REPEATABLE_READ隔离级别 Oracle 默认采用的 READ_COMMITTED隔离级别.\nTransactionDefinition.ISOLATION_READ_UNCOMMITTED: 最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读TransactionDefinition.ISOLATION_READ_COMMITTED: 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生TransactionDefinition.ISOLATION_REPEATABLE_READ: 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\nTransactionDefinition.ISOLATION_SERIALIZABLE: 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。\n<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li></ul></pre> \n<p>如果不考虑隔离性引发安全性问题:<br> 脏读 :一个事务读到了另一个事务的未提交的数据<br> 不可重复读 :一个事务读到了另一个事务已经提交的 update 的数据导致多次查询结果不一致.<br> 虚幻读 :一个事务读到了另一个事务已经提交的 insert 的数据导致多次查询结果不一致.</p> \n<p>解决读问题: 设置事务隔离级别（5种）</p> \n<pre class=\"prettyprint\"><code class=\"has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\">DEFAULT 这是一个PlatfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别.\n未提交读（read uncommited） :脏读，不可重复读，虚读都有可能发生\n已提交读 （read commited）:避免脏读。但是不可重复读和虚读有可能发生\n可重复读 （repeatable read） :避免脏读和不可重复读.但是虚读有可能发生.\n串行化的 （serializable） :避免以上所有读问题.\nMysql 默认:可重复读\nOracle 默认:读已提交\n<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li></ul></pre> \n<p>Spring 事务中哪几种事务传播行为?<br> 支持当前事务的情况：</p> \n<pre class=\"prettyprint\"><code class=\"has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\">TransactionDefinition.PROPAGATION_REQUIRED： 如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。\nTransactionDefinition.PROPAGATION_SUPPORTS： 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。\nTransactionDefinition.PROPAGATION_MANDATORY： 如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）不支持当前事务的情况：\nTransactionDefinition.PROPAGATION_REQUIRES_NEW： 创建一个新的事务，如果当前存在事务，则把当前事务挂起。\nTransactionDefinition.PROPAGATION_NOT_SUPPORTED： 以非事务方式运行，如果当前存在事务，则把当前事务挂起。\nTransactionDefinition.PROPAGATION_NEVER： 以非事务方式运行，如果当前存在事务，则抛出异常。\n<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li></ul></pre> \n<p>其他情况：<br> TransactionDefinition.PROPAGATION_NESTED： 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</p>\n                </div><div data-report-view=\"{&quot;mod&quot;:&quot;1585297308_001&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/mojiezhao/article/details/104160674&quot;,&quot;extend1&quot;:&quot;pc&quot;,&quot;ab&quot;:&quot;new&quot;}\"><div></div></div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-ba784fbaf8.css\" rel=\"stylesheet\">\n        </div>"
  },
  {
    "category": "spring",
    "qes": "Spring Bean的生命周期（非常详细）",
    "ans": "<div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-light\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <blockquote> \n <p><a href=\"https://www.masaiqi.com/archives/springbean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%80%E5%9B%BE%E6%B5%81%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E\"><strong>在我的博客阅读本文</strong></a><br> </p>\n <div class=\"toc\">\n  <h3><a name=\"t0\"></a><a name=\"t0\"></a>文章目录</h3>\n  <ul><li><a href=\"#1__2\" target=\"_self\">1. 前言</a></li><li><a href=\"#2_Spring_Bean_16\" target=\"_self\">2. Spring Bean生命周期</a></li><li><ul><li><a href=\"#21__32\" target=\"_self\">2.1. 注册阶段</a></li><li><a href=\"#22__64\" target=\"_self\">2.2. 合并阶段</a></li><li><a href=\"#23__101\" target=\"_self\">2.3. 实例化阶段</a></li><li><ul><li><a href=\"#231_ClassLoaderBeanDefinitionbeanClassClass_105\" target=\"_self\">2.3.1. 通过ClassLoader赋值BeanDefinition的beanClass为Class对象</a></li><li><a href=\"#232_resolveBeforeInstantiation_151\" target=\"_self\">2.3.2. 实例化前阶段resolveBeforeInstantiation</a></li><li><a href=\"#233_createBeanInstance_183\" target=\"_self\">2.3.3. 实例化阶段createBeanInstance</a></li><li><a href=\"#234_populateBean_213\" target=\"_self\">2.3.4. 实例化后阶段populateBean</a></li></ul>\n    </li><li><a href=\"#24__307\" target=\"_self\">2.4. 初始化阶段</a></li><li><ul><li><a href=\"#241_Bean_Aware_349\" target=\"_self\">2.4.1. Bean Aware接口回调阶段</a></li><li><a href=\"#242_applyBeanPostProcessorsBeforeInitialization_362\" target=\"_self\">2.4.2. 初始化前阶段applyBeanPostProcessorsBeforeInitialization</a></li><li><a href=\"#243_invokeInitMethods_383\" target=\"_self\">2.4.3. 初始化阶段invokeInitMethods</a></li><li><a href=\"#244__431\" target=\"_self\">2.4.4. 初始化后阶段</a></li><li><a href=\"#245__439\" target=\"_self\">2.4.5. 初始化完成阶段</a></li></ul>\n    </li><li><a href=\"#25__443\" target=\"_self\">2.5. 销毁阶段</a></li><li><ul><li><a href=\"#251__500\" target=\"_self\">2.5.1. 销毁前阶段</a></li><li><a href=\"#252__504\" target=\"_self\">2.5.2. 销毁阶段</a></li></ul>\n   </li></ul>\n   </li><li><a href=\"#3__512\" target=\"_self\">3. 一些思考</a></li><li><ul><li><a href=\"#31__514\" target=\"_self\">3.1. 初始化，销毁的几种钩子方法的执行顺序</a></li></ul>\n   </li><li><a href=\"#4__532\" target=\"_self\">4. 参考</a></li></ul>\n </div>\n <p></p> \n</blockquote> \n<h1><a name=\"t1\"></a><a name=\"t1\"></a><a id=\"1__2\"></a>1. 前言</h1> \n<p>Spring是一个<code>IOC（Inversion of Control，控制反转）</code>容器框架，拥有<code>DI（Dependency Injection，依赖注入）</code>，<code>DL（Dependency Lookup，依赖查找</code> 等功能。</p> \n<p>认为一个IOC框架最基本要有以下功能：</p> \n<ul><li><strong>配置解析</strong></li><li><strong>对象创建</strong></li><li><strong>对象生命周期管理</strong></li></ul> \n<p><strong>本文基于Spring-5.2.2.RELEASE版本进行论述，为了简明扼要，在展示部分代码的时候省略了一些细节。</strong></p> \n<p>Spring Bean的生命周期总结因为没有一个正式的文档，因此是一个比较偏主观的分享，笔者只能结合小马哥的观点与自身的认识情况大概进行了总结，主要思路还是围绕着方法的调用栈，笔者认为，写在一个方法里，那么就可以认为是一个阶段。</p> \n<h1><a name=\"t2\"></a><a name=\"t2\"></a><a id=\"2_Spring_Bean_16\"></a>2. Spring Bean生命周期</h1> \n<p>这里po一张我自己画的图：</p> \n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/72ee140e600883bab2436b606a5fe738.png\" alt=\"Spring%20Bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%200e4b70a5ffd54a4bb12cc41b2dfe98d6/Untitled.png\"></p> \n<p>我将SpringBean生命周期分为<strong>以下五个阶段：</strong></p> \n<ol><li><strong>注册阶段</strong></li><li><strong>合并阶段</strong></li><li><strong>实例化阶段</strong></li><li><strong>初始化阶段</strong></li><li><strong>销毁阶段</strong></li></ol> \n<p>下面具体看一下每个阶段所做的事情。</p> \n<h2><a name=\"t3\"></a><a name=\"t3\"></a><a id=\"21__32\"></a>2.1. 注册阶段</h2> \n<p>注册阶段的主要任务是通过各种BeanDefinitionReader读取各种配置来源信息（比如读取xml文件、注解等），并将其转化为BeanDefintion的过程。</p> \n<p>这里要理解一下BeanDefinition的作用。众所周知，Spring提供了多种多样的注册Bean的方法，<strong>BeanDefinition的作用就是去定义并描述一个Spring Bean，方便后续解析实例化等操作。</strong></p> \n<p><code>ApplicationContext#register()</code>方法完成了对象注册阶段，其最终是调用的<code>DefaultListableBeanFactory#registerBeanDefinition()</code> 完成的BeanDefinition注册，<strong>这里的“注册”意思是将配置信息转化为BeanDefinition并放到合适的容器中</strong>，我们可以看以下代码：</p> \n<pre class=\"prettyprint\"><code class=\"prism language-java has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DefaultListableBeanFactory</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractAutowireCapableBeanFactory</span>\n\t\t<span class=\"token keyword\">implements</span> <span class=\"token class-name\">ConfigurableListableBeanFactory</span><span class=\"token punctuation\">,</span> BeanDefinitionRegistry<span class=\"token punctuation\">,</span> Serializable <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token comment\">/** Map of bean definition objects, keyed by bean name. */</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> Map<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> BeanDefinition<span class=\"token punctuation\">&gt;</span></span> beanDefinitionMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/** List of bean definition names, in registration order. */</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> List<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">&gt;</span></span> beanDefinitionNames <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//省略部分代码......</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span>String beanName<span class=\"token punctuation\">,</span> BeanDefinition beanDefinition<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">throws</span> BeanDefinitionStoreException <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token comment\">//省略了一些判断代码......</span>\n\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanDefinitionMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> beanDefinition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanDefinitionNames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">removeManualSingletonName</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li><li style=\"color: rgb(153, 153, 153);\">16</li><li style=\"color: rgb(153, 153, 153);\">17</li><li style=\"color: rgb(153, 153, 153);\">18</li><li style=\"color: rgb(153, 153, 153);\">19</li></ul></pre> \n<p>其中，beanDefinitionMap的数据结构是<code>ConcurrentHashMap</code>，因此不能保证顺序，为了记录注册的顺序，这里使用了<code>ArrayList</code>类型的beanDefinitionNames用来记录注册顺序。</p> \n<h2><a name=\"t4\"></a><a name=\"t4\"></a><a id=\"22__64\"></a>2.2. 合并阶段</h2> \n<p>经过了注册阶段，Spring的BeanDefinition容器中已经有了部分BeanDefinition信息(可能还存在通过aware接口或者postProcessor接口注册进来的beanDefinition)，下面分为两种情况：</p> \n<ul><li>对于设置了懒加载属性（isLazyInit）的BeanDefinition，在容器启动时（ApplicationContext#refresh()）时会最终调用<code>BeanFactory#getBean()</code>方法进行实例化</li><li>对于非懒加载的BeanDefinition，则需要在用到的时候调用<code>BeanFactory#getBean()</code>方法进行实例化。</li></ul> \n<p>事实上，无论哪种情况，Spring最终都会调用<code>BeanFactory#getBean()</code>方法进行实例化。在getBean()方法中会有一个合并阶段：</p> \n<pre class=\"prettyprint\"><code class=\"prism language-java has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractBeanFactory</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">FactoryBeanRegistrySupport</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ConfigurableBeanFactory</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> T <span class=\"token function\">doGetBean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> String name<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token keyword\">final</span> Class<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> requiredType<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token keyword\">final</span> Object<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> typeCheckOnly<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> BeansException <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//......</span>\n\t\t<span class=\"token keyword\">final</span> RootBeanDefinition mbd <span class=\"token operator\">=</span> <span class=\"token function\">getMergedLocalBeanDefinition</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//......</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li></ul></pre> \n<p><code>AbstractBeanFactory#getMergedLocalBeanDefinition()</code>方法完成了BeanDefinition的合并，<strong>这里的“合并”的意思是，部分BeanDefinition可能不是RootBeanDefinition（没有parent），而是部分属性需要继承其他BeanDefinition，比如xml配置中的parent属性，这就需要进行一次合并，最终产出RootBeanDefinition。</strong></p> \n<p>RootBeanDefinition的parent设置时候会有一个判断，可以看出来，RootBeanDefinition最典型的特点就是没有parent reference：</p> \n<pre class=\"prettyprint\"><code class=\"prism language-java has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RootBeanDefinition</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractBeanDefinition</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//......</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setParentName</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> String parentName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentName <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Root bean cannot be changed into a child bean with parent reference\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//......</span>\n<span class=\"token punctuation\">}</span>\n<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li></ul></pre> \n<h2><a name=\"t5\"></a><a name=\"t5\"></a><a id=\"23__101\"></a>2.3. 实例化阶段</h2> \n<p>到了实例化阶段，Spring将转化BeanDefinition中BeanDefinition为实例Bean(放在包装类BeanWrapper中)。</p> \n<h3><a name=\"t6\"></a><a name=\"t6\"></a><a id=\"231_ClassLoaderBeanDefinitionbeanClassClass_105\"></a>2.3.1. 通过ClassLoader赋值BeanDefinition的beanClass为Class对象</h3> \n<p>我们首先关注到<code>AbstractAutowireCapableBeanFactory#createBean()</code>方法，AbstractAutowireCapableBeanFactory是DefaultListableBeanFactory的父类，在这个方法中有个过程：</p> \n<pre class=\"prettyprint\"><code class=\"prism language-java has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractAutowireCapableBeanFactory</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractBeanFactory</span>\n      <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AutowireCapableBeanFactory</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//......</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">protected</span> Object <span class=\"token function\">createBean</span><span class=\"token punctuation\">(</span>String beanName<span class=\"token punctuation\">,</span> RootBeanDefinition mbd<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> Object<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">throws</span> BeanCreationException <span class=\"token punctuation\">{<!-- --></span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isTraceEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Creating instance of bean '\"</span> <span class=\"token operator\">+</span> beanName <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tRootBeanDefinition mbdToUse <span class=\"token operator\">=</span> mbd<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">//......</span>\n\n\t\t<span class=\"token comment\">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span>\n\t\tObject bean <span class=\"token operator\">=</span> <span class=\"token function\">resolveBeforeInstantiation</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbdToUse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bean <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//......</span>\n\n\t\t<span class=\"token comment\">// Make sure bean class is actually resolved at this point, and</span>\n\t\t<span class=\"token comment\">// clone the bean definition in case of a dynamically resolved Class</span>\n\t\t<span class=\"token comment\">// which cannot be stored in the shared merged bean definition.</span>\n\t\tClass<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span> resolvedClass <span class=\"token operator\">=</span> <span class=\"token function\">resolveBeanClass</span><span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resolvedClass <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">hasBeanClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tmbdToUse <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RootBeanDefinition</span><span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tmbdToUse<span class=\"token punctuation\">.</span><span class=\"token function\">setBeanClass</span><span class=\"token punctuation\">(</span>resolvedClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//......\t</span>\n\t\t\tObject beanInstance <span class=\"token operator\">=</span> <span class=\"token function\">doCreateBean</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbdToUse<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//......\t</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//......</span>\n<span class=\"token punctuation\">}</span>\n<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li><li style=\"color: rgb(153, 153, 153);\">16</li><li style=\"color: rgb(153, 153, 153);\">17</li><li style=\"color: rgb(153, 153, 153);\">18</li><li style=\"color: rgb(153, 153, 153);\">19</li><li style=\"color: rgb(153, 153, 153);\">20</li><li style=\"color: rgb(153, 153, 153);\">21</li><li style=\"color: rgb(153, 153, 153);\">22</li><li style=\"color: rgb(153, 153, 153);\">23</li><li style=\"color: rgb(153, 153, 153);\">24</li><li style=\"color: rgb(153, 153, 153);\">25</li><li style=\"color: rgb(153, 153, 153);\">26</li><li style=\"color: rgb(153, 153, 153);\">27</li><li style=\"color: rgb(153, 153, 153);\">28</li><li style=\"color: rgb(153, 153, 153);\">29</li><li style=\"color: rgb(153, 153, 153);\">30</li><li style=\"color: rgb(153, 153, 153);\">31</li><li style=\"color: rgb(153, 153, 153);\">32</li><li style=\"color: rgb(153, 153, 153);\">33</li><li style=\"color: rgb(153, 153, 153);\">34</li><li style=\"color: rgb(153, 153, 153);\">35</li></ul></pre> \n<p>可以看到<code>#resolveBeanClass()</code>方法，我们知道，比如通过xml的方式定义的BeanDefinition的beanClass是个字符串，因此这里需要通过这个方法加载Class对象并赋值回beanClass这个属性中。</p> \n<p>当然这个细节只是顺便提一下，并不是Bean生命周期中需要太关注的一环。</p> \n<h3><a name=\"t7\"></a><a name=\"t7\"></a><a id=\"232_resolveBeforeInstantiation_151\"></a>2.3.2. 实例化前阶段resolveBeforeInstantiation</h3> \n<p>从上文的代码中我们可以看这个<strong>方法<code>AbstractAutowireCapableBeanFactory#resolveBeforeInstantiation()</code>，这就是实例化前阶段，主要是处理注册到容器中的<code>InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation()</code> ，如果有返回值则将直接用返回值作为实例好的bean进行返回。</strong></p> \n<p>可以看到具体代码：</p> \n<pre class=\"prettyprint\"><code class=\"prism language-java has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractAutowireCapableBeanFactory</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractBeanFactory</span>\n      <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AutowireCapableBeanFactory</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//......</span>\n\t<span class=\"token annotation punctuation\">@Nullable</span>\n\t<span class=\"token keyword\">protected</span> Object <span class=\"token function\">resolveBeforeInstantiation</span><span class=\"token punctuation\">(</span>String beanName<span class=\"token punctuation\">,</span> RootBeanDefinition mbd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tObject bean <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Boolean<span class=\"token punctuation\">.</span>FALSE<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">.</span>beforeInstantiationResolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">// Make sure bean class is actually resolved at this point.</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">isSynthetic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">hasInstantiationAwareBeanPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tClass<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span> targetType <span class=\"token operator\">=</span> <span class=\"token function\">determineTargetType</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>targetType <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tbean <span class=\"token operator\">=</span> <span class=\"token function\">applyBeanPostProcessorsBeforeInstantiation</span><span class=\"token punctuation\">(</span>targetType<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bean <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\tbean <span class=\"token operator\">=</span> <span class=\"token function\">applyBeanPostProcessorsAfterInitialization</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tmbd<span class=\"token punctuation\">.</span>beforeInstantiationResolved <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>bean <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//......</span>\n<span class=\"token punctuation\">}</span>\n<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li><li style=\"color: rgb(153, 153, 153);\">16</li><li style=\"color: rgb(153, 153, 153);\">17</li><li style=\"color: rgb(153, 153, 153);\">18</li><li style=\"color: rgb(153, 153, 153);\">19</li><li style=\"color: rgb(153, 153, 153);\">20</li><li style=\"color: rgb(153, 153, 153);\">21</li><li style=\"color: rgb(153, 153, 153);\">22</li><li style=\"color: rgb(153, 153, 153);\">23</li></ul></pre> \n<h3><a name=\"t8\"></a><a name=\"t8\"></a><a id=\"233_createBeanInstance_183\"></a>2.3.3. 实例化阶段createBeanInstance</h3> \n<pre class=\"prettyprint\"><code class=\"prism language-java has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractAutowireCapableBeanFactory</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractBeanFactory</span>\n      <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AutowireCapableBeanFactory</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//......</span>\n\t<span class=\"token keyword\">protected</span> Object <span class=\"token function\">doCreateBean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> String beanName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> RootBeanDefinition mbd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token annotation punctuation\">@Nullable</span> Object<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">throws</span> BeanCreationException <span class=\"token punctuation\">{<!-- --></span>\n\n\t\t<span class=\"token comment\">// Instantiate the bean.</span>\n\t\tBeanWrapper instanceWrapper <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">isSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tinstanceWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>factoryBeanInstanceCache<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instanceWrapper <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tinstanceWrapper <span class=\"token operator\">=</span> <span class=\"token function\">createBeanInstance</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//......</span>\n\t\t<span class=\"token function\">populateBean</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> instanceWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\texposedObject <span class=\"token operator\">=</span> <span class=\"token function\">initializeBean</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> exposedObject<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//......</span>\n\n\t\t<span class=\"token keyword\">return</span> exposedObject<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//......</span>\n<span class=\"token punctuation\">}</span>\n<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li><li style=\"color: rgb(153, 153, 153);\">16</li><li style=\"color: rgb(153, 153, 153);\">17</li><li style=\"color: rgb(153, 153, 153);\">18</li><li style=\"color: rgb(153, 153, 153);\">19</li><li style=\"color: rgb(153, 153, 153);\">20</li><li style=\"color: rgb(153, 153, 153);\">21</li><li style=\"color: rgb(153, 153, 153);\">22</li><li style=\"color: rgb(153, 153, 153);\">23</li></ul></pre> \n<p><strong>在实例化阶段中， <code>AbstractAutowireCapableBeanFactory#createBeanInstance()</code>方法完成了Bean的创建，并将其放在包装类BeanWrapper中。</strong></p> \n<h3><a name=\"t9\"></a><a name=\"t9\"></a><a id=\"234_populateBean_213\"></a>2.3.4. 实例化后阶段populateBean</h3> \n<pre class=\"prettyprint\"><code class=\"prism language-java has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractAutowireCapableBeanFactory</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractBeanFactory</span>\n      <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AutowireCapableBeanFactory</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//......</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">populateBean</span><span class=\"token punctuation\">(</span>String beanName<span class=\"token punctuation\">,</span> RootBeanDefinition mbd<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> BeanWrapper bw<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bw <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">hasPropertyValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanCreationException</span><span class=\"token punctuation\">(</span>\n\t\t\t\t\t\tmbd<span class=\"token punctuation\">.</span><span class=\"token function\">getResourceDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cannot apply property values to null instance\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token comment\">// Skip property population phase for null instance.</span>\n\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// Give any InstantiationAwareBeanPostProcessors the opportunity to modify the</span>\n\t\t<span class=\"token comment\">// state of the bean before properties are set. This can be used, for example,</span>\n\t\t<span class=\"token comment\">// to support styles of field injection.</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">isSynthetic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">hasInstantiationAwareBeanPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>BeanPostProcessor bp <span class=\"token operator\">:</span> <span class=\"token function\">getBeanPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bp <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">InstantiationAwareBeanPostProcessor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tInstantiationAwareBeanPostProcessor ibp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>InstantiationAwareBeanPostProcessor<span class=\"token punctuation\">)</span> bp<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ibp<span class=\"token punctuation\">.</span><span class=\"token function\">postProcessAfterInstantiation</span><span class=\"token punctuation\">(</span>bw<span class=\"token punctuation\">.</span><span class=\"token function\">getWrappedInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tPropertyValues pvs <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">hasPropertyValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getPropertyValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">int</span> resolvedAutowireMode <span class=\"token operator\">=</span> mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getResolvedAutowireMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resolvedAutowireMode <span class=\"token operator\">==</span> AUTOWIRE_BY_NAME <span class=\"token operator\">||</span> resolvedAutowireMode <span class=\"token operator\">==</span> AUTOWIRE_BY_TYPE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tMutablePropertyValues newPvs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutablePropertyValues</span><span class=\"token punctuation\">(</span>pvs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// Add property values based on autowire by name if applicable.</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resolvedAutowireMode <span class=\"token operator\">==</span> AUTOWIRE_BY_NAME<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token function\">autowireByName</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> bw<span class=\"token punctuation\">,</span> newPvs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">// Add property values based on autowire by type if applicable.</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resolvedAutowireMode <span class=\"token operator\">==</span> AUTOWIRE_BY_TYPE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token function\">autowireByType</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> bw<span class=\"token punctuation\">,</span> newPvs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tpvs <span class=\"token operator\">=</span> newPvs<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">boolean</span> hasInstAwareBpps <span class=\"token operator\">=</span> <span class=\"token function\">hasInstantiationAwareBeanPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">boolean</span> needsDepCheck <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getDependencyCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> AbstractBeanDefinition<span class=\"token punctuation\">.</span>DEPENDENCY_CHECK_NONE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tPropertyDescriptor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> filteredPds <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasInstAwareBpps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pvs <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tpvs <span class=\"token operator\">=</span> mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getPropertyValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>BeanPostProcessor bp <span class=\"token operator\">:</span> <span class=\"token function\">getBeanPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bp <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">InstantiationAwareBeanPostProcessor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tInstantiationAwareBeanPostProcessor ibp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>InstantiationAwareBeanPostProcessor<span class=\"token punctuation\">)</span> bp<span class=\"token punctuation\">;</span>\n\t\t\t\t\tPropertyValues pvsToUse <span class=\"token operator\">=</span> ibp<span class=\"token punctuation\">.</span><span class=\"token function\">postProcessProperties</span><span class=\"token punctuation\">(</span>pvs<span class=\"token punctuation\">,</span> bw<span class=\"token punctuation\">.</span><span class=\"token function\">getWrappedInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pvsToUse <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filteredPds <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t\tfilteredPds <span class=\"token operator\">=</span> <span class=\"token function\">filterPropertyDescriptorsForDependencyCheck</span><span class=\"token punctuation\">(</span>bw<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">.</span>allowCaching<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t\tpvsToUse <span class=\"token operator\">=</span> ibp<span class=\"token punctuation\">.</span><span class=\"token function\">postProcessPropertyValues</span><span class=\"token punctuation\">(</span>pvs<span class=\"token punctuation\">,</span> filteredPds<span class=\"token punctuation\">,</span> bw<span class=\"token punctuation\">.</span><span class=\"token function\">getWrappedInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pvsToUse <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\tpvs <span class=\"token operator\">=</span> pvsToUse<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>needsDepCheck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filteredPds <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tfilteredPds <span class=\"token operator\">=</span> <span class=\"token function\">filterPropertyDescriptorsForDependencyCheck</span><span class=\"token punctuation\">(</span>bw<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">.</span>allowCaching<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token function\">checkDependencies</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> filteredPds<span class=\"token punctuation\">,</span> pvs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pvs <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">applyPropertyValues</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> bw<span class=\"token punctuation\">,</span> pvs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//......</span>\n<span class=\"token punctuation\">}</span>\n<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li><li style=\"color: rgb(153, 153, 153);\">16</li><li style=\"color: rgb(153, 153, 153);\">17</li><li style=\"color: rgb(153, 153, 153);\">18</li><li style=\"color: rgb(153, 153, 153);\">19</li><li style=\"color: rgb(153, 153, 153);\">20</li><li style=\"color: rgb(153, 153, 153);\">21</li><li style=\"color: rgb(153, 153, 153);\">22</li><li style=\"color: rgb(153, 153, 153);\">23</li><li style=\"color: rgb(153, 153, 153);\">24</li><li style=\"color: rgb(153, 153, 153);\">25</li><li style=\"color: rgb(153, 153, 153);\">26</li><li style=\"color: rgb(153, 153, 153);\">27</li><li style=\"color: rgb(153, 153, 153);\">28</li><li style=\"color: rgb(153, 153, 153);\">29</li><li style=\"color: rgb(153, 153, 153);\">30</li><li style=\"color: rgb(153, 153, 153);\">31</li><li style=\"color: rgb(153, 153, 153);\">32</li><li style=\"color: rgb(153, 153, 153);\">33</li><li style=\"color: rgb(153, 153, 153);\">34</li><li style=\"color: rgb(153, 153, 153);\">35</li><li style=\"color: rgb(153, 153, 153);\">36</li><li style=\"color: rgb(153, 153, 153);\">37</li><li style=\"color: rgb(153, 153, 153);\">38</li><li style=\"color: rgb(153, 153, 153);\">39</li><li style=\"color: rgb(153, 153, 153);\">40</li><li style=\"color: rgb(153, 153, 153);\">41</li><li style=\"color: rgb(153, 153, 153);\">42</li><li style=\"color: rgb(153, 153, 153);\">43</li><li style=\"color: rgb(153, 153, 153);\">44</li><li style=\"color: rgb(153, 153, 153);\">45</li><li style=\"color: rgb(153, 153, 153);\">46</li><li style=\"color: rgb(153, 153, 153);\">47</li><li style=\"color: rgb(153, 153, 153);\">48</li><li style=\"color: rgb(153, 153, 153);\">49</li><li style=\"color: rgb(153, 153, 153);\">50</li><li style=\"color: rgb(153, 153, 153);\">51</li><li style=\"color: rgb(153, 153, 153);\">52</li><li style=\"color: rgb(153, 153, 153);\">53</li><li style=\"color: rgb(153, 153, 153);\">54</li><li style=\"color: rgb(153, 153, 153);\">55</li><li style=\"color: rgb(153, 153, 153);\">56</li><li style=\"color: rgb(153, 153, 153);\">57</li><li style=\"color: rgb(153, 153, 153);\">58</li><li style=\"color: rgb(153, 153, 153);\">59</li><li style=\"color: rgb(153, 153, 153);\">60</li><li style=\"color: rgb(153, 153, 153);\">61</li><li style=\"color: rgb(153, 153, 153);\">62</li><li style=\"color: rgb(153, 153, 153);\">63</li><li style=\"color: rgb(153, 153, 153);\">64</li><li style=\"color: rgb(153, 153, 153);\">65</li><li style=\"color: rgb(153, 153, 153);\">66</li><li style=\"color: rgb(153, 153, 153);\">67</li><li style=\"color: rgb(153, 153, 153);\">68</li><li style=\"color: rgb(153, 153, 153);\">69</li><li style=\"color: rgb(153, 153, 153);\">70</li><li style=\"color: rgb(153, 153, 153);\">71</li><li style=\"color: rgb(153, 153, 153);\">72</li><li style=\"color: rgb(153, 153, 153);\">73</li><li style=\"color: rgb(153, 153, 153);\">74</li><li style=\"color: rgb(153, 153, 153);\">75</li><li style=\"color: rgb(153, 153, 153);\">76</li><li style=\"color: rgb(153, 153, 153);\">77</li><li style=\"color: rgb(153, 153, 153);\">78</li><li style=\"color: rgb(153, 153, 153);\">79</li><li style=\"color: rgb(153, 153, 153);\">80</li><li style=\"color: rgb(153, 153, 153);\">81</li><li style=\"color: rgb(153, 153, 153);\">82</li><li style=\"color: rgb(153, 153, 153);\">83</li></ul></pre> \n<p>简单总结，实例化后阶段<code>#populateBean</code>这个方法主要用来进行属性赋值（包括依赖注入），分为以下三个阶段：</p> \n<ul><li><code>InstantiationAwareBeanPostProcessor#postProcessAfterInstantiation()</code>，这个方法决定是否进行属性赋值（返回boolean值）</li><li><code>InstantiationAwareBeanPostProcessor#postProcessPropertyValues()</code> ，这个方法可以改变具体属性的值。</li><li><code>#applyPropertyValues()</code>，进行属性赋值（包括依赖注入）。</li></ul> \n<h2><a name=\"t10\"></a><a name=\"t10\"></a><a id=\"24__307\"></a>2.4. 初始化阶段</h2> \n<p><strong>初始化阶段的主要工作是在返回bean之前做一些处理，主要由<code>AbstractAutowireCapableBeanFactory#initializeBean</code>进行实现：</strong></p> \n<pre class=\"prettyprint\"><code class=\"prism language-java has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractAutowireCapableBeanFactory</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractBeanFactory</span>\n      <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AutowireCapableBeanFactory</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//......</span>\n\t<span class=\"token keyword\">protected</span> Object <span class=\"token function\">initializeBean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> String beanName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> Object bean<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> RootBeanDefinition mbd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span><span class=\"token function\">getSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tAccessController<span class=\"token punctuation\">.</span><span class=\"token function\">doPrivileged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PrivilegedAction<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Object<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token function\">invokeAwareMethods</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getAccessControlContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">invokeAwareMethods</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tObject wrappedBean <span class=\"token operator\">=</span> bean<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mbd <span class=\"token operator\">==</span> null <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">isSynthetic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\twrappedBean <span class=\"token operator\">=</span> <span class=\"token function\">applyBeanPostProcessorsBeforeInitialization</span><span class=\"token punctuation\">(</span>wrappedBean<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">invokeInitMethods</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> wrappedBean<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanCreationException</span><span class=\"token punctuation\">(</span>\n\t\t\t\t\t<span class=\"token punctuation\">(</span>mbd <span class=\"token operator\">!=</span> null <span class=\"token operator\">?</span> mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getResourceDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\tbeanName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Invocation of init method failed\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mbd <span class=\"token operator\">==</span> null <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">isSynthetic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\twrappedBean <span class=\"token operator\">=</span> <span class=\"token function\">applyBeanPostProcessorsAfterInitialization</span><span class=\"token punctuation\">(</span>wrappedBean<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">return</span> wrappedBean<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//......</span>\n<span class=\"token punctuation\">}</span>\n<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li><li style=\"color: rgb(153, 153, 153);\">16</li><li style=\"color: rgb(153, 153, 153);\">17</li><li style=\"color: rgb(153, 153, 153);\">18</li><li style=\"color: rgb(153, 153, 153);\">19</li><li style=\"color: rgb(153, 153, 153);\">20</li><li style=\"color: rgb(153, 153, 153);\">21</li><li style=\"color: rgb(153, 153, 153);\">22</li><li style=\"color: rgb(153, 153, 153);\">23</li><li style=\"color: rgb(153, 153, 153);\">24</li><li style=\"color: rgb(153, 153, 153);\">25</li><li style=\"color: rgb(153, 153, 153);\">26</li><li style=\"color: rgb(153, 153, 153);\">27</li><li style=\"color: rgb(153, 153, 153);\">28</li><li style=\"color: rgb(153, 153, 153);\">29</li><li style=\"color: rgb(153, 153, 153);\">30</li><li style=\"color: rgb(153, 153, 153);\">31</li><li style=\"color: rgb(153, 153, 153);\">32</li><li style=\"color: rgb(153, 153, 153);\">33</li><li style=\"color: rgb(153, 153, 153);\">34</li><li style=\"color: rgb(153, 153, 153);\">35</li></ul></pre> \n<h3><a name=\"t11\"></a><a name=\"t11\"></a><a id=\"241_Bean_Aware_349\"></a>2.4.1. Bean Aware接口回调阶段</h3> \n<p><strong>Spring提供了很多的Aware接口，这些接口都用于“赋予实现类感知xxx的能力”</strong>。比如用途最广泛的ApplicationContextAware接口，就是让实现类拥有了感知到applicationContext的能力，并能直接与applicationContext进行交互。</p> \n<p>按照顺序，这些Aware接口有以下顺序：</p> \n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6acb791a71787c83e53bab66bd5dbcc6.png\" alt=\"Spring%20Bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%200e4b70a5ffd54a4bb12cc41b2dfe98d6/Untitled%201.png\"></p> \n<p>Aware接口回调主要依靠以下两个方法实现</p> \n<ul><li><code>AbstractAutowireCapableBeanFactory#invokeAwareMethods()</code> ，主要处理列表前三种Aware接口</li><li><code>AbstractAutowireCapableBeanFactory#applyBeanPostProcessorsBeforeInitialization()</code> ，在ApplicationContext容器启动的时候会将除前3种Aware接口外的接口实现转化为BeanPostProcessor，进而在初始化阶段的时候进行调用，在代码中（上文中initializeBean方法）的调用顺序也是符合我们上述的顺序的。</li></ul> \n<h3><a name=\"t12\"></a><a name=\"t12\"></a><a id=\"242_applyBeanPostProcessorsBeforeInitialization_362\"></a>2.4.2. 初始化前阶段applyBeanPostProcessorsBeforeInitialization</h3> \n<p>初始化前阶段主要通过 <code>AbstractAutowireCapableBeanFactory#applyBeanPostProcessorsBeforeInitialization()</code>方法进行实现，主要是处理 <code>BeanPostProcessor#postProcessBeforeInitialization()</code>，当然这里部分BeanPostProcessor也承担了Aware接口的回调任务，这些BeanPostProcessor是由ApplicationContext容器启动的时候注入的：</p> \n<pre class=\"prettyprint\"><code class=\"prism language-java has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractApplicationContext</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DefaultResourceLoader</span>\n\t\t<span class=\"token keyword\">implements</span> <span class=\"token class-name\">ConfigurableApplicationContext</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//......</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">prepareBeanFactory</span><span class=\"token punctuation\">(</span>ConfigurableListableBeanFactory beanFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//......</span>\n\t\n\t\t\t<span class=\"token comment\">// Configure the bean factory with context callbacks.</span>\n\t\t\tbeanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">addBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ApplicationContextAwareProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\t\t<span class=\"token comment\">//......</span>\n\t<span class=\"token comment\">//......</span>\n<span class=\"token punctuation\">}</span>\n<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li></ul></pre> \n<p>这个阶段除此以外也承担了一些其他的功能，比如处理<code>@PostConstruct</code>注解等，Spring这种类似的拓展都是基于postProcessor去做的。</p> \n<h3><a name=\"t13\"></a><a name=\"t13\"></a><a id=\"243_invokeInitMethods_383\"></a>2.4.3. 初始化阶段invokeInitMethods</h3> \n<p>由<code>AbstractAutowireCapableBeanFactory#invokeInitMethods</code>实现，主要做两件事：</p> \n<ul><li>处理 <code>InitializingBean#afterPropertiesSet()</code> 方法</li><li>处理自定义的init-method方法</li></ul> \n<pre class=\"prettyprint\"><code class=\"prism language-java has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractAutowireCapableBeanFactory</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractBeanFactory</span>\n      <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AutowireCapableBeanFactory</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//......</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">invokeInitMethods</span><span class=\"token punctuation\">(</span>String beanName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> Object bean<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> RootBeanDefinition mbd<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">throws</span> Throwable <span class=\"token punctuation\">{<!-- --></span>\n\t\n\t\t<span class=\"token keyword\">boolean</span> isInitializingBean <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>bean <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">InitializingBean</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isInitializingBean <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>mbd <span class=\"token operator\">==</span> null <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">isExternallyManagedInitMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"afterPropertiesSet\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isTraceEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invoking afterPropertiesSet() on bean with name '\"</span> <span class=\"token operator\">+</span> beanName <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span><span class=\"token function\">getSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tAccessController<span class=\"token punctuation\">.</span><span class=\"token function\">doPrivileged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PrivilegedExceptionAction<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Object<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>InitializingBean<span class=\"token punctuation\">)</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getAccessControlContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PrivilegedActionException</span> pae<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token keyword\">throw</span> pae<span class=\"token punctuation\">.</span><span class=\"token function\">getException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>InitializingBean<span class=\"token punctuation\">)</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mbd <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> bean<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> NullBean<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tString initMethodName <span class=\"token operator\">=</span> mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getInitMethodName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>StringUtils<span class=\"token punctuation\">.</span><span class=\"token function\">hasLength</span><span class=\"token punctuation\">(</span>initMethodName<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n\t\t\t\t\t<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>isInitializingBean <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"afterPropertiesSet\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>initMethodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n\t\t\t\t\t<span class=\"token operator\">!</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">isExternallyManagedInitMethod</span><span class=\"token punctuation\">(</span>initMethodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token function\">invokeCustomInitMethod</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> bean<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//......</span>\n<span class=\"token punctuation\">}</span>\n<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li><li style=\"color: rgb(153, 153, 153);\">16</li><li style=\"color: rgb(153, 153, 153);\">17</li><li style=\"color: rgb(153, 153, 153);\">18</li><li style=\"color: rgb(153, 153, 153);\">19</li><li style=\"color: rgb(153, 153, 153);\">20</li><li style=\"color: rgb(153, 153, 153);\">21</li><li style=\"color: rgb(153, 153, 153);\">22</li><li style=\"color: rgb(153, 153, 153);\">23</li><li style=\"color: rgb(153, 153, 153);\">24</li><li style=\"color: rgb(153, 153, 153);\">25</li><li style=\"color: rgb(153, 153, 153);\">26</li><li style=\"color: rgb(153, 153, 153);\">27</li><li style=\"color: rgb(153, 153, 153);\">28</li><li style=\"color: rgb(153, 153, 153);\">29</li><li style=\"color: rgb(153, 153, 153);\">30</li><li style=\"color: rgb(153, 153, 153);\">31</li><li style=\"color: rgb(153, 153, 153);\">32</li><li style=\"color: rgb(153, 153, 153);\">33</li><li style=\"color: rgb(153, 153, 153);\">34</li><li style=\"color: rgb(153, 153, 153);\">35</li><li style=\"color: rgb(153, 153, 153);\">36</li><li style=\"color: rgb(153, 153, 153);\">37</li><li style=\"color: rgb(153, 153, 153);\">38</li></ul></pre> \n<h3><a name=\"t14\"></a><a name=\"t14\"></a><a id=\"244__431\"></a>2.4.4. 初始化后阶段</h3> \n<p>初始化后阶段主要通过 <code>AbstractAutowireCapableBeanFactory#applyBeanPostProcessorsAfterInitialization()</code> 方法进行实现，用来处理</p> \n<p><code>BeanPostProcessor#postProcessAfterInitialization()</code>方法。</p> \n<p>这里是否也承担了部分Aware接口回调？这里笔者没有详细进行测试，后续有时间补充。</p> \n<h3><a name=\"t15\"></a><a name=\"t15\"></a><a id=\"245__439\"></a>2.4.5. 初始化完成阶段</h3> \n<p>初始化完成阶段主要通过 <code>SmartInitializingSingleton</code>接口进行实现，这个功能在Spring4.1+版本得到支持。是在 <code>ApplicationContext#refresh()</code>方法中调用了 <code>ApplicationContext#finishBeanFactoryInitialization()</code> 进行实现。</p> \n<h2><a name=\"t16\"></a><a name=\"t16\"></a><a id=\"25__443\"></a>2.5. 销毁阶段</h2> \n<p>一般在ApplicationContext关闭的时候调用，也就是<code>AbstractApplicationContext#close()</code> 方法。除此以外也可以主动调用销毁方法。</p> \n<p>这里在注册的时候Spring通过适配器模式包装了一个类DisposableBeanAdapter，在销毁阶段的时候会获得这个类，进而调用到<code>DisposableBeanAdapter#destroy()</code>方法：</p> \n<pre class=\"prettyprint\"><code class=\"prism language-java has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DisposableBeanAdapter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">DisposableBean</span><span class=\"token punctuation\">,</span> Runnable<span class=\"token punctuation\">,</span> Serializable <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//......</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>CollectionUtils<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanPostProcessors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>DestructionAwareBeanPostProcessor processor <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanPostProcessors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tprocessor<span class=\"token punctuation\">.</span><span class=\"token function\">postProcessBeforeDestruction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>invokeDisposableBean<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isTraceEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invoking destroy() on bean with name '\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanName <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span><span class=\"token function\">getSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tAccessController<span class=\"token punctuation\">.</span><span class=\"token function\">doPrivileged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PrivilegedExceptionAction<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Object<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DisposableBean<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>acc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DisposableBean<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tString msg <span class=\"token operator\">=</span> <span class=\"token string\">\"Invocation of destroy method failed on bean with name '\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanName <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>msg <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>destroyMethod <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">invokeCustomDestroyMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>destroyMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>destroyMethodName <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tMethod methodToInvoke <span class=\"token operator\">=</span> <span class=\"token function\">determineDestroyMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>destroyMethodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>methodToInvoke <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token function\">invokeCustomDestroyMethod</span><span class=\"token punctuation\">(</span>ClassUtils<span class=\"token punctuation\">.</span><span class=\"token function\">getInterfaceMethodIfPossible</span><span class=\"token punctuation\">(</span>methodToInvoke<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//......</span>\n<span class=\"token punctuation\">}</span>\n<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li><li style=\"color: rgb(153, 153, 153);\">16</li><li style=\"color: rgb(153, 153, 153);\">17</li><li style=\"color: rgb(153, 153, 153);\">18</li><li style=\"color: rgb(153, 153, 153);\">19</li><li style=\"color: rgb(153, 153, 153);\">20</li><li style=\"color: rgb(153, 153, 153);\">21</li><li style=\"color: rgb(153, 153, 153);\">22</li><li style=\"color: rgb(153, 153, 153);\">23</li><li style=\"color: rgb(153, 153, 153);\">24</li><li style=\"color: rgb(153, 153, 153);\">25</li><li style=\"color: rgb(153, 153, 153);\">26</li><li style=\"color: rgb(153, 153, 153);\">27</li><li style=\"color: rgb(153, 153, 153);\">28</li><li style=\"color: rgb(153, 153, 153);\">29</li><li style=\"color: rgb(153, 153, 153);\">30</li><li style=\"color: rgb(153, 153, 153);\">31</li><li style=\"color: rgb(153, 153, 153);\">32</li><li style=\"color: rgb(153, 153, 153);\">33</li><li style=\"color: rgb(153, 153, 153);\">34</li><li style=\"color: rgb(153, 153, 153);\">35</li><li style=\"color: rgb(153, 153, 153);\">36</li><li style=\"color: rgb(153, 153, 153);\">37</li><li style=\"color: rgb(153, 153, 153);\">38</li><li style=\"color: rgb(153, 153, 153);\">39</li><li style=\"color: rgb(153, 153, 153);\">40</li><li style=\"color: rgb(153, 153, 153);\">41</li><li style=\"color: rgb(153, 153, 153);\">42</li><li style=\"color: rgb(153, 153, 153);\">43</li><li style=\"color: rgb(153, 153, 153);\">44</li><li style=\"color: rgb(153, 153, 153);\">45</li><li style=\"color: rgb(153, 153, 153);\">46</li><li style=\"color: rgb(153, 153, 153);\">47</li><li style=\"color: rgb(153, 153, 153);\">48</li></ul></pre> \n<h3><a name=\"t17\"></a><a name=\"t17\"></a><a id=\"251__500\"></a>2.5.1. 销毁前阶段</h3> \n<p>主要由 <code>DestructionAwareBeanPostProcessor#postProcessBeforeDestruction()</code>提供在销毁前需要执行的方法,从上面的代码中也可以看到。</p> \n<h3><a name=\"t18\"></a><a name=\"t18\"></a><a id=\"252__504\"></a>2.5.2. 销毁阶段</h3> \n<p>这里主要包括三个销毁途径，按照执行顺序有以下：</p> \n<ul><li>@PreDestroy注解，主要通过DestructionAwareBeanPostProcessor实现</li><li>实现DisposableBean接口，主要通过<code>DisposableBean#destroy()</code>实现</li><li>自定义销毁方法<code>DisposableBeanAdapter#invokeCustomDestroyMethod()</code>实现</li></ul> \n<h1><a name=\"t19\"></a><a name=\"t19\"></a><a id=\"3__512\"></a>3. 一些思考</h1> \n<h2><a name=\"t20\"></a><a name=\"t20\"></a><a id=\"31__514\"></a>3.1. 初始化，销毁的几种钩子方法的执行顺序</h2> \n<p>可以看到，Spring的bean的主要生命周期其实就是注册→合并→实例→初始化→销毁，这之中很多的拓展功能是通过各种各样的BeanPostProcessor去实现的，最典型的就是我们的初始化与销毁阶段的几个钩子方法，按照执行顺序，总结如下：</p> \n<p>构造：</p> \n<ul><li><code>@PostConstruct</code> 注解，通过InitDestroyAnnotationBeanPostProcessor实现。</li><li><code>InitializingBean#afterPropertiesSet</code>方法，在初始化的时候直接调用</li><li>自定义的init-method</li></ul> \n<p>销毁：</p> \n<ul><li>@PreDestroy注解，通过DestructionAwareBeanPostProcessor实现</li><li>实现DisposableBean接口，在销毁的时候直接调用</li><li>自定义的destroy-method</li></ul> \n<p>总结规律就是，注解优先(通过postProcessor实现)，接口实现其次(直接调用)，自定义最后。</p> \n<h1><a name=\"t21\"></a><a name=\"t21\"></a><a id=\"4__532\"></a>4. 参考</h1> \n<ul><li>Spring-5.2.2.RELEASE源代码</li><li>小马哥极客时间课程《小马哥讲Spring核心编程思想》（安利一波）</li><li><a href=\"https://drive.google.com/file/d/1BnYx8ly2-oNGmHHXrB5JrpUSJwqHFVkK/view?usp=sharing\">文章中的整体图源文件(base on omniGraffle)</a></li></ul> \n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7660be0288f5403d50211f4dcd2ceeeb.png\" alt=\"Spring%20Bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%200e4b70a5ffd54a4bb12cc41b2dfe98d6/Untitled%202.png\"></p>\n                </div><div data-report-view=\"{&quot;mod&quot;:&quot;1585297308_001&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/qq_20021569/article/details/109178816&quot;,&quot;extend1&quot;:&quot;pc&quot;,&quot;ab&quot;:&quot;new&quot;}\"><div></div></div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-ba784fbaf8.css\" rel=\"stylesheet\">\n        </div>"
  },
  {
    "category": "spring",
    "qes": "SpringMVC工作原理/执行流程",
    "ans": "<div id=\"cnblogs_post_body\" class=\"blogpost-body\">\n    <p>SpringMVC的工作原理图：</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/249993/201612/249993-20161212142542042-2117679195.jpg\" alt=\"\" width=\"786\" height=\"407\"></p>\n<h3>SpringMVC流程</h3>\n<p align=\"left\"><span style=\"font-size: 14px\">1、&nbsp; 用户发送请求至前端控制器DispatcherServlet。</span></p>\n<p align=\"left\"><span style=\"font-size: 14px\">2、&nbsp; DispatcherServlet收到请求调用HandlerMapping处理器映射器。</span></p>\n<p align=\"left\"><span style=\"font-size: 14px\">3、&nbsp; 处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。</span></p>\n<p align=\"left\"><span style=\"font-size: 14px\">4、&nbsp; DispatcherServlet调用HandlerAdapter处理器适配器。</span></p>\n<p align=\"left\"><span style=\"font-size: 14px\">5、&nbsp; HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。</span></p>\n<p align=\"left\"><span style=\"font-size: 14px\">6、&nbsp; Controller执行完成返回ModelAndView。</span></p>\n<p align=\"left\"><span style=\"font-size: 14px\">7、&nbsp; HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。</span></p>\n<p align=\"left\"><span style=\"font-size: 14px\">8、&nbsp; DispatcherServlet将ModelAndView传给ViewReslover视图解析器。</span></p>\n<p align=\"left\"><span style=\"font-size: 14px\">9、&nbsp; ViewReslover解析后返回具体View。</span></p>\n<p align=\"left\"><span style=\"font-size: 14px\">10、DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。</span></p>\n<p align=\"left\"><span style=\"font-size: 14px\">11、 DispatcherServlet响应用户。</span></p>\n<h3>组件说明：</h3>\n<p align=\"left\"><span style=\"font-size: 14px\">以下组件通常使用框架提供实现：</span></p>\n<p align=\"left\"><span style=\"font-size: 14px\">DispatcherServlet：作为前端控制器，整个流程控制的中心，控制其它组件执行，统一调度，降低组件之间的耦合性，提高每个组件的扩展性。</span></p>\n<p align=\"left\"><span style=\"font-size: 14px\">HandlerMapping：通过扩展处理器映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</span>&nbsp;</p>\n<p align=\"left\"><span style=\"font-size: 14px\">HandlAdapter：通过扩展处理器适配器，支持更多类型的处理器。</span></p>\n<p align=\"left\"><span style=\"font-size: 14px\">ViewResolver：通过扩展视图解析器，支持更多类型的视图解析，例如：jsp、freemarker、pdf、excel等。</span></p>\n<p><strong><span style=\"color: rgba(255, 0, 0, 1)\">组件：</span></strong><br><strong>1、前端控制器DispatcherServlet（不需要工程师开发）,由框架提供</strong><br>作用：接收请求，响应结果，相当于转发器，中央处理器。有了dispatcherServlet减少了其它组件之间的耦合度。<br>用户请求到达前端控制器，它就相当于mvc模式中的c，dispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet的存在降低了组件之间的耦合性。</p>\n<p><strong>2、处理器映射器HandlerMapping(不需要工程师开发),由框架提供</strong><br>作用：根据请求的url查找Handler<br>HandlerMapping负责根据用户请求找到Handler即处理器，springmvc提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</p>\n<p><strong>3、处理器适配器HandlerAdapter</strong><br>作用：按照特定规则（HandlerAdapter要求的规则）去执行Handler<br>通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</p>\n<p><strong>4、处理器Handler<span style=\"color: rgba(255, 0, 0, 1)\">(需要工程师开发)</span></strong><br><strong><span style=\"color: rgba(255, 0, 0, 1)\">注意：编写Handler时按照HandlerAdapter的要求去做，这样适配器才可以去正确执行Handler</span></strong><br>Handler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。<br>由于Handler涉及到具体的用户业务请求，所以一般情况需要工程师根据业务需求开发Handler。</p>\n<p><strong>5、视图解析器View resolver(不需要工程师开发),由框架提供</strong><br>作用：进行视图解析，根据逻辑视图名解析成真正的视图（view）<br>View Resolver负责将处理结果生成View视图，View Resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。 springmvc框架提供了很多的View视图类型，包括：jstlView、freemarkerView、pdfView等。<br>一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由工程师根据业务需求开发具体的页面。</p>\n<p><strong>6、视图View(需要工程师开发jsp...)</strong><br>View是一个接口，实现类支持不同的View类型（jsp、freemarker、pdf...）</p>\n<p><strong>核心架构的具体流程步骤如下：</strong><br>1、首先用户发送请求——&gt;DispatcherServlet，前端控制器收到请求后自己不进行处理，而是委托给其他的解析器进行处理，作为统一访问点，进行全局的流程控制；<br>2、DispatcherServlet——&gt;HandlerMapping， HandlerMapping 将会把请求映射为HandlerExecutionChain 对象（包含一个Handler 处理器（页面控制器）对象、多个HandlerInterceptor 拦截器）对象，通过这种策略模式，很容易添加新的映射策略；<br>3、DispatcherServlet——&gt;HandlerAdapter，HandlerAdapter 将会把处理器包装为适配器，从而支持多种类型的处理器，即适配器设计模式的应用，从而很容易支持很多类型的处理器；<br>4、HandlerAdapter——&gt;处理器功能处理方法的调用，HandlerAdapter 将会根据适配的结果调用真正的处理器的功能处理方法，完成功能处理；并返回一个ModelAndView 对象（包含模型数据、逻辑视图名）；<br>5、ModelAndView的逻辑视图名——&gt; ViewResolver， ViewResolver 将把逻辑视图名解析为具体的View，通过这种策略模式，很容易更换其他视图技术；<br>6、View——&gt;渲染，View会根据传进来的Model模型数据进行渲染，此处的Model实际是一个Map数据结构，因此很容易支持其他视图技术；<br>7、返回控制权给DispatcherServlet，由DispatcherServlet返回响应给用户，到此一个流程结束。</p>\n<p><span style=\"font-size: 14px\">下边两个组件通常情况下需要开发：</span></p>\n<p><span style=\"font-size: 14px\">Handler：处理器，即后端控制器用controller表示。</span></p>\n<p><span style=\"font-size: 14px\">View：视图，即展示给用户的界面，视图中通常需要标签语言展示模型数据。</span></p>\n<p>&nbsp;</p>\n<p><strong><span style=\"font-size: 14px\">在将SpringMVC之前我们先来看一下什么是MVC模式</span></strong></p>\n<p><span style=\"font-size: 14px\">MVC：MVC是一种设计模式</span></p>\n<p><span style=\"font-size: 14px\">MVC的原理图：</span></p>\n<p><span style=\"font-size: 14px\"><img src=\"https://images2015.cnblogs.com/blog/249993/201702/249993-20170207135959401-404841652.png\" alt=\"\"></span></p>\n<p class=\"15\"><span style=\"font-family: &quot;Microsoft YaHei&quot;\"><strong>分析：</strong></span></p>\n<p class=\"15\"><span style=\"font-family: &quot;Microsoft YaHei&quot;\">M-Model 模型（完成业务逻辑：有javaBean构成，service+dao+entity）</span></p>\n<p class=\"15\"><span style=\"font-family: &quot;Microsoft YaHei&quot;\">V-View 视图（做界面的展示 &nbsp;jsp，html……）</span></p>\n<p class=\"15\"><span style=\"font-family: &quot;Microsoft YaHei&quot;\">C-Controller 控制器（接收请求—&gt;调用模型—&gt;根据结果派发页面）</span></p>\n<p class=\"15\">&nbsp;</p>\n<p><span style=\"font-family: &quot;Microsoft YaHei&quot;\"><strong>springMVC是什么：</strong></span>&nbsp;</p>\n<p><span style=\"font-family: &quot;Microsoft YaHei&quot;\"><strong>　　</strong>springMVC是一个MVC的开源框架，springMVC=struts2+spring，springMVC就相当于是Struts2加上sring的整合，但是这里有一个疑惑就是，springMVC和spring是什么样的关系呢？这个在百度百科上有一个很好的解释：意思是说，springMVC是spring的一个后续产品，其实就是spring在原有基础上，又提供了web应用的MVC模块，可以简单的把springMVC理解为是spring的一个模块（类似AOP，IOC这样的模块），网络上经常会说springMVC和spring无缝集成，其实springMVC就是spring的一个子模块，所以根本不需要同spring进行整合。</span></p>\n<p class=\"15\"><strong><span style=\"font-family: &quot;Microsoft YaHei&quot;\">SpringMVC的原理图：</span></strong></p>\n<p class=\"15\"><strong><span style=\"font-family: &quot;Microsoft YaHei&quot;\"><img src=\"https://images2015.cnblogs.com/blog/249993/201702/249993-20170207140151791-1932120070.png\" alt=\"\"></span></strong></p>\n<p class=\"15\"><strong><span style=\"font-family: &quot;Microsoft YaHei&quot;\">看到这个图大家可能会有很多的疑惑，现在我们来看一下这个图的步骤：（可以对比MVC的原理图进行理解）</span></strong></p>\n<p><span style=\"font-family: &quot;Microsoft YaHei&quot;\">第一步:用户发起请求到前端控制器（DispatcherServlet）</span></p>\n<p><span style=\"font-family: &quot;Microsoft YaHei&quot;\">第二步：前端控制器请求处理器映射器（HandlerMappering）去查找处理器（Handle）：通过xml配置或者注解进行查找</span></p>\n<p><span style=\"font-family: &quot;Microsoft YaHei&quot;\">第三步：找到以后处理器映射器（HandlerMappering）像前端控制器返回执行链（HandlerExecutionChain）</span></p>\n<p><span style=\"font-family: &quot;Microsoft YaHei&quot;\">第四步：前端控制器（DispatcherServlet）调用处理器适配器（HandlerAdapter）去执行处理器（Handler）</span></p>\n<p><span style=\"font-family: &quot;Microsoft YaHei&quot;\">第五步：处理器适配器去执行Handler</span></p>\n<p><span style=\"font-family: &quot;Microsoft YaHei&quot;\">第六步：Handler执行完给处理器适配器返回ModelAndView</span></p>\n<p><span style=\"font-family: &quot;Microsoft YaHei&quot;\">第七步：处理器适配器向前端控制器返回ModelAndView</span></p>\n<p><span style=\"font-family: &quot;Microsoft YaHei&quot;\">第八步：前端控制器请求视图解析器（ViewResolver）去进行视图解析</span></p>\n<p><span style=\"font-family: &quot;Microsoft YaHei&quot;\">第九步：视图解析器像前端控制器返回View</span></p>\n<p><span style=\"font-family: &quot;Microsoft YaHei&quot;\">第十步：前端控制器对视图进行渲染</span></p>\n<p><span style=\"font-family: &quot;Microsoft YaHei&quot;\">第十一步：前端控制器向用户响应结果</span></p>\n<p><strong><span style=\"font-family: &quot;Microsoft YaHei&quot;\">看到这些步骤我相信大家很感觉非常的乱，这是正常的，但是这里主要是要大家理解springMVC中的几个组件：</span></strong></p>\n<p><span style=\"font-family: &quot;Microsoft YaHei&quot;\">前端控制器（DispatcherServlet）：接收请求，响应结果，相当于电脑的CPU。</span></p>\n<p><span style=\"font-family: &quot;Microsoft YaHei&quot;\">处理器映射器（HandlerMapping）：根据URL去查找处理器</span></p>\n<p><span style=\"font-family: &quot;Microsoft YaHei&quot;\">处理器（Handler）：（需要程序员去写代码处理逻辑的）</span></p>\n<p><span style=\"font-family: &quot;Microsoft YaHei&quot;\">处理器适配器（HandlerAdapter）：会把处理器包装成适配器，这样就可以支持多种类型的处理器，类比笔记本的适配器（适配器模式的应用）</span></p>\n<p><span style=\"font-family: &quot;Microsoft YaHei&quot;\">视图解析器（ViewResovler）：进行视图解析，多返回的字符串，进行处理，可以解析成对应的页面</span></p>\n<p>&nbsp;</p>\n</div>"
  },
  {
    "category": "spring",
    "qes": "Spring中用到了哪些设计模式？",
    "ans": "<div class=\"postBody\">\n                \n<div id=\"cnblogs_post_body\" class=\"blogpost-body cnblogs-markdown\">\n    <h1 id=\"谈谈spring中都用到了哪些设计模式？\">谈谈Spring中都用到了哪些设计模式？</h1>\n<p>JDK 中用到了那些设计模式?Spring 中用到了那些设计模式?这两个问题，在面试中比较常见。我在网上搜索了一下关于 Spring 中设计模式的讲解几乎都是千篇一律，而且大部分都年代久远。所以，花了几天时间自己总结了一下，由于我的个人能力有限，文中如有任何错误各位都可以指出。另外，文章篇幅有限，对于设计模式以及一些源码的解读我只是一笔带过，这篇文章的主要目的是回顾一下 Spring 中的常见的设计模式。</p>\n<p>Design Patterns(设计模式) 表示面向对象软件开发中最好的计算机编程实践。 Spring 框架中广泛使用了不同类型的设计模式，下面我们来看看到底有哪些设计模式?</p>\n<h1 id=\"控制反转（ioc）和依赖注入（di\">控制反转（IOC）和依赖注入（DI)</h1>\n<p><strong>IoC(Inversion of Control,控制翻转)</strong> 是Spring 中一个非常非常重要的概念，它不是什么技术，而是一种解耦的设计思想。它的主要目的是借助于“第三方”(即Spring 中的 IOC 容器) 实现具有依赖关系的对象之间的解耦(IOC容易管理对象，你只管使用即可)，从而降低代码之间的耦合度。<strong>IOC 是一个原则，而不是一个模式，以下模式（但不限于）实现了IoC原则。</strong></p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1566782/201905/1566782-20190530140734988-1196782624.webp\" alt=\"\" loading=\"lazy\"></p>\n<p>&#8203;                                                                                     ioc-patterns</p>\n<p><strong>Spring IOC容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件/注解即可，完全不用考虑对象是如何被创建出来的。</strong>IOC 容器负责创建对象，将对象连接在一起，配置这些对象，并从创建中处理这些对象的整个生命周期，直到它们被完全销毁。</p>\n<p>在实际项目中一个 Service 类如果有几百甚至上千个类作为它的底层，我们需要实例化这个 Service，你可能要每次都要搞清这个 Service 所有底层类的构造函数，这可能会把人逼疯。如果利用 IOC 的话，你只需要配置好，然后在需要的地方引用就行了，这大大增加了项目的可维护性且降低了开发难度。关于Spring IOC 的理解，推荐看这一下知乎的一个回答：</p>\n<p>，非常不错。</p>\n<p><strong>控制翻转怎么理解呢?</strong> 举个例子：\"对象a 依赖了对象 b，当对象 a 需要使用 对象 b的时候必须自己去创建。但是当系统引入了 IOC 容器后， 对象a 和对象 b 之前就失去了直接的联系。这个时候，当对象 a 需要使用 对象 b的时候， 我们可以指定 IOC 容器去创建一个对象b注入到对象 a 中\"。 对象 a 获得依赖对象 b 的过程,由主动行为变为了被动行为，控制权反转了，这就是控制反转名字的由来。</p>\n<p><strong>DI（Dependency Inject，依赖注入)，是实现控制反转的一种设计模式，依赖注入就是将实例变量传入到一个对象中去。</strong></p>\n<h2 id=\"工厂设计模式\">工厂设计模式</h2>\n<p>Spring使用工厂模式可以通过 <code>BeanFactory</code> 或 <code>ApplicationContext</code> 创建 bean 对象。</p>\n<p><strong>两者对比：</strong></p>\n<ul>\n<li><code>BeanFactory</code> ：延迟注入(使用到某个 bean 的时候才会注入),相比于<code>BeanFactory</code>来说会占用更少的内存，程序启动速度更快。</li>\n<li><code>ApplicationContext</code> ：容器启动的时候，不管你用没用到，一次性创建所有 bean 。<code>BeanFactory</code> 仅提供了最基本的依赖注入支持，<code>ApplicationContext</code> 扩展了 <code>BeanFactory</code> ,除了有<code>BeanFactory</code>的功能之外还有额外更多功能，所以一般开发人员使用<code>ApplicationContext</code>会更多。</li>\n</ul>\n<p>ApplicationContext的三个实现类：</p>\n<ol>\n<li><code>ClassPathXmlApplication</code>：把上下文文件当成类路径资源。</li>\n<li><code>FileSystemXmlApplication</code>：从文件系统中的 XML 文件载入上下文定义信息。</li>\n<li><code>XmlWebApplicationContext</code>：从Web系统中的XML文件载入上下文定义信息。</li>\n</ol>\n<p>Example:</p>\n<pre><code class=\"language-java hljs\"><span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContext;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.support.FileSystemXmlApplicationContext;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        ApplicationContext context = <span class=\"hljs-keyword\">new</span> FileSystemXmlApplicationContext(\n                <span class=\"hljs-string\">\"C:/work/IOC Containers/springframework.applicationcontext/src/main/resources/bean-factory-config.xml\"</span>);\n\n        HelloApplicationContext obj = (HelloApplicationContext) context.getBean(<span class=\"hljs-string\">\"helloApplicationContext\"</span>);\n        obj.getMsg();\n    }\n}\n</code></pre>\n<h2 id=\"单例设计模式\">单例设计模式</h2>\n<p>在我们的系统中，有一些对象其实我们只需要一个，比如说：线程池、缓存、对话框、注册表、日志对象、充当打印机、显卡等设备驱动程序的对象。事实上，这一类对象只能有一个实例，如果制造出多个实例就可能会导致一些问题的产生，比如：程序的行为异常、资源使用过量、或者不一致性的结果。</p>\n<p><strong>使用单例模式的好处：</strong></p>\n<ul>\n<li>对于频繁使用的对象，可以<strong>省略创建对象所花费的时间</strong>，这对于那些重量级对象而言，是非常可观的一笔系统开销；</li>\n<li>由于new操作的次数减少，因而<strong>对系统内存的使用频率也会降低</strong>，这将减轻GC压力，缩短GC停顿时间。</li>\n</ul>\n<p><strong>Spring中bean的默认作用域就是singleton(单例)的</strong>，除了singleton作用域，Spring中bean还有下面几种作用域：</p>\n<ul>\n<li>prototype : 每次请求都会创建一个新的 bean 实例。</li>\n<li>request : 每一次HTTP请求都会产生一个新的bean，该bean仅在当前HTTP request内有效。</li>\n<li>session : 每一次HTTP请求都会产生一个新的 bean，该bean仅在当前 HTTP session 内有效。</li>\n<li>global-session： 全局session作用域，仅仅在基于portlet的web应用中才有意义，Spring5已经没有了。Portlet是能够生成语义代码(例如：HTML)片段的小型Java Web插件。它们基于portlet容器，可以像servlet一样处理HTTP请求。但是，与 servlet 不同，每个 portlet 都有不同的会话</li>\n</ul>\n<p><strong>Spring实现单例的方式：</strong></p>\n<ul>\n<li>xml:<code>&lt;bean id=\"userService\" class=\"top.snailclimb.UserService\" scope=\"singleton\"/&gt;</code></li>\n<li>注解：<code>@Scope(value = \"singleton\")</code></li>\n</ul>\n<p>Spring通过<code>ConcurrentHashMap</code>实现单例注册表的特殊方式实现单例模式。Spring实现单例的核心代码如下：</p>\n<pre><code class=\"language-java hljs\"><span class=\"hljs-comment\">// 通过 ConcurrentHashMap（线程安全） 实现单例注册表</span>\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> Map&lt;String, Object&gt; singletonObjects = <span class=\"hljs-keyword\">new</span> ConcurrentHashMap&lt;String, Object&gt;(<span class=\"hljs-number\">64</span>);\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">getSingleton</span><span class=\"hljs-params\">(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</span> </span>{\n        Assert.notNull(beanName, <span class=\"hljs-string\">\"'beanName' must not be null\"</span>);\n        <span class=\"hljs-keyword\">synchronized</span> (<span class=\"hljs-keyword\">this</span>.singletonObjects) {\n            <span class=\"hljs-comment\">// 检查缓存中是否存在实例  </span>\n            Object singletonObject = <span class=\"hljs-keyword\">this</span>.singletonObjects.get(beanName);\n            <span class=\"hljs-keyword\">if</span> (singletonObject == <span class=\"hljs-keyword\">null</span>) {\n                <span class=\"hljs-comment\">//...省略了很多代码</span>\n                <span class=\"hljs-keyword\">try</span> {\n                    singletonObject = singletonFactory.getObject();\n                }\n                <span class=\"hljs-comment\">//...省略了很多代码</span>\n                <span class=\"hljs-comment\">// 如果实例对象在不存在，我们注册到单例注册表中。</span>\n                addSingleton(beanName, singletonObject);\n            }\n            <span class=\"hljs-keyword\">return</span> (singletonObject != NULL_OBJECT ? singletonObject : <span class=\"hljs-keyword\">null</span>);\n        }\n    }\n    <span class=\"hljs-comment\">//将对象添加到单例注册表</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addSingleton</span><span class=\"hljs-params\">(String beanName, Object singletonObject)</span> </span>{\n            <span class=\"hljs-keyword\">synchronized</span> (<span class=\"hljs-keyword\">this</span>.singletonObjects) {\n                <span class=\"hljs-keyword\">this</span>.singletonObjects.put(beanName, (singletonObject != <span class=\"hljs-keyword\">null</span> ? singletonObject : NULL_OBJECT));\n\n            }\n        }\n}\n</code></pre>\n<h2 id=\"代理设计模式\">代理设计模式</h2>\n<p>AOP(Aspect-Oriented Programming:面向切面编程)能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。</p>\n<p>Spring AOP就是基于动态代理的，如果要代理的对象实现了某个接口，那么Spring AOP会使用JDK Proxy，去创建代理对象，而对于没有实现接口的对象，Spring AOP会使用Cglib，这时候Spring AOP会使用Cglib生成一个被代理对象的子类来作为代理，如下图所示：</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1566782/201905/1566782-20190530141450383-1926001263.webp\" alt=\"\" loading=\"lazy\"></p>\n<p>当然你也可以使用AspectJ，Spring AOP以及集成了AspectJ，AspectJ应该算得上是Java生态系统中最完整的AOP框架了。</p>\n<p>使用AOP之后我们可以把一些通用的功能抽象出来，在在需要用到的地方直接使用即可，这样大大简化了代码量。我们需要增加新功能时也方便，这样也提高了系统扩展性。日志功能、事务管理等等场景都用到了 AOP 。</p>\n<h3 id=\"spring-aop-和-aspectj-aop-有什么区别\">Spring AOP 和 AspectJ AOP 有什么区别?</h3>\n<p><strong>Spring AOP 属于运行时增强，而 AspectJ 是编译时增强。</strong> Spring AOP <strong>基于代理(Proxying)</strong>，而 AspectJ 基于<strong>字节码操作(Bytecode Manipulation)</strong>。</p>\n<p>Spring AOP 已经集成了 AspectJ ，AspectJ 应该算的上是 Java 生态系统中最完整的 AOP 框架了。AspectJ 相比于 Spring AOP 功能更加强大，但是 Spring AOP 相对来说更简单，功能更弱。</p>\n<p>如果我们的切面比较少，那么两者性能差异不大。但是，当切面太多的话，最好选择 AspectJ ，它比Spring AOP 快很多。</p>\n<h1 id=\"模板方法\">模板方法</h1>\n<p>模板方法模式是一种行为设计模式，它定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。 模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤的实现方式。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1566782/201905/1566782-20190530140834820-1364169298.webp\" alt=\"\" loading=\"lazy\"></p>\n<pre><code class=\"language-java hljs\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Template</span> </span>{\n    <span class=\"hljs-comment\">//这是我们的模板方法</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">TemplateMethod</span><span class=\"hljs-params\">()</span></span>{\n        PrimitiveOperation1();  \n        PrimitiveOperation2();\n        PrimitiveOperation3();\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span>  <span class=\"hljs-title\">PrimitiveOperation1</span><span class=\"hljs-params\">()</span></span>{\n        <span class=\"hljs-comment\">//当前类实现</span>\n    }\n\n    <span class=\"hljs-comment\">//被子类实现的方法</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrimitiveOperation2</span><span class=\"hljs-params\">()</span></span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrimitiveOperation3</span><span class=\"hljs-params\">()</span></span>;\n\n}\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TemplateImpl</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Template</span> </span>{\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrimitiveOperation2</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-comment\">//当前类实现</span>\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrimitiveOperation3</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-comment\">//当前类实现</span>\n    }\n}\n</code></pre>\n<p>Spring 中 <code>jdbcTemplate</code>、<code>hibernateTemplate</code> 等<strong>以 Template 结尾的对数据库操作的类</strong>，它们就使用到了模板模式。一般情况下，我们都是使用继承的方式来实现模板模式，但是 Spring 并没有使用这种方式，而是<strong>使用Callback 模式与模板方法模式配合</strong>，既达到了代码复用的效果，同时增加了灵活性。</p>\n<h1 id=\"观察者模式\">观察者模式</h1>\n<p>观察者模式是一种对象行为型模式。它表示的是一种对象与对象之间具有依赖关系，当一个对象发生改变的时候，这个对象所依赖的对象也会做出反应。Spring <strong>事件驱动模型</strong>就是观察者模式很经典的一个应用。Spring 事件驱动模型非常有用，在很多场景都可以解耦我们的代码。比如我们每次添加商品的时候都需要重新更新商品索引，这个时候就可以利用观察者模式来解决这个问题。</p>\n<p>观察者模式是一种对象行为型模式。它表示的是一种对象与对象之间具有依赖关系，当一个对象发生改变的时候，这个对象所依赖的对象也会做出反应。Spring 事件驱动模型就是观察者模式很经典的一个应用。Spring 事件驱动模型非常有用，在很多场景都可以解耦我们的代码。比如我们每次添加商品的时候都需要重新更新商品索引，这个时候就可以利用观察者模式来解决这个问题。</p>\n<h3 id=\"spring-事件驱动模型中的三种角色\">Spring 事件驱动模型中的三种角色</h3>\n<h4 id=\"事件角色\">事件角色</h4>\n<p><code>ApplicationEvent</code> (<code>org.springframework.context</code>包下)充当事件的角色,这是一个抽象类，它继承了<code>java.util.EventObject</code>并实现了 <code>java.io.Serializable</code>接口。</p>\n<p>Spring 中默认存在以下事件，他们都是对 <code>ApplicationContextEvent</code> 的实现(继承自<code>ApplicationContextEvent</code>)：</p>\n<ul>\n<li><code>ContextStartedEvent</code>：<code>ApplicationContext</code> 启动后触发的事件;</li>\n<li><code>ContextStoppedEvent</code>：<code>ApplicationContext</code> 停止后触发的事件;</li>\n<li><code>ContextRefreshedEvent</code>：<code>ApplicationContext</code> 初始化或刷新完成后触发的事件;</li>\n<li><code>ContextClosedEvent</code>：<code>ApplicationContext</code> 关闭后触发的事件。</li>\n</ul>\n<p><img src=\"https://img2018.cnblogs.com/blog/1566782/201905/1566782-20190530140923194-1765560784.webp\" alt=\"\" loading=\"lazy\"></p>\n<h4 id=\"事件监听者角色\">事件监听者角色</h4>\n<p><code>ApplicationListener</code> 充当了事件监听者角色，它是一个接口，里面只定义了一个 <code>onApplicationEvent（）</code>方法来处理<code>ApplicationEvent</code>。<code>ApplicationListener</code>接口类源码如下，可以看出接口定义看出接口中的事件只要实现了 <code>ApplicationEvent</code>就可以了。所以，在 Spring中我们只要实现 <code>ApplicationListener</code> 接口实现 <code>onApplicationEvent()</code> 方法即可完成监听事件</p>\n<pre><code class=\"language-java hljs\"><span class=\"hljs-keyword\">package</span> org.springframework.context;\n<span class=\"hljs-keyword\">import</span> java.util.EventListener;\n<span class=\"hljs-meta\">@FunctionalInterface</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ApplicationListener</span>&lt;<span class=\"hljs-title\">E</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">ApplicationEvent</span>&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">EventListener</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onApplicationEvent</span><span class=\"hljs-params\">(E var1)</span></span>;\n}\n</code></pre>\n<h4 id=\"事件发布者角色\">事件发布者角色</h4>\n<p><code>ApplicationEventPublisher</code> 充当了事件的发布者，它也是一个接口。</p>\n<pre><code class=\"language-java hljs\"><span class=\"hljs-meta\">@FunctionalInterface</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ApplicationEventPublisher</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">publishEvent</span><span class=\"hljs-params\">(ApplicationEvent event)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.publishEvent((Object)event);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">publishEvent</span><span class=\"hljs-params\">(Object var1)</span></span>;\n}\n</code></pre>\n<p><code>ApplicationEventPublisher</code> 接口的<code>publishEvent（）</code>这个方法在<code>AbstractApplicationContext</code>类中被实现，阅读这个方法的实现，你会发现实际上事件真正是通过<code>ApplicationEventMulticaster</code>来广播出去的。具体内容过多，就不在这里分析了，后面可能会单独写一篇文章提到。</p>\n<h3 id=\"spring-的事件流程总结\">Spring 的事件流程总结</h3>\n<ol>\n<li>定义一个事件: 实现一个继承自 <code>ApplicationEvent</code>，并且写相应的构造函数；</li>\n<li>定义一个事件监听者：实现 <code>ApplicationListener</code> 接口，重写 <code>onApplicationEvent()</code> 方法；</li>\n<li>使用事件发布者发布消息: 可以通过 <code>ApplicationEventPublisher</code> 的 <code>publishEvent()</code> 方法发布消息。</li>\n</ol>\n<p>Example:</p>\n<pre><code class=\"language-java hljs\"><span class=\"hljs-comment\">// 定义一个事件,继承自ApplicationEvent并且写相应的构造函数</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DemoEvent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">ApplicationEvent</span></span>{\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> serialVersionUID = <span class=\"hljs-number\">1L</span>;\n\n    <span class=\"hljs-keyword\">private</span> String message;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">DemoEvent</span><span class=\"hljs-params\">(Object source,String message)</span></span>{\n        <span class=\"hljs-keyword\">super</span>(source);\n        <span class=\"hljs-keyword\">this</span>.message = message;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getMessage</span><span class=\"hljs-params\">()</span> </span>{\n         <span class=\"hljs-keyword\">return</span> message;\n          }\n\n\n<span class=\"hljs-comment\">// 定义一个事件监听者,实现ApplicationListener接口，重写 onApplicationEvent() 方法；</span>\n<span class=\"hljs-meta\">@Component</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DemoListener</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">ApplicationListener</span>&lt;<span class=\"hljs-title\">DemoEvent</span>&gt;</span>{\n\n    <span class=\"hljs-comment\">//使用onApplicationEvent接收消息</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onApplicationEvent</span><span class=\"hljs-params\">(DemoEvent event)</span> </span>{\n        String msg = event.getMessage();\n        System.out.println(<span class=\"hljs-string\">\"接收到的信息是：\"</span>+msg);\n    }\n\n}\n<span class=\"hljs-comment\">// 发布事件，可以通过ApplicationEventPublisher  的 publishEvent() 方法发布消息。</span>\n<span class=\"hljs-meta\">@Component</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DemoPublisher</span> </span>{\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    ApplicationContext applicationContext;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">publish</span><span class=\"hljs-params\">(String message)</span></span>{\n        <span class=\"hljs-comment\">//发布事件</span>\n        applicationContext.publishEvent(<span class=\"hljs-keyword\">new</span> DemoEvent(<span class=\"hljs-keyword\">this</span>, message));\n    }\n}\n</code></pre>\n<p>当调用 <code>DemoPublisher</code> 的 <code>publish()</code> 方法的时候，比如 <code>demoPublisher.publish(\"你好\")</code> ，控制台就会打印出:<code>接收到的信息是：你好</code> 。</p>\n<h1 id=\"适配器模式\">适配器模式</h1>\n<p>适配器模式(Adapter Pattern) 将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。</p>\n<h3 id=\"spring-aop中的适配器模式\">spring AOP中的适配器模式</h3>\n<p>我们知道 Spring AOP 的实现是基于代理模式，但是 Spring AOP 的增强或通知(Advice)使用到了适配器模式，与之相关的接口是<code>AdvisorAdapter</code> 。Advice 常用的类型有：<code>BeforeAdvice</code>（目标方法调用前,前置通知）、<code>AfterAdvice</code>（目标方法调用后,后置通知）、<code>AfterReturningAdvice</code>(目标方法执行结束后，return之前)等等。每个类型Advice（通知）都有对应的拦截器:<code>MethodBeforeAdviceInterceptor</code>、<code>AfterReturningAdviceAdapter</code>、<code>AfterReturningAdviceInterceptor</code>。Spring预定义的通知要通过对应的适配器，适配成 <code>MethodInterceptor</code>接口(方法拦截器)类型的对象（如：<code>MethodBeforeAdviceInterceptor</code> 负责适配 <code>MethodBeforeAdvice</code>）。</p>\n<h3 id=\"spring-mvc中的适配器模式\">spring MVC中的适配器模式</h3>\n<p>在Spring MVC中，<code>DispatcherServlet</code> 根据请求信息调用 <code>HandlerMapping</code>，解析请求对应的 <code>Handler</code>。解析到对应的 <code>Handler</code>（也就是我们平常说的 <code>Controller</code> 控制器）后，开始由<code>HandlerAdapter</code> 适配器处理。<code>HandlerAdapter</code> 作为期望接口，具体的适配器实现类用于对目标类进行适配，<code>Controller</code> 作为需要适配的类。</p>\n<p><strong>为什么要在 Spring MVC 中使用适配器模式？</strong> Spring MVC 中的 <code>Controller</code> 种类众多，不同类型的 <code>Controller</code> 通过不同的方法来对请求进行处理。如果不利用适配器模式的话，<code>DispatcherServlet</code> 直接获取对应类型的 <code>Controller</code>，需要的自行来判断，像下面这段代码一样：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">mappedHandler.getHandler() <span class=\"hljs-keyword\">instanceof</span> MultiActionController</span>)</span>{  \n   ((MultiActionController)mappedHandler.getHandler()).xxx  \n}<span class=\"hljs-keyword\">else</span> <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">mappedHandler.getHandler() <span class=\"hljs-keyword\">instanceof</span> XXX</span>)</span>{  \n    ...  \n}<span class=\"hljs-keyword\">else</span> <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">...</span>)</span>{  \n   ...  \n}  \n</code></pre>\n<p>假如我们再增加一个 <code>Controller</code>类型就要在上面代码中再加入一行 判断语句，这种形式就使得程序难以维护，也违反了设计模式中的开闭原则 – 对扩展开放，对修改关闭。</p>\n<h1 id=\"装饰者模式\">装饰者模式</h1>\n<p>装饰者模式可以动态地给对象添加一些额外的属性或行为。相比于使用继承，装饰者模式更加灵活。简单点儿说就是当我们需要修改原有的功能，但我们又不愿直接去修改原有的代码时，设计一个Decorator套在原有代码外面。其实在 JDK 中就有很多地方用到了装饰者模式，比如 <code>InputStream</code>家族，<code>InputStream</code> 类下有 <code>FileInputStream</code> (读取文件)、<code>BufferedInputStream</code> (增加缓存,使读取文件速度大大提升)等子类都在不修改<code>InputStream</code> 代码的情况下扩展了它的功能。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1566782/201905/1566782-20190530141354972-2135982204.webp\" alt=\"\" loading=\"lazy\"><br>\n&#8203;                                                                          装饰者模式示意图</p>\n<p>Spring 中配置 DataSource 的时候，DataSource 可能是不同的数据库和数据源。我们能否根据客户的需求在少修改原有类的代码下动态切换不同的数据源？这个时候就要用到装饰者模式(这一点我自己还没太理解具体原理)。Spring 中用到的包装器模式在类名上含有 <code>Wrapper</code>或者 <code>Decorator</code>。这些类基本上都是动态地给一个对象添加一些额外的职责</p>\n<h2 id=\"总结\">总结</h2>\n<p>Spring 框架中用到了哪些设计模式：</p>\n<ul>\n<li><strong>工厂设计模式</strong> : Spring使用工厂模式通过 <code>BeanFactory</code>、<code>ApplicationContext</code> 创建 bean 对象。</li>\n<li><strong>代理设计模式</strong> : Spring AOP 功能的实现。</li>\n<li><strong>单例设计模式</strong> : Spring 中的 Bean 默认都是单例的。</li>\n<li><strong>模板方法模式</strong> : Spring 中 <code>jdbcTemplate</code>、<code>hibernateTemplate</code> 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式。</li>\n<li><strong>包装器设计模式</strong> : 我们的项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源。</li>\n<li><strong>观察者模式:</strong> Spring 事件驱动模型就是观察者模式很经典的一个应用。</li>\n<li><strong>适配器模式</strong> :Spring AOP 的增强或通知(Advice)使用到了适配器模式、spring MVC 中也是用到了适配器模式适配<code>Controller</code>。</li>\n<li>……</li>\n</ul>\n\n</div>\n<div id=\"MySignature\"></div>\n<div class=\"clear\"></div>\n<div id=\"blog_post_info_block\">\n<div id=\"EntryTag\">\n    标签: \n            <a href=\"https://www.cnblogs.com/kyoner/tag/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/\">设计模式</a></div>\n\n    <div id=\"blog_post_info\">\n<div id=\"green_channel\">\n        <a href=\"javascript:void(0);\" id=\"green_channel_digg\" onclick=\"DiggIt(10949246,cb_blogId,1);green_channel_success(this,'谢谢推荐！');\">好文要顶</a>\n        <a id=\"green_channel_follow\" onclick=\"follow('d994907d-6722-45e4-54a6-08d664f34a3e');\" href=\"javascript:void(0);\">关注我</a>\n    <a id=\"green_channel_favorite\" onclick=\"AddToWz(cb_entryId);return false;\" href=\"javascript:void(0);\">收藏该文</a>\n    <a id=\"green_channel_weibo\" href=\"javascript:void(0);\" title=\"分享至新浪微博\" onclick=\"ShareToTsina()\"><img src=\"https://common.cnblogs.com/images/icon_weibo_24.png\" alt=\"\"></a>\n    <a id=\"green_channel_wechat\" href=\"javascript:void(0);\" title=\"分享至微信\" onclick=\"shareOnWechat()\"><img src=\"https://common.cnblogs.com/images/wechat.png\" alt=\"\"></a>\n</div>\n<div id=\"author_profile\">\n    <div id=\"author_profile_info\" class=\"author_profile_info\">\n            <a href=\"https://home.cnblogs.com/u/kyoner/\" target=\"_blank\"><img src=\"https://pic.cnblogs.com/face/1566782/20190228215012.png\" class=\"author_avatar\" alt=\"\"></a>\n        <div id=\"author_profile_detail\" class=\"author_profile_info\">\n            <a href=\"https://home.cnblogs.com/u/kyoner/\">murphy_gb</a><br>\n            <a href=\"https://home.cnblogs.com/u/kyoner/followees/\">关注 - 2</a><br>\n            <a href=\"https://home.cnblogs.com/u/kyoner/followers/\">粉丝 - 57</a>\n        </div>\n    </div>\n    <div class=\"clear\"></div>\n    <div id=\"author_profile_honor\"></div>\n    <div id=\"author_profile_follow\">\n                <a href=\"javascript:void(0);\" onclick=\"follow('d994907d-6722-45e4-54a6-08d664f34a3e');return false;\">+加关注</a>\n    </div>\n</div>\n<div id=\"div_digg\">\n    <div class=\"diggit\" onclick=\"votePost(10949246,'Digg')\">\n        <span class=\"diggnum\" id=\"digg_count\">9</span>\n    </div>\n    <div class=\"buryit\" onclick=\"votePost(10949246,'Bury')\">\n        <span class=\"burynum\" id=\"bury_count\">0</span>\n    </div>\n    <div class=\"clear\"></div>\n    <div class=\"diggword\" id=\"digg_tips\">\n    </div>\n</div>\n\n<script type=\"text/javascript\">\n    currentDiggType = 0;\n</script></div>\n    <div class=\"clear\"></div>\n    <div id=\"post_next_prev\">\n\n    <a href=\"https://www.cnblogs.com/kyoner/p/10891988.html\" class=\"p_n_p_prefix\">« </a> 上一篇：    <a href=\"https://www.cnblogs.com/kyoner/p/10891988.html\" title=\"发布于 2019-05-20 08:26\">浅谈递归算法</a>\n    <br>\n    <a href=\"https://www.cnblogs.com/kyoner/p/10964181.html\" class=\"p_n_p_prefix\">» </a> 下一篇：    <a href=\"https://www.cnblogs.com/kyoner/p/10964181.html\" title=\"发布于 2019-06-02 20:17\">几种常见的位运算</a>\n\n</div>\n</div>\n            </div>"
  },
  {
    "category": "spring",
    "qes": "Spring事务管理详解",
    "ans": "<div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h2 id=\"事务的基本原理\"><a name=\"t0\"></a><a name=\"t0\"></a>事务的基本原理</h2> \n<p>Spring事务的本质其实就是数据库对事务的支持，使用JDBC的事务管理机制,就是利用java.sql.Connection对象完成对事务的提交，那在没有Spring帮我们管理事务之前，我们要怎么做。</p> \n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs php has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\">Connection conn = DriverManager.getConnection();\n<span class=\"hljs-keyword\">try</span> {  \n    conn.setAutoCommit(<span class=\"hljs-keyword\">false</span>);  <span class=\"hljs-comment\">//将自动提交设置为false                         </span>\n    执行CRUD操作 \n    conn.commit();      <span class=\"hljs-comment\">//当两个操作成功后手动提交  </span>\n} <span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-keyword\">Exception</span> e) {  \n    conn.rollback();    <span class=\"hljs-comment\">//一旦其中一个操作出错都将回滚，所有操作都不成功</span>\n    e.printStackTrace();  \n} <span class=\"hljs-keyword\">finally</span> {\n    conn.colse();\n}<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li></ul></pre> \n<p>事务是一系列的动作，一旦其中有一个动作出现错误，必须全部回滚，系统将事务中对数据库的所有已完成的操作全部撤消，滚回到事务开始的状态，避免出现由于数据不一致而导致的接下来一系列的错误。事务的出现是为了确保数据的完整性和一致性，在目前企业级应用开发中，事务管理是必不可少的。</p> \n<h2 id=\"与事务相关的理论知识\"><a name=\"t1\"></a><a name=\"t1\"></a>与事务相关的理论知识</h2> \n<p>众所周知，事务有四大特性（ACID）</p> \n<p>1.原子性（Atomicity）事务是一个原子操作，由一系列动作组成。事务的原子性确保动作要么全部完成，要么完全不起作用。</p> \n<p>2.一致性（Consistency）事务在完成时，必须是所有的数据都保持一致状态。</p> \n<p>3.隔离性（Isolation）并发事务执行之间无影响，在一个事务内部的操作对其他事务是不产生影响，这需要事务隔离级别来指定隔离性。</p> \n<p>4.持久性（Durability）一旦事务完成，数据库的改变必须是持久化的。</p> \n<p>在企业级应用中，多用户访问数据库是常见的场景，这就是所谓的事务的并发。事务并发所可能存在的问题： <br> 1.脏读：一个事务读到另一个事务未提交的更新数据。 <br> 2.不可重复读：一个事务两次读同一行数据，可是这两次读到的数据不一样。 <br> 3.幻读：一个事务执行两次查询，但第二次查询比第一次查询多出了一些数据行。 <br> 4.丢失更新：撤消一个事务时，把其它事务已提交的更新的数据覆盖了。</p> \n<p>我们可以在java.sql.Connection中看到JDBC定义了五种事务隔离级别来解决这些并发导致的问题：</p> \n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs applescript has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\">/**\n * A <span class=\"hljs-type\">constant</span> indicating <span class=\"hljs-keyword\">that</span> transactions are <span class=\"hljs-keyword\">not</span> supported. \n */\nint TRANSACTION_NONE         = <span class=\"hljs-number\">0</span>;\n\n/**\n * A <span class=\"hljs-type\">constant</span> indicating <span class=\"hljs-keyword\">that</span>\n * dirty reads, non-repeatable reads <span class=\"hljs-keyword\">and</span> phantom reads can occur.\n * This level allows a row changed <span class=\"hljs-keyword\">by</span> one <span class=\"hljs-keyword\">transaction</span> <span class=\"hljs-keyword\">to</span> be <span class=\"hljs-command\">read</span>\n * <span class=\"hljs-keyword\">by</span> another <span class=\"hljs-keyword\">transaction</span> <span class=\"hljs-keyword\">before</span> any changes <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">that</span> row have been\n * committed (a <span class=\"hljs-string\">\"dirty read\"</span>).  If any <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">the</span> changes are rolled <span class=\"hljs-keyword\">back</span>, \n * <span class=\"hljs-keyword\">the</span> <span class=\"hljs-keyword\">second</span> <span class=\"hljs-keyword\">transaction</span> will have retrieved an invalid row.\n */\nint TRANSACTION_READ_UNCOMMITTED = <span class=\"hljs-number\">1</span>;\n\n/**\n * A <span class=\"hljs-type\">constant</span> indicating <span class=\"hljs-keyword\">that</span>\n * dirty reads are prevented; non-repeatable reads <span class=\"hljs-keyword\">and</span> phantom\n * reads can occur.  This level only prohibits a <span class=\"hljs-keyword\">transaction</span>\n * <span class=\"hljs-keyword\">from</span> reading a row <span class=\"hljs-keyword\">with</span> uncommitted changes <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">it</span>.\n */\nint TRANSACTION_READ_COMMITTED   = <span class=\"hljs-number\">2</span>;\n\n/**\n * A <span class=\"hljs-type\">constant</span> indicating <span class=\"hljs-keyword\">that</span>\n * dirty reads <span class=\"hljs-keyword\">and</span> non-repeatable reads are prevented; phantom\n * reads can occur.  This level prohibits a <span class=\"hljs-keyword\">transaction</span> <span class=\"hljs-keyword\">from</span>\n * reading a row <span class=\"hljs-keyword\">with</span> uncommitted changes <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">it</span>, <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">it</span> also\n * prohibits <span class=\"hljs-keyword\">the</span> situation <span class=\"hljs-keyword\">where</span> one <span class=\"hljs-keyword\">transaction</span> reads a row,\n * a <span class=\"hljs-keyword\">second</span> <span class=\"hljs-keyword\">transaction</span> alters <span class=\"hljs-keyword\">the</span> row, <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">the</span> <span class=\"hljs-keyword\">first</span> <span class=\"hljs-keyword\">transaction</span>\n * rereads <span class=\"hljs-keyword\">the</span> row, getting different values <span class=\"hljs-keyword\">the</span> <span class=\"hljs-keyword\">second</span> <span class=\"hljs-property\">time</span>\n * (a <span class=\"hljs-string\">\"non-repeatable read\"</span>).\n */\nint TRANSACTION_REPEATABLE_READ  = <span class=\"hljs-number\">4</span>;\n\n/**\n * A <span class=\"hljs-type\">constant</span> indicating <span class=\"hljs-keyword\">that</span>\n * dirty reads, non-repeatable reads <span class=\"hljs-keyword\">and</span> phantom reads are prevented.\n * This level includes <span class=\"hljs-keyword\">the</span> prohibitions <span class=\"hljs-keyword\">in</span>\n * &lt;code&gt;TRANSACTION_REPEATABLE_READ&lt;/code&gt; <span class=\"hljs-keyword\">and</span> further prohibits <span class=\"hljs-keyword\">the</span> \n * situation <span class=\"hljs-keyword\">where</span> one <span class=\"hljs-keyword\">transaction</span> reads all rows <span class=\"hljs-keyword\">that</span> satisfy\n * a &lt;code&gt;WHERE&lt;/code&gt; condition, a <span class=\"hljs-keyword\">second</span> <span class=\"hljs-keyword\">transaction</span> inserts a row <span class=\"hljs-keyword\">that</span>\n * satisfies <span class=\"hljs-keyword\">that</span> &lt;code&gt;WHERE&lt;/code&gt; condition, <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">the</span> <span class=\"hljs-keyword\">first</span> <span class=\"hljs-keyword\">transaction</span>\n * rereads <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">the</span> same condition, retrieving <span class=\"hljs-keyword\">the</span> additional\n * <span class=\"hljs-string\">\"phantom\"</span> row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">the</span> <span class=\"hljs-keyword\">second</span> <span class=\"hljs-command\">read</span>.\n */\nint TRANSACTION_SERIALIZABLE     = <span class=\"hljs-number\">8</span>;<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li><li style=\"color: rgb(153, 153, 153);\">16</li><li style=\"color: rgb(153, 153, 153);\">17</li><li style=\"color: rgb(153, 153, 153);\">18</li><li style=\"color: rgb(153, 153, 153);\">19</li><li style=\"color: rgb(153, 153, 153);\">20</li><li style=\"color: rgb(153, 153, 153);\">21</li><li style=\"color: rgb(153, 153, 153);\">22</li><li style=\"color: rgb(153, 153, 153);\">23</li><li style=\"color: rgb(153, 153, 153);\">24</li><li style=\"color: rgb(153, 153, 153);\">25</li><li style=\"color: rgb(153, 153, 153);\">26</li><li style=\"color: rgb(153, 153, 153);\">27</li><li style=\"color: rgb(153, 153, 153);\">28</li><li style=\"color: rgb(153, 153, 153);\">29</li><li style=\"color: rgb(153, 153, 153);\">30</li><li style=\"color: rgb(153, 153, 153);\">31</li><li style=\"color: rgb(153, 153, 153);\">32</li><li style=\"color: rgb(153, 153, 153);\">33</li><li style=\"color: rgb(153, 153, 153);\">34</li><li style=\"color: rgb(153, 153, 153);\">35</li><li style=\"color: rgb(153, 153, 153);\">36</li><li style=\"color: rgb(153, 153, 153);\">37</li><li style=\"color: rgb(153, 153, 153);\">38</li><li style=\"color: rgb(153, 153, 153);\">39</li><li style=\"color: rgb(153, 153, 153);\">40</li><li style=\"color: rgb(153, 153, 153);\">41</li><li style=\"color: rgb(153, 153, 153);\">42</li><li style=\"color: rgb(153, 153, 153);\">43</li><li style=\"color: rgb(153, 153, 153);\">44</li><li style=\"color: rgb(153, 153, 153);\">45</li><li style=\"color: rgb(153, 153, 153);\">46</li><li style=\"color: rgb(153, 153, 153);\">47</li></ul></pre> \n<p>翻译过来这几个常量就是 <br> TRANSACTION_NONE JDBC 驱动不支持事务 <br> TRANSACTION_READ_UNCOMMITTED 允许脏读、不可重复读和幻读。 <br> TRANSACTION_READ_COMMITTED 禁止脏读，但允许不可重复读和幻读。 <br> TRANSACTION_REPEATABLE_READ 禁止脏读和不可重复读，单运行幻读。 <br> TRANSACTION_SERIALIZABLE 禁止脏读、不可重复读和幻读。</p> \n<p>隔离级别越高，意味着数据库事务并发执行性能越差，能处理的操作就越少。你可以通过conn.setTransactionLevel去设置你需要的隔离级别。 <br> JDBC规范虽然定义了事务的以上支持行为，但是各个JDBC驱动，数据库厂商对事务的支持程度可能各不相同。 <br> 出于性能的考虑我们一般设置TRANSACTION_READ_COMMITTED就差不多了，剩下的通过使用数据库的锁来帮我们处理别的，关于数据库的锁这个之后再说。</p> \n<p>了解了基本的JDBC事务，那有了Spring，在事务管理上会有什么新的改变呢？ <br> 有了Spring，我们再也无需要去处理获得连接、关闭连接、事务提交和回滚等这些操作，使得我们把更多的精力放在处理业务上。事实上Spring并不直接管理事务，而是提供了多种事务管理器。他们将事务管理的职责委托给Hibernate或者JTA等持久化机制所提供的相关平台框架的事务来实现。</p> \n<h2 id=\"spring事务管理\"><a name=\"t2\"></a><a name=\"t2\"></a>Spring事务管理</h2> \n<p>Spring事务管理的核心接口是PlatformTransactionManager <br> <img src=\"https://img-blog.csdn.net/20170409183016419?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG9uZ2d1YTM2OTQ4NTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"> <br> 事务管理器接口通过getTransaction(TransactionDefinition definition)方法根据指定的传播行为返回当前活动的事务或创建一个新的事务，这个方法里面的参数是TransactionDefinition类，这个类就定义了一些基本的事务属性。 <br> 在TransactionDefinition接口中定义了它自己的传播行为和隔离级别 <br> <img src=\"https://img-blog.csdn.net/20170409183323787?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG9uZ2d1YTM2OTQ4NTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"> <br> 除去常量，主要的方法有：</p> \n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs scss has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\">int <span class=\"hljs-function\">getIsolationLevel()</span>;<span class=\"hljs-comment\">// 返回事务的隔离级别</span>\nString <span class=\"hljs-function\">getName()</span>;<span class=\"hljs-comment\">// 返回事务的名称</span>\nint <span class=\"hljs-function\">getPropagationBehavior()</span>;<span class=\"hljs-comment\">// 返回事务的传播行为</span>\nint <span class=\"hljs-function\">getTimeout()</span>;  <span class=\"hljs-comment\">// 返回事务必须在多少秒内完成</span>\nboolean <span class=\"hljs-function\">isReadOnly()</span>; <span class=\"hljs-comment\">// 事务是否只读，事务管理器能够根据这个返回值进行优化，确保事务是只读的</span><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li></ul></pre> \n<h4 id=\"spring事务的传播属性\">Spring事务的传播属性</h4> \n<p>由上图可知，Spring定义了7个以PROPAGATION_开头的常量表示它的传播属性。</p> \n<div class=\"table-box\"><table><thead><tr><th>名称</th><th>值</th><th>解释</th></tr></thead><tbody><tr><td>PROPAGATION_REQUIRED</td><td>0</td><td>支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择，也是Spring默认的事务的传播。</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>1</td><td>支持当前事务，如果当前没有事务，就以非事务方式执行。</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>2</td><td>支持当前事务，如果当前没有事务，就抛出异常。</td></tr><tr><td>PROPAGATION_REQUIRES_NEW</td><td>3</td><td>新建事务，如果当前存在事务，把当前事务挂起。</td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td>4</td><td>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</td></tr><tr><td>PROPAGATION_NEVER</td><td>5</td><td>以非事务方式执行，如果当前存在事务，则抛出异常。</td></tr><tr><td>PROPAGATION_NESTED</td><td>6</td><td>如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与PROPAGATION_REQUIRED类似的操作。</td></tr></tbody></table></div> \n<h4 id=\"spring事务的隔离级别\">Spring事务的隔离级别</h4> \n<div class=\"table-box\"><table><thead><tr><th>名称</th><th>值</th><th>解释</th></tr></thead><tbody><tr><td>ISOLATION_DEFAULT</td><td>-1</td><td>这是一个PlatfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别。另外四个与JDBC的隔离级别相对应</td></tr><tr><td>ISOLATION_READ_UNCOMMITTED</td><td>1</td><td>这是事务最低的隔离级别，它充许另外一个事务可以看到这个事务未提交的数据。这种隔离级别会产生脏读，不可重复读和幻读。</td></tr><tr><td>ISOLATION_READ_COMMITTED</td><td>2</td><td>保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据。</td></tr><tr><td>ISOLATION_REPEATABLE_READ</td><td>4</td><td>这种事务隔离级别可以防止脏读，不可重复读。但是可能出现幻读。</td></tr><tr><td>ISOLATION_SERIALIZABLE</td><td>8</td><td>这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。除了防止脏读，不可重复读外，还避免了幻读。</td></tr></tbody></table></div> \n<p>调用PlatformTransactionManager接口的getTransaction()的方法得到的是TransactionStatus接口的一个实现 <br> TransactionStatus接口 <br> <img src=\"https://img-blog.csdn.net/20170409183214953?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG9uZ2d1YTM2OTQ4NTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"> <br> 主要的方法有：</p> \n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs java has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\"><span class=\"hljs-keyword\">void</span> flush();<span class=\"hljs-comment\">//如果适用的话，这个方法用于刷新底层会话中的修改到数据库，例如，所有受影响的Hibernate/JPA会话。</span>\n<span class=\"hljs-keyword\">boolean</span> hasSavepoint(); <span class=\"hljs-comment\">// 是否有恢复点</span>\n<span class=\"hljs-keyword\">boolean</span> isCompleted();<span class=\"hljs-comment\">// 是否已完成</span>\n<span class=\"hljs-keyword\">boolean</span> isNewTransaction(); <span class=\"hljs-comment\">// 是否是新的事务</span>\n<span class=\"hljs-keyword\">boolean</span> isRollbackOnly(); <span class=\"hljs-comment\">// 是否为只回滚</span>\n<span class=\"hljs-keyword\">void</span> setRollbackOnly();  <span class=\"hljs-comment\">// 设置为只回滚</span><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li></ul></pre> \n<p>可以看出返回的结果是一些事务的状态，可用来检索事务的状态信息。</p> \n<h3 id=\"配置事务管理器\"><a name=\"t3\"></a><a name=\"t3\"></a>配置事务管理器</h3> \n<p>介绍完Spring事务的管理的流程大概是怎么走的。接下来可以动手试试Spring是如何配置事务管理器的 <br> 例如我在spring-mybatis中配置的:</p> \n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs xml has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\"><span class=\"hljs-comment\">&lt;!-- 配置事务管理器 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">bean</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"transactionManager\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">property</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"dataSource\"</span> <span class=\"hljs-attribute\">ref</span>=<span class=\"hljs-value\">\"dataSource\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">bean</span>&gt;</span><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li></ul></pre> \n<p>这配置不是唯一的，可以根据自己项目选择的数据访问框架灵活配置事务管理器</p> \n<p>配置了事务管理器后，事务当然还是得我们自己去操作，Spring提供了两种事务管理的方式：编程式事务管理和声明式事务管理，让我们分别看看它们是怎么做的吧。</p> \n<h3 id=\"编程式事务管理\"><a name=\"t4\"></a><a name=\"t4\"></a>编程式事务管理</h3> \n<p>编程式事务管理我们可以通过PlatformTransactionManager实现来进行事务管理，同样的Spring也为我们提供了模板类TransactionTemplate进行事务管理，下面主要介绍模板类，我们需要在配置文件中配置</p> \n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs xml has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\">    <span class=\"hljs-comment\">&lt;!--配置事务管理的模板--&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">bean</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"transactionTemplate\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"org.springframework.transaction.support.TransactionTemplate\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">property</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"transactionManager\"</span> <span class=\"hljs-attribute\">ref</span>=<span class=\"hljs-value\">\"transactionManager\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">property</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!--定义事务隔离级别,-1表示使用数据库默认级别--&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">property</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"isolationLevelName\"</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"ISOLATION_DEFAULT\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">property</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">property</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"propagationBehaviorName\"</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"PROPAGATION_REQUIRED\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">property</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">bean</span>&gt;</span><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li></ul></pre> \n<p>TransactionTemplate帮我们封装了许多代码，节省了我们的工作。下面我们写个单元测试来测测。 <br> 为了测试事务回滚，专门建了一张tbl_accont表，用于模拟存钱的一个场景。service层主要代码如下，后面会给出全部代码的github地址，有需要的朋友请移步查看。 <br> BaseSeviceImpl</p> \n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs java has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\">    <span class=\"hljs-comment\">//方便测试直接写的sql</span>\n    <span class=\"hljs-annotation\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span>(String sql, <span class=\"hljs-keyword\">boolean</span> flag) <span class=\"hljs-keyword\">throws</span> Exception {\n        dao.insertSql(sql);\n        <span class=\"hljs-comment\">// 如果flag 为 true ，抛出异常</span>\n        <span class=\"hljs-keyword\">if</span> (flag){\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> Exception(<span class=\"hljs-string\">\"has exception!!!\"</span>);\n        }\n    }\n    <span class=\"hljs-comment\">//获取总金额</span>\n    <span class=\"hljs-annotation\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title\">sum</span>(){\n        <span class=\"hljs-keyword\">return</span> dao.sum();\n    }<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li></ul></pre> \n<p>dao对应的sum方法</p> \n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs vbnet has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\">    &lt;<span class=\"hljs-keyword\">select</span> id=<span class=\"hljs-string\">\"sum\"</span> resultType=<span class=\"hljs-string\">\"java.lang.Integer\"</span>&gt;\n        <span class=\"hljs-keyword\">SELECT</span> SUM(money) <span class=\"hljs-keyword\">FROM</span> tbl_account;\n    &lt;/<span class=\"hljs-keyword\">select</span>&gt;<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li></ul></pre> \n<p>下面看看测试代码</p> \n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs avrasm has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\">package <span class=\"hljs-keyword\">com</span><span class=\"hljs-preprocessor\">.gray</span><span class=\"hljs-comment\">;</span>\n\nimport <span class=\"hljs-keyword\">com</span><span class=\"hljs-preprocessor\">.gray</span><span class=\"hljs-preprocessor\">.service</span><span class=\"hljs-preprocessor\">.BaseSevice</span><span class=\"hljs-comment\">;</span>\nimport org<span class=\"hljs-preprocessor\">.junit</span><span class=\"hljs-preprocessor\">.Test</span><span class=\"hljs-comment\">;</span>\nimport org<span class=\"hljs-preprocessor\">.junit</span><span class=\"hljs-preprocessor\">.runner</span><span class=\"hljs-preprocessor\">.RunWith</span><span class=\"hljs-comment\">;</span>\nimport org<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.beans</span><span class=\"hljs-preprocessor\">.factory</span><span class=\"hljs-preprocessor\">.annotation</span><span class=\"hljs-preprocessor\">.Autowired</span><span class=\"hljs-comment\">;</span>\nimport org<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.test</span><span class=\"hljs-preprocessor\">.context</span><span class=\"hljs-preprocessor\">.ContextConfiguration</span><span class=\"hljs-comment\">;</span>\nimport org<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.test</span><span class=\"hljs-preprocessor\">.context</span><span class=\"hljs-preprocessor\">.junit</span>4<span class=\"hljs-preprocessor\">.SpringJUnit</span>4ClassRunner<span class=\"hljs-comment\">;</span>\nimport org<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.transaction</span><span class=\"hljs-preprocessor\">.TransactionStatus</span><span class=\"hljs-comment\">;</span>\nimport org<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.transaction</span><span class=\"hljs-preprocessor\">.support</span><span class=\"hljs-preprocessor\">.TransactionCallbackWithoutResult</span><span class=\"hljs-comment\">;</span>\nimport org<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.transaction</span><span class=\"hljs-preprocessor\">.support</span><span class=\"hljs-preprocessor\">.TransactionTemplate</span><span class=\"hljs-comment\">;</span>\n\nimport javax<span class=\"hljs-preprocessor\">.annotation</span><span class=\"hljs-preprocessor\">.Resource</span><span class=\"hljs-comment\">;</span>\n\n<span class=\"hljs-comment\">/**\n * Created by gray on 2017/4/8.\n */</span>\n@RunWith(SpringJUnit4ClassRunner<span class=\"hljs-preprocessor\">.class</span>)\n@ContextConfiguration(locations = {<!-- --><span class=\"hljs-string\">\"classpath:spring-test.xml\"</span>})\npublic class TransactionTest{\n    @Resource\n    private TransactionTemplate transactionTemplate<span class=\"hljs-comment\">;</span>\n    @Autowired\n    private BaseSevice baseSevice<span class=\"hljs-comment\">;</span>\n\n    @Test\n    public void transTest() {\n        System<span class=\"hljs-preprocessor\">.out</span><span class=\"hljs-preprocessor\">.println</span>(<span class=\"hljs-string\">\"before transaction\"</span>)<span class=\"hljs-comment\">;</span>\n        Integer sum1 = baseSevice<span class=\"hljs-preprocessor\">.sum</span>()<span class=\"hljs-comment\">;</span>\n        System<span class=\"hljs-preprocessor\">.out</span><span class=\"hljs-preprocessor\">.println</span>(<span class=\"hljs-string\">\"before transaction sum: \"</span>+sum1)<span class=\"hljs-comment\">;</span>\n        System<span class=\"hljs-preprocessor\">.out</span><span class=\"hljs-preprocessor\">.println</span>(<span class=\"hljs-string\">\"transaction....\"</span>)<span class=\"hljs-comment\">;</span>\n        transactionTemplate<span class=\"hljs-preprocessor\">.execute</span>(new TransactionCallbackWithoutResult() {\n            @Override\n            protected void doInTransactionWithoutResult(TransactionStatus status) {\n                try{\n                    baseSevice<span class=\"hljs-preprocessor\">.insert</span>(<span class=\"hljs-string\">\"INSERT INTO tbl_account VALUES (100);\"</span>,false)<span class=\"hljs-comment\">;</span>\n                    baseSevice<span class=\"hljs-preprocessor\">.insert</span>(<span class=\"hljs-string\">\"INSERT INTO tbl_account VALUES (100);\"</span>,false)<span class=\"hljs-comment\">;</span>\n                } catch (Exception e){\n                    //对于抛出Exception类型的异常且需要回滚时,需要捕获异常并通过调用status对象的setRollbackOnly()方法告知事务管理器当前事务需要回滚\n                    status<span class=\"hljs-preprocessor\">.setRollbackOnly</span>()<span class=\"hljs-comment\">;</span>\n                    e<span class=\"hljs-preprocessor\">.printStackTrace</span>()<span class=\"hljs-comment\">;</span>\n                }\n           }\n        })<span class=\"hljs-comment\">;</span>\n        System<span class=\"hljs-preprocessor\">.out</span><span class=\"hljs-preprocessor\">.println</span>(<span class=\"hljs-string\">\"after transaction\"</span>)<span class=\"hljs-comment\">;</span>\n        Integer sum2 = baseSevice<span class=\"hljs-preprocessor\">.sum</span>()<span class=\"hljs-comment\">;</span>\n        System<span class=\"hljs-preprocessor\">.out</span><span class=\"hljs-preprocessor\">.println</span>(<span class=\"hljs-string\">\"after transaction sum: \"</span>+sum2)<span class=\"hljs-comment\">;</span>\n    }\n}<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li><li style=\"color: rgb(153, 153, 153);\">16</li><li style=\"color: rgb(153, 153, 153);\">17</li><li style=\"color: rgb(153, 153, 153);\">18</li><li style=\"color: rgb(153, 153, 153);\">19</li><li style=\"color: rgb(153, 153, 153);\">20</li><li style=\"color: rgb(153, 153, 153);\">21</li><li style=\"color: rgb(153, 153, 153);\">22</li><li style=\"color: rgb(153, 153, 153);\">23</li><li style=\"color: rgb(153, 153, 153);\">24</li><li style=\"color: rgb(153, 153, 153);\">25</li><li style=\"color: rgb(153, 153, 153);\">26</li><li style=\"color: rgb(153, 153, 153);\">27</li><li style=\"color: rgb(153, 153, 153);\">28</li><li style=\"color: rgb(153, 153, 153);\">29</li><li style=\"color: rgb(153, 153, 153);\">30</li><li style=\"color: rgb(153, 153, 153);\">31</li><li style=\"color: rgb(153, 153, 153);\">32</li><li style=\"color: rgb(153, 153, 153);\">33</li><li style=\"color: rgb(153, 153, 153);\">34</li><li style=\"color: rgb(153, 153, 153);\">35</li><li style=\"color: rgb(153, 153, 153);\">36</li><li style=\"color: rgb(153, 153, 153);\">37</li><li style=\"color: rgb(153, 153, 153);\">38</li><li style=\"color: rgb(153, 153, 153);\">39</li><li style=\"color: rgb(153, 153, 153);\">40</li><li style=\"color: rgb(153, 153, 153);\">41</li><li style=\"color: rgb(153, 153, 153);\">42</li><li style=\"color: rgb(153, 153, 153);\">43</li><li style=\"color: rgb(153, 153, 153);\">44</li><li style=\"color: rgb(153, 153, 153);\">45</li><li style=\"color: rgb(153, 153, 153);\">46</li><li style=\"color: rgb(153, 153, 153);\">47</li><li style=\"color: rgb(153, 153, 153);\">48</li><li style=\"color: rgb(153, 153, 153);\">49</li></ul></pre> \n<p>当baseSevice.insert的第二个参数为false时，我们假设插入数据没有出现任何问题，测试结果如图所示： <br> <img src=\"https://img-blog.csdn.net/20170409182049466?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG9uZ2d1YTM2OTQ4NTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"> <br> 当第二个参数为true时，insert会抛出一个异常，这是事务就应该回滚，数据前后不应该有变化，如图所示： <br> <img src=\"https://img-blog.csdn.net/20170409182109188?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG9uZ2d1YTM2OTQ4NTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"></p> \n<h3 id=\"声明式事务管理\"><a name=\"t5\"></a><a name=\"t5\"></a>声明式事务管理</h3> \n<p>声明式事务管理有两种常用的方式，一种是基于tx和aop命名空间的xml配置文件，一种是基于@Transactional注解，随着Spring和Java的版本越来越高，大家越趋向于使用注解的方式，下面我们两个都说。 <br> <strong>1.基于tx和aop命名空间的xml配置文件</strong> <br> 配置文件</p> \n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs xml has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">tx:advice</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"advice\"</span> <span class=\"hljs-attribute\">transaction-manager</span>=<span class=\"hljs-value\">\"transactionManager\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">tx:attributes</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">tx:method</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"insert\"</span> <span class=\"hljs-attribute\">propagation</span>=<span class=\"hljs-value\">\"REQUIRED\"</span> <span class=\"hljs-attribute\">read-only</span>=<span class=\"hljs-value\">\"false\"</span>  <span class=\"hljs-attribute\">rollback-for</span>=<span class=\"hljs-value\">\"Exception\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">tx:attributes</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">tx:advice</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">aop:config</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">aop:pointcut</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"pointCut\"</span> <span class=\"hljs-attribute\">expression</span>=<span class=\"hljs-value\">\"execution (* com.gray.service.*.*(..))\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">aop:advisor</span> <span class=\"hljs-attribute\">advice-ref</span>=<span class=\"hljs-value\">\"advice\"</span> <span class=\"hljs-attribute\">pointcut-ref</span>=<span class=\"hljs-value\">\"pointCut\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">aop:config</span>&gt;</span><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li></ul></pre> \n<p>测试代码</p> \n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs avrasm has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\">    @Test\n    public void transTest() {\n        System<span class=\"hljs-preprocessor\">.out</span><span class=\"hljs-preprocessor\">.println</span>(<span class=\"hljs-string\">\"before transaction\"</span>)<span class=\"hljs-comment\">;</span>\n        Integer sum1 = baseSevice<span class=\"hljs-preprocessor\">.sum</span>()<span class=\"hljs-comment\">;</span>\n        System<span class=\"hljs-preprocessor\">.out</span><span class=\"hljs-preprocessor\">.println</span>(<span class=\"hljs-string\">\"before transaction sum: \"</span>+sum1)<span class=\"hljs-comment\">;</span>\n        System<span class=\"hljs-preprocessor\">.out</span><span class=\"hljs-preprocessor\">.println</span>(<span class=\"hljs-string\">\"transaction....\"</span>)<span class=\"hljs-comment\">;</span>\n        try{\n            baseSevice<span class=\"hljs-preprocessor\">.insert</span>(<span class=\"hljs-string\">\"INSERT INTO tbl_account VALUES (100);\"</span>,true)<span class=\"hljs-comment\">;</span>\n        } catch (Exception e){\n            e<span class=\"hljs-preprocessor\">.printStackTrace</span>()<span class=\"hljs-comment\">;</span>\n        }\n        System<span class=\"hljs-preprocessor\">.out</span><span class=\"hljs-preprocessor\">.println</span>(<span class=\"hljs-string\">\"after transaction\"</span>)<span class=\"hljs-comment\">;</span>\n        Integer sum2 = baseSevice<span class=\"hljs-preprocessor\">.sum</span>()<span class=\"hljs-comment\">;</span>\n        System<span class=\"hljs-preprocessor\">.out</span><span class=\"hljs-preprocessor\">.println</span>(<span class=\"hljs-string\">\"after transaction sum: \"</span>+sum2)<span class=\"hljs-comment\">;</span>\n    }<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li></ul></pre> \n<p>事务正常执行结果截图 <br> <img src=\"https://img-blog.csdn.net/20170409220652002?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG9uZ2d1YTM2OTQ4NTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"> <br> 事务出现异常结果截图 <br> <img src=\"https://img-blog.csdn.net/20170409220443932?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG9uZ2d1YTM2OTQ4NTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"> <br> <strong>2.基于@Transactional注解</strong> <br> 这种方式最简单，也是最为常用的，只需要在配置文件中开启对注解事务管理的支持。</p> \n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs xml has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\">    <span class=\"hljs-comment\">&lt;!-- 声明式事务管理 配置事物的注解方式注入--&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">tx:annotation-driven</span> <span class=\"hljs-attribute\">transaction-manager</span>=<span class=\"hljs-value\">\"transactionManager\"</span>/&gt;</span><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li></ul></pre> \n<p>然后在需要事务管理的地方加上@Transactional注解，如：</p> \n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs java has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\">    <span class=\"hljs-annotation\">@Transactional</span>(rollbackFor=Exception.class)\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span>(String sql, <span class=\"hljs-keyword\">boolean</span> flag) <span class=\"hljs-keyword\">throws</span> Exception {\n        dao.insertSql(sql);\n        <span class=\"hljs-comment\">// 如果flag 为 true ，抛出异常</span>\n        <span class=\"hljs-keyword\">if</span> (flag){\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> Exception(<span class=\"hljs-string\">\"has exception!!!\"</span>);\n        }\n    }<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li></ul></pre> \n<p>rollbackFor属性指定出现Exception异常的时候回滚，遇到检查性的异常需要回滚，默认情况下非检查性异常，包括error也会自动回滚。 <br> 测试代码和上面那个一样 <br> 事务正常执行结果截图 <br> <img src=\"https://img-blog.csdn.net/20170409212212453?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG9uZ2d1YTM2OTQ4NTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"> <br> 事务出现异常结果截图 <br> <img src=\"https://img-blog.csdn.net/20170409212243532?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG9uZ2d1YTM2OTQ4NTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"> <br> 以上就是对Spring事务进行了详细的分析和代码示例。 <br> 最后是测试代码<a href=\"https://github.com/HuangJunXiong/Spring-SpringMVC-MyBatis-Maven\">Spring事务测试</a></p>\n                </div><div><div></div></div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-ba784fbaf8.css\" rel=\"stylesheet\">\n        </div>"
  },
  {
    "category": "spring",
    "qes": "spring的4种事务特性，5种隔离级别，7种传播行为",
    "ans": "<div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <p><strong>spring事务：</strong><br> 什么是事务:<br> 事务逻辑上的一组操作,组成这组操作的各个逻辑单元,要么一起成功,要么一起失败.</p> \n<p><strong>事务特性（4种）:</strong><br> 原子性 （atomicity）:强调事务的不可分割.<br> 一致性 （consistency）:事务的执行的前后数据的完整性保持一致.<br> 隔离性 （isolation）:一个事务执行的过程中,不应该受到其他事务的干扰<br> 持久性（durability） :事务一旦结束,数据就持久到数据库</p> \n<p><strong>如果不考虑隔离性引发安全性问题:</strong><br> 脏读 :一个事务读到了另一个事务的未提交的数据<br> 不可重复读 :一个事务读到了另一个事务已经提交的 update 的数据导致多次查询结果不一致.<br> 虚幻读 :一个事务读到了另一个事务已经提交的 insert 的数据导致多次查询结果不一致.</p> \n<p><strong>解决读问题: 设置事务隔离级别（5种）</strong><br> DEFAULT 这是一个PlatfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别.<br> 未提交读（read uncommited） :脏读，不可重复读，虚读都有可能发生<br> 已提交读 （read commited）:避免脏读。但是不可重复读和虚读有可能发生<br> 可重复读 （repeatable read） :避免脏读和不可重复读.但是虚读有可能发生.<br> 串行化的 （serializable） :避免以上所有读问题.<br> Mysql 默认:可重复读<br> Oracle 默认:读已提交</p> \n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2ltYWdlczIwMTUuY25ibG9ncy5jb20vYmxvZy8xMDUzOTU2LzIwMTcwMy8xMDUzOTU2LTIwMTcwMzEzMTAyNTQ4NzkxLTE1MDYxMTEyNDQucG5n?x-oss-process=image/format,png\" alt=\"这里写图片描述\"><br> read uncommited：是最低的事务隔离级别，它允许另外一个事务可以看到这个事务未提交的数据。<br> read commited：保证一个事物提交后才能被另外一个事务读取。另外一个事务不能读取该事物未提交的数据。<br> repeatable read：这种事务隔离级别可以防止脏读，不可重复读。但是可能会出现幻象读。它除了保证一个事务不能被另外一个事务读取未提交的数据之外还避免了以下情况产生（不可重复读）。<br> serializable：这是花费最高代价但最可靠的事务隔离级别。事务被处理为顺序执行。除了防止脏读，不可重复读之外，还避免了幻象读（避免三种）。</p> \n<p><strong>事务的传播行为</strong><br> PROPAGION_XXX :事务的传播行为</p> \n<ul><li>保证同一个事务中<br> PROPAGATION_REQUIRED 支持当前事务，如果不存在 就新建一个(默认)<br> PROPAGATION_SUPPORTS 支持当前事务，如果不存在，就不使用事务<br> PROPAGATION_MANDATORY 支持当前事务，如果不存在，抛出异常</li><li>保证没有在同一个事务中<br> PROPAGATION_REQUIRES_NEW 如果有事务存在，挂起当前事务，创建一个新的事务<br> PROPAGATION_NOT_SUPPORTED 以非事务方式运行，如果有事务存在，挂起当前事务<br> PROPAGATION_NEVER 以非事务方式运行，如果有事务存在，抛出异常<br> PROPAGATION_NESTED 如果当前事务存在，则嵌套事务执行</li></ul>\n                </div><div><div></div></div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-ba784fbaf8.css\" rel=\"stylesheet\">\n        </div>"
  },
  {
    "category": "spring",
    "qes": "如何使用JPA在数据库中非持久化一个字段",
    "ans": "<div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"htmledit_views\">\n                    <p><span style=\"color:rgb(51,51,51); font-family:Arial; font-size:14px\">当我们使用spring data jpa开发的时候，会将实体类中的成员变量与表中的字段一一对应，当我们在实体类中加上一个不与数据库表一一对应的成员变量的时候，<span style=\"color:rgb(51,51,51); font-family:Monaco; font-size:14px\">此时我们只要在这个成员变量上加上注解</span><span style=\"font-family:Monaco; font-size:14px; color:rgb(255,0,0)\">@Transient</span></span></p> \n<p><span style=\"color:rgb(51,51,51); font-family:Arial; font-size:14px\"><span style=\"font-family:Monaco; font-size:14px; color:rgb(255,0,0)\"><br> </span></span></p> \n<p><span style=\"color:rgb(51,51,51); font-family:Arial; font-size:14px\"><span style=\"font-family:Monaco; font-size:14px; color:rgb(255,0,0)\"></span></span></p>\n<pre><code class=\"language-java hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-meta\">@Transient</span>  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">private</span> String[] typeNames;  </div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<br> \n<br> \n<p></p>\n                </div><div><div></div></div>\n        </div>"
  },
  {
    "category": "spring",
    "qes": "springmvc工作流程",
    "ans": "<div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"htmledit_views\">\n                    <h1><a name=\"t0\"></a>spring工作的流程&nbsp;</h1> \n<p><img alt=\"\" class=\"has\" height=\"556\" src=\"https://img-blog.csdn.net/20180803145042704?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQxOTEyMjA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"882\"></p> \n<p>&nbsp;</p> \n<ol><li>用户发起请求到前端控制器（DispatcherServlet），该控制器会过滤出哪些请求可以访问Servlet、哪些不能访问。就是url-pattern的作用，并且会加载springmvc.xml配置文件。</li><li>前端控制器会找到处理器映射器（HandlerMapping），通过HandlerMapping完成url到controller映射的组件，简单来说，就是将在springmvc.xml中配置的或者注解的url与对应的处理类找到并进行存储，用map&lt;url,handler&gt;这样的方式来存储。</li><li>HandlerMapping有了映射关系，并且找到url对应的处理器，HandlerMapping就会将其处理器（Handler）返回，在返回前，会加上很多拦截器。</li><li>DispatcherServlet拿到Handler后，找到HandlerAdapter（处理器适配器），通过它来访问处理器，并执行处理器。</li><li>执行处理器</li><li>处理器会返回一个ModelAndView对象给HandlerAdapter</li><li>通过HandlerAdapter将ModelAndView对象返回给前端控制器(DispatcherServlet)</li><li>前端控制器请求视图解析器(ViewResolver)去进行视图解析，根据逻辑视图名解析成真正的视图(jsp)，其实就是将ModelAndView对象中存放视图的名称进行查找，找到对应的页面形成视图对象</li><li>返回视图对象到前端控制器。</li><li>视图渲染，就是将ModelAndView对象中的数据放到request域中，用来让页面加载数据的。</li><li>通过第8步，通过名称找到了对应的页面，通过第10步，request域中有了所需要的数据，那么就能够进行视图渲染了。最后将其返回即可。</li></ol>\n                </div><div><div></div></div>\n        </div>"
  },
  {
    "category": "spring",
    "qes": "springboot注入配置文件有哪几种方式",
    "ans": "<div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"htmledit_views\">\n                    <p style=\"text-align:center;\"><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20181107083919823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3psMXpsMnpsMw==,size_16,color_FFFFFF,t_70\"></p> \n<p>&nbsp;</p> \n<h2><a name=\"t0\"></a><a name=\"t0\"></a><span style=\"color:#86ca5e;\">读取application文件</span></h2> \n<hr>\n<p>在application.yml或者properties文件中添加：</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs ini\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attr\">info.address</span>=USA</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attr\">info.company</span>=Spring</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attr\">info.degree</span>=high</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>&nbsp;</p> \n<h2><a name=\"t1\"></a><a name=\"t1\"></a><span style=\"color:#86ca5e;\">@Value注解读取方式</span></h2> \n<hr>\n<pre class=\"has\" name=\"code\"><code class=\"language-java hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Value;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-meta\">@Component</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">InfoConfig1</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-meta\">@Value(\"${info.address}\")</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-keyword\">private</span> String address;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-meta\">@Value(\"${info.company}\")</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-keyword\">private</span> String company;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"13\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-meta\">@Value(\"${info.degree}\")</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"14\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-keyword\">private</span> String degree;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"15\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"16\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getAddress</span><span class=\"hljs-params\">()</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"17\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\">return</span> address;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"18\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"19\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"20\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setAddress</span><span class=\"hljs-params\">(String address)</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"21\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\">this</span>.address = address;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"22\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"23\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"24\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getCompany</span><span class=\"hljs-params\">()</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"25\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\">return</span> company;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"26\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"27\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"28\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setCompany</span><span class=\"hljs-params\">(String company)</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"29\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\">this</span>.company = company;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"30\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"31\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"32\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getDegree</span><span class=\"hljs-params\">()</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"33\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\">return</span> degree;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"34\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"35\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"36\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setDegree</span><span class=\"hljs-params\">(String degree)</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"37\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\">this</span>.degree = degree;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"38\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"39\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"40\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>&nbsp;</p> \n<h2><a name=\"t2\"></a><a name=\"t2\"></a><span style=\"color:#86ca5e;\">@ConfigurationProperties注解读取方式</span></h2> \n<hr>\n<pre class=\"has\" name=\"code\"><code class=\"language-java hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-meta\">@Component</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-meta\">@ConfigurationProperties(prefix = \"info\")</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">InfoConfig2</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-keyword\">private</span> String address;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-keyword\">private</span> String company;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-keyword\">private</span> String degree;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getAddress</span><span class=\"hljs-params\">()</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\">return</span> address;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"13\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setAddress</span><span class=\"hljs-params\">(String address)</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"14\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\">this</span>.address = address;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"15\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"16\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"17\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getCompany</span><span class=\"hljs-params\">()</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"18\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\">return</span> company;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"19\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"20\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"21\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setCompany</span><span class=\"hljs-params\">(String company)</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"22\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\">this</span>.company = company;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"23\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"24\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"25\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getDegree</span><span class=\"hljs-params\">()</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"26\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\">return</span> degree;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"27\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"28\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"29\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setDegree</span><span class=\"hljs-params\">(String degree)</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"30\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\">this</span>.degree = degree;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"31\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"32\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"33\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<h2><a name=\"t3\"></a><a name=\"t3\"></a>&nbsp;</h2> \n<h2><a name=\"t4\"></a><a name=\"t4\"></a><span style=\"color:#86ca5e;\">读取指定文件</span></h2> \n<hr>\n<p>资源目录下建立config/db-config.properties:</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs ini\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attr\">db.username</span>=root</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attr\">db.password</span>=<span class=\"hljs-number\">123456</span></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p><span style=\"color:#e579b6;\">@PropertySource+@Value注解读取方式</span></p> \n<pre class=\"has\" name=\"code\"><code class=\"language-java hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-meta\">@Component</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-meta\">@PropertySource(value = { \"config/db-config.properties\" })</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DBConfig1</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-meta\">@Value(\"${db.username}\")</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-keyword\">private</span> String username;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-meta\">@Value(\"${db.password}\")</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-keyword\">private</span> String password;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getUsername</span><span class=\"hljs-params\">()</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\">return</span> username;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"13\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"14\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"15\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setUsername</span><span class=\"hljs-params\">(String username)</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"16\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\">this</span>.username = username;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"17\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"18\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"19\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getPassword</span><span class=\"hljs-params\">()</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"20\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\">return</span> password;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"21\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"22\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"23\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setPassword</span><span class=\"hljs-params\">(String password)</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"24\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\">this</span>.password = password;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"25\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"26\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"27\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p><span style=\"color:#f33b45;\">注意：@PropertySource不支持yml文件读取。</span></p> \n<p>&nbsp;</p> \n<h3><a name=\"t5\"></a><a name=\"t5\"></a><span style=\"color:#e579b6;\">@PropertySource+@ConfigurationProperties注解读取方式</span></h3> \n<pre class=\"has\" name=\"code\"><code class=\"language-java hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-meta\">@Component</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-meta\">@ConfigurationProperties(prefix = \"db\")</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-meta\">@PropertySource(value = { \"config/db-config.properties\" })</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DBConfig2</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-keyword\">private</span> String username;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-keyword\">private</span> String password;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getUsername</span><span class=\"hljs-params\">()</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\">return</span> username;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"13\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setUsername</span><span class=\"hljs-params\">(String username)</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"14\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\">this</span>.username = username;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"15\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"16\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"17\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getPassword</span><span class=\"hljs-params\">()</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"18\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\">return</span> password;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"19\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"20\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"21\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setPassword</span><span class=\"hljs-params\">(String password)</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"22\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\">this</span>.password = password;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"23\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp;}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"24\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"25\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>&nbsp;</p> \n<h2><a name=\"t6\"></a><a name=\"t6\"></a><span style=\"color:#86ca5e;\">Environment读取方式</span></h2> \n<hr>\n<p>以上所有加载出来的配置都可以通过<span style=\"color:#3399ea;\">Environment</span>注入获取到。</p> \n<pre class=\"has\" name=\"code\"><code class=\"language-java hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-meta\">@Autowired</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">private</span> Environment env;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">// 获取参数</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-function\">String <span class=\"hljs-title\">getProperty</span><span class=\"hljs-params\">(String key)</span></span>;</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<h2><a name=\"t7\"></a><a name=\"t7\"></a>&nbsp;</h2> \n<h2><a name=\"t8\"></a><a name=\"t8\"></a><span style=\"color:#86ca5e;\">总结</span></h2> \n<hr>\n<p>从以上示例来看，Spring Boot可以通过<span style=\"color:#3399ea;\">@PropertySource,@Value,@Environment,@ConfigurationProperties</span>来绑定变量。</p>\n                </div><div><div></div></div>\n        </div>"
  },
  {
    "category": "spring",
    "qes": "Maven生命周期和阶段详解",
    "ans": "<div id=\"arc-body\">在介绍 <a href=\"/maven/\" target=\"_blank\">Maven</a> 之前，项目构建的生命周期概念就已经存在了。软件开发人员每天都要对项目进行清理、编译、测试、打包以及安装部署。<br>\n<br>\n虽然每个软件开发人员都做相关的事情，但公司和公司之间、项目和项目之间，往往目的一样，而实现的形式各种各样。有的项目基于 IDE 工具完成编译、打包和发布，比如 MyEclipse 和 Eclipse <a href=\"/java/\" target=\"_blank\">Java</a> EE；有些是软件开发人员自己编写脚本，对项目进行自定义构件，比如 ant 脚本（当然，ant 脚本本身也是各写各的，都不一样）。<br>\n<br>\n这些都是具有个性化和针对性的，到下一个项目后，又需要改造成新项目所需要的形式。因此就产生了一个问题：感觉是一样的，又不能重用，所以必须重写。<br>\n<br>\n通过学习、分析、反思和总结以前工作中对项目的构建过程，Maven 抽象出了一个适合于所有项目的构建生命周期，并将它们统一规范。<br>\n<br>\n具体步骤包括清理、初始化、编译、测试、打包、集成测试、验证、部署和生成站点。这些步骤几乎适合所有的项目，也就是说，所有项目的管理构建过程都可以对应到这个生命周期上来。<br>\n<br>\n需要注意的是，Maven 中项目的构建生命周期只是 Maven 根据实际情况抽象提炼出来的一个统一标准和规范，是不能做具体事情的。也就是说，Maven 没有提供一个编译器能在编译阶段编译源代码。<br>\n<br>\n既然 Maven 不做具体事情，那具体事情由谁做呢？好的思想、创意，最终都需要在做具体事情的实践中执行才有结果。<br>\n<br>\n所以 Maven 只是规定了生命周期的各个阶段和步骤，具体事情，由集成到 Maven 中的插件完成。比如前面介绍的生成站点，就是由 maven-site-plugin 插件完成的。<br>\n<br>\nMaven 在项目的构建过程中，只是在方向和步骤上面起到了管理和协调的作用。<br>\n<br>\nMaven 在生命周期的每个阶段都设计了插件接口。用户可以在接口上根据项目的实际需要绑定第三方的插件，做该阶段应该完成的任务，从而保证所有 Maven 项目构建过程的标准化。当然，Maven 对大多数构建阶段绑定了默认的插件，通过这样的默认绑定，又简化和稳定了实际项目的构建。<br>\n<h2>\n\t深入生命周期</h2>\n前面介绍了 Maven 生命周期的概念和思路，接下来详细介绍 Maven 生命周期的各个阶段，以及它们的意义和关系。<br>\n<br>\nMaven 拥有三套独立的生命周期，它们分别是 clean、default 和 site。clean 生命周期的目的是清理项目；default 生命周期的目的是构建项目；site 生命周期的目的是建立项目站点。<br>\n<br>\n每个生命周期又包含了多个阶段。这些阶段在执行的时候是有固定顺序的。后面的阶段一定要等前面的阶段执行完成后才能被执行。<br>\n<br>\n比如 clean 生命周期，它就包含 pre-clean、clean 和 post-clean 三个阶段。用户调用 pre-clean 时，只有 pre-clean 阶段被执行；调用 clean 时，先执行 pre-clean，再执行 clean 阶段；同理，当调用 post-clean 时，Maven 自动先执行 pre-clean、再执行 clean，最后执行 post-clean。<br>\n<br>\n下面详细介绍每套生命周期的各个阶段。\n<h4>\n\t1. clean 生命周期</h4>\nclean 生命周期的目的是清理项目，它包括以下三个阶段。\n<ul>\n\t<li>\n\t\tpre-clean：执行清理前需要完成的工作。</li>\n\t<li>\n\t\tclean：清理上一次构建过程中生成的文件，比如编译后的 class 文件等。</li>\n\t<li>\n\t\tpost-clean：执行清理后需要完成的工作。</li>\n</ul>\n<h4>\n\t2. default 生命周期</h4>\ndefault 生命周期定义了构建项目时所需要的执行步骤，它是所有生命周期中最核心部分，包含的阶段如下表所述，比较常用的阶段用粗体标记。<br>\n<br>\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>\n\t\t\t\t名称</th>\n\t\t\t<th>\n\t\t\t\t说明</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\tvalidate</td>\n\t\t\t<td>\n\t\t\t\t验证项目结构是否正常，必要的配置文件是否存在</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\tinitialize</td>\n\t\t\t<td>\n\t\t\t\t做构建前的初始化操作，比如初始化参数、创建必要的目录等</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\tgenerate-sources</td>\n\t\t\t<td>\n\t\t\t\t产生在编译过程中需要的源代码</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\tprocess-sources</td>\n\t\t\t<td>\n\t\t\t\t处理源代码，比如过滤值</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t<strong>generate-resources</strong></td>\n\t\t\t<td>\n\t\t\t\t产生主代码中的资源在 classpath 中的包</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t<strong>process-resources</strong></td>\n\t\t\t<td>\n\t\t\t\t将资源文件复制到 classpath 的对应包中</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t<strong>compile</strong></td>\n\t\t\t<td>\n\t\t\t\t编译项目中的源代码</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\tprocess-classes</td>\n\t\t\t<td>\n\t\t\t\t产生编译过程中生成的文件</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\tgenerate-test-sources</td>\n\t\t\t<td>\n\t\t\t\t产生编译过程中测试相关的代码</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\tprocess-test-sources</td>\n\t\t\t<td>\n\t\t\t\t处理测试代码</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t<strong>generate-test-resources</strong></td>\n\t\t\t<td>\n\t\t\t\t产生测试中资源在 classpath 中的包</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t<strong>process-test-resources</strong></td>\n\t\t\t<td>\n\t\t\t\t将测试资源复制到 classpath 中</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t<strong>test-compile</strong></td>\n\t\t\t<td>\n\t\t\t\t编译测试代码</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\tprocess-test-classes</td>\n\t\t\t<td>\n\t\t\t\t产生编译测试代码过程的文件</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t<strong>test</strong></td>\n\t\t\t<td>\n\t\t\t\t运行测试案例</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\tprepare-package</td>\n\t\t\t<td>\n\t\t\t\t处理打包前需要初始化的准备工作</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\tpackage</td>\n\t\t\t<td>\n\t\t\t\t将编译后的 class 和资源打包成压缩文件，比如 rar</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\tpre-integration-test</td>\n\t\t\t<td>\n\t\t\t\t做好集成测试前的准备工作，比如集成环境的参数设置</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\tintegration-test</td>\n\t\t\t<td>\n\t\t\t\t集成测试</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\tpost-integration-test</td>\n\t\t\t<td>\n\t\t\t\t完成集成测试后的收尾工作，比如清理集成环境的值</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\tverify</td>\n\t\t\t<td>\n\t\t\t\t检测测试后的包是否完好</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t<strong>install</strong></td>\n\t\t\t<td>\n\t\t\t\t将打包的组件以构件的形式，安装到本地依赖仓库中，以便共享给本地的其他项目</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t<strong>deploy</strong></td>\n\t\t\t<td>\n\t\t\t\t运行集成和发布环境，将测试后的最终包以构件的方式发布到远程仓库中，方便所有程序员共享</td>\n\t\t</tr>\n\t</tbody>\n</table>\n这些阶段的详细介绍内容可以参考链接：<br>\n<a href=\"http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html\" target=\"_blank\">http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html</a><br>\n<h4>\n\t3. site 生命周期</h4>\nsite 生命周期的目的是建立和发布项目站点。Maven 可以基于 pom 所描述的信息自动生成项目的站点，同时还可以根据需要生成相关的报告文档集成在站点中，方便团队交流和发布项目信息。site 生命周期包括如下阶段。\n<ul>\n\t<li>\n\t\tpre-site：执行生成站点前的准备工作。</li>\n\t<li>\n\t\tsite：生成站点文档。</li>\n\t<li>\n\t\tpost-site：执行生成站点后需要收尾的工作。</li>\n\t<li>\n\t\tsite-deploy：将生成的站点发布到服务器上。</li>\n</ul>\n<h2>\n\t调用生命周期阶段</h2>\n前面介绍了每套生命周期的各个阶段，那怎样通知 Maven 执行生命周期的哪个阶段呢？<br>\n<br>\n有两种方式可以同 Maven 进行交互，一种是用 mvn 命令；另一种是在 M2Eclipse 中，使用对应的 Run As 菜单命令。<br>\n<br>\n其实这两种方式在教程前面都介绍过，前面只是介绍的怎么操作，没有具体理论。接下来分别梳理一下这两种方式。\n<h4>\n\t1. mvn 命令行指定执行周期阶段</h4>\n这种方式都是在 CMD 命令行窗口中执行的，前提条件是要配置好安装的 Maven 环境变量（Path），并且将当前目录切换到 Maven 工程目录下。后面每个命令的例子都是基于 MvnSSMDemo.Service.Impl 工程进行的，它的当前目录是 E:\\temp\\demoMaven\\MvnSSMDemo.Service.Impl。<br>\n<br>\n1）mvn clean：调用 clean 生命周期的 clean 阶段，实际执行的是 clean 生命周期中的 pre-clean 和 clean 阶段，如图 1 所示。<br>\n<br>\n<div style=\"text-align: center;\">\n\t<img alt=\"mvn clean提示\" src=\"/uploads/allimg/190808/5-1ZPQ5555X41.png\"><br>\n\t图 1&nbsp;&nbsp;mvn clean提示</div>\n<br>\n2）mvn test：该命令调用 default 生命周期中的 test 阶段。实际执行的阶段包括 validate、initialize、generate-sources…compile…test-compile、process-test-classes、test，也就是把 default 生命周期中从开始到 test 的所有阶段都执行完了，而且是按顺序执行。最后运行效果如图 2 所示。<br>\n<br>\n<div style=\"text-align: center;\">\n\t<img alt=\"mvn test提示\" src=\"/uploads/allimg/190808/5-1ZPQ60140536.png\"><br>\n\t图 2&nbsp;&nbsp;mvn test提示</div>\n<br>\n3）mvn clean install：该命令调用 clean 生命周期的 clean 阶段和 default 生命周期的 install 阶段。<br>\n<br>\n实际执行的是 clean 生命周期中的 pre-clean、clean 两个阶段和 default 生命周期中从开始的 validate 到 install 的所有阶段。<br>\n<br>\n该命令结合了两个生命周期。在实际项目构建中，每执行一个行的构建，先清理以前构建的旧文件是一个好习惯。最后运行效果如图 3 所示。\n<div style=\"text-align: center;\">\n\t<img alt=\"mvn clean install提示\" src=\"/uploads/allimg/190808/5-1ZPQ603454P.PNG\"><br>\n\t图 3&nbsp;&nbsp;mvn clean install提示</div>\n<br>\n4）mvn clean deploy site-deploy：该命令调用 clean 生命周期中的 pre-clean、clean 阶段，default 生命周期中从 validate 到 deploy 的所有阶段，以及 site 生命周期中的 pre-site、site、post-site 和 site-deploy 阶段。<br>\n<br>\n最后的结果是把该项目编译、测试、打包好发布到远程仓库，同时还将生成好的站点发布到站点服务器。\n<h4>\n\t2. M2Eclipse 指定执行周期阶段</h4>\n在 MyEclipse 中，基于 M2Eclipse 执行生命周期的阶段思路，同前面基于命令操作是一样的。不同的是，M2Eclipse 用图形化界面的形式展现出来了，操作起来比较人性化。具体操作如下。<br>\n<br>\n右击“工程”，选择 Run As 命令，后面就会显示常用的 Maven 执行生命周期阶段的命令，如图 4 所示。<br>\n<br>\n<div style=\"text-align: center;\">\n\t<img alt=\"M2Eclipse的运行选项\" src=\"/uploads/allimg/190808/5-1ZPQ6141R31.png\" style=\"border-width: 1px; border-style: solid;\"><br>\n\t图 4&nbsp;&nbsp;M2Eclipse 的运行选项</div>\n<br>\n其中，Maven clean 等同命令行的 mvn clean。Maven generate-sources 等同命令行的 mvn generate-sources。Maven install 等同命令行的 mvn install。Maven test 等同命令行的 mvn test。除了这些常用的命令可以直接执行外，也可以自定义 Maven 执行菜单命令。<br>\n<br>\n选择 Maven build… 命令，出现如图 5 所示界面。<br>\n<br>\n<div style=\"text-align: center;\">\n\t<img alt=\"执行Maven build…命令后出现配置目标\" src=\"/uploads/allimg/190808/5-1ZPQ64230U7.png\" style=\"border-width: 1px; border-style: solid;\"><br>\n\t图 5&nbsp;&nbsp;执行Maven build…命令后出现配置目标</div>\n<br>\n在 Goals 文本框中输入要执行的阶段名称，如图 5 所示，单击 Run 按钮，同执行 mvn clean deploy site-deploy 的效果一样。而且首次运行完成后，选择 Run As→Maven build 命令，可以选择以前输入过的生命周期阶段重复执行。</div>"
  },
  {
    "category": "spring",
    "qes": "是时候跟NoSuchMethodError说再见了",
    "ans": "<div class=\"Post-RichTextContainer\"><div class=\"RichText ztext Post-RichText\"><h2><b>前序</b></h2><p>在实际项目开发中，经常会遇到程序在没有做任何修改的情况下无法启动了。前两天正在电脑前发呆，突然隔壁的程序媛小王火急火燎的说，涛哥帮忙看一个问题吧？这个问题已经阻塞了一中午了。看到异常信息后，第一反应是这种问题99.9999%的原因是maven依赖包有不兼容的问题。不过用idea的Dependency Analyzer排查时发现根本就不存在有冲突的包。这下发现遇到真问题了。虽然嘴上跟人家说是因为版本冲突导致的，但是心里面还是开始犯嘀咕了。不过最后还是把问题给发现了，同时也证明了当时自己的判断是正确的。</p><h2><b>问题重现与解决</b></h2><p>为了重现当时的问题，在本文中创建了一个mini版本的项目来说明问题的表象，出现启动异常的原因以及解决方法。</p><p>演示项目的整体结构如下图</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-46b7f1ebe7bb025d6b356a3caaefeaac_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1056\" data-rawheight=\"840\" class=\"origin_image zh-lightbox-thumb\" width=\"1056\" data-original=\"https://pic1.zhimg.com/v2-46b7f1ebe7bb025d6b356a3caaefeaac_r.jpg\"/></noscript><img src=\"https://pic1.zhimg.com/80/v2-46b7f1ebe7bb025d6b356a3caaefeaac_720w.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1056\" data-rawheight=\"840\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1056\" data-original=\"https://pic1.zhimg.com/v2-46b7f1ebe7bb025d6b356a3caaefeaac_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-46b7f1ebe7bb025d6b356a3caaefeaac_b.jpg\" data-lazy-status=\"ok\"></figure><p>程序启动时的异常堆栈信息</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-bf6b4be6db8fc543725f3eae78b2a88e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1833\" data-rawheight=\"376\" class=\"origin_image zh-lightbox-thumb\" width=\"1833\" data-original=\"https://pic3.zhimg.com/v2-bf6b4be6db8fc543725f3eae78b2a88e_r.jpg\"/></noscript><img src=\"https://pic3.zhimg.com/80/v2-bf6b4be6db8fc543725f3eae78b2a88e_720w.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1833\" data-rawheight=\"376\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1833\" data-original=\"https://pic3.zhimg.com/v2-bf6b4be6db8fc543725f3eae78b2a88e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-bf6b4be6db8fc543725f3eae78b2a88e_b.jpg\" data-lazy-status=\"ok\"></figure><p>针对以上异常，做一个简单的分析，其中collision为一个Parent，在该pom中引入的spring boot版本为2.1.3.RELEASE，同时该maven工程中又设置了&lt;parent&gt;属性，其中spring-boot的版本为2.0.5.RELEASE。进行初步的debug后发现org.springframework.core.KotlinDetector类里面的isKotlinReflectPresent()方法确实不存在。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-68feefb4ad925b6ebdb8c054fe515cd6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1184\" data-rawheight=\"341\" class=\"origin_image zh-lightbox-thumb\" width=\"1184\" data-original=\"https://pic3.zhimg.com/v2-68feefb4ad925b6ebdb8c054fe515cd6_r.jpg\"/></noscript><img src=\"https://pic3.zhimg.com/80/v2-68feefb4ad925b6ebdb8c054fe515cd6_720w.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1184\" data-rawheight=\"341\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1184\" data-original=\"https://pic3.zhimg.com/v2-68feefb4ad925b6ebdb8c054fe515cd6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-68feefb4ad925b6ebdb8c054fe515cd6_b.jpg\" data-lazy-status=\"ok\"></figure><p>这时再通过spring的doc发现，isKotlinReflectPresent()方法是从spring 5.1版本才引入的。通过依赖分析可以发现在项目中引入的spring-core版本是5.0.9。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1f89d71f38a598dc46ea7596cb6941ca_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1093\" data-rawheight=\"588\" class=\"origin_image zh-lightbox-thumb\" width=\"1093\" data-original=\"https://pic3.zhimg.com/v2-1f89d71f38a598dc46ea7596cb6941ca_r.jpg\"/></noscript><img src=\"https://pic3.zhimg.com/80/v2-1f89d71f38a598dc46ea7596cb6941ca_720w.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1093\" data-rawheight=\"588\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1093\" data-original=\"https://pic3.zhimg.com/v2-1f89d71f38a598dc46ea7596cb6941ca_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-1f89d71f38a598dc46ea7596cb6941ca_b.jpg\" data-lazy-status=\"ok\"></figure><p>这时，我们可以通过引入的spring的版本来反推出spring boot的版本。因为spring boot 2.0.5.RELEASE是基于spring 5.0.9.RELEASE来开发的，spring boot 2.1.3.RELEASE是基于spring 5.1.5.RELEASE来开发的。</p><p>有了上面的初步分析，将上面的spring boot版本进行统一处理后，上面的问题自然就解决了。</p><h2><b>透过现象看本质</b></h2><p>在上一章节中，已经对产生的原因做了初步的分析并把问题解决掉了。针对上面的问题，我们是否可以在做一些深入的分析和总结呢？答案是肯定了。在分析的过程中，笔者还学到了maven的依赖加载相关的知识点，在这里也一并与大家进行分享和实例演示。与大家一起学习和探讨。</p><p>在实际的项目开发中除了会遇到NoSuchMethodError，还会遇到例如ClassNotFoundException，NoClassDefFoundError等问题。一般都会把这些异常归结为依赖版本的冲突或者说版本兼容性问题。</p><p><b>NoSuchMethodError</b></p><p>根据java api文档里面的描述，当类的定义发生了不兼容的改变，程序运行时便会抛出该异常。为了简单化，笔者做了三个更简化的演示程序。其中incompatible项目依赖于third-party-dependency-a项目，third-party-dependency-a项目依赖于third-party-dependency-b的1.1-SNAPSHOT版本。同时在本地的私服里面还存在third-party-dependency-b的1.0-SNAPSHOT版本。</p><p>third-party-dependency-b 1.0-SNAPSHOT版本的接口定义与实现</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">package</span> <span class=\"nn\">com.mc.third.party.dependency.service</span><span class=\"o\">;</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * @author M.C\n</span><span class=\"cm\"> * @description SayFeedBackService\n</span><span class=\"cm\"> * @date 2019-02-28 14:44\n</span><span class=\"cm\"> **/</span>\n<span class=\"kd\">public</span> <span class=\"kd\">interface</span> <span class=\"nc\">SayFeedBackService</span> <span class=\"o\">{</span>\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * sayFeedBackForChinese\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">sayFeedBackForChinese</span><span class=\"o\">();</span>\n\n<span class=\"o\">}</span></code></pre></div><p>接口的具体实现</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.mc.third.party.dependency.service.impl;\n\nimport com.mc.third.party.dependency.service.SayFeedBackService;\nimport lombok.extern.slf4j.Slf4j;\n\n/**\n * @author M.C\n * @description SayFeedBackServiceImpl\n * @date 2019-02-28 14:45\n **/\n@Slf4j\npublic class SayFeedBackServiceImpl implements SayFeedBackService {\n\n    /**\n     * sayFeedBackForChinese\n     */\n    @Override\n    public String sayFeedBackForChinese() {\n         log.info(\"你好！我来自中国。\");\n         return \"你好！我来自中国。\";\n    }\n    \n}\n</code></pre></div><p>third-party-dependency-b 1.1-SNAPSHOT版本的接口定义与实现</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.mc.third.party.dependency.service;\n\n/**\n * @author M.C\n * @description SayFeedBackService\n * @date 2019-02-28 14:44\n **/\npublic interface SayFeedBackService {\n    /**\n     * sayFeedBackForChinese\n     */\n    public String sayFeedBackForChinese();\n\n    /**\n     * sayFeedBackForAmerican\n     */\n    public String sayFeedBackForAmerican();\n}\n</code></pre></div><p>具体实现</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.mc.third.party.dependency.service.impl;\n\nimport com.mc.third.party.dependency.service.SayFeedBackService;\nimport lombok.extern.slf4j.Slf4j;\n\n/**\n * @author M.C\n * @description SayFeedBackServiceImpl\n * @date 2019-02-28 14:45\n **/\n@Slf4j\npublic class SayFeedBackServiceImpl implements SayFeedBackService {\n\n    /**\n     * sayFeedBackForChinese\n     */\n    @Override\n    public String sayFeedBackForChinese() {\n         log.info(\"你好！我来自中国。\");\n         return \"你好！我来自中国。\";\n    }\n\n    /**\n     * sayFeedBackForAmerican\n     */\n    @Override\n    public String sayFeedBackForAmerican() {\n        log.info(\"Hello! I am come from the USA.\");\n        return \"Hello! I am come from the USA.\";\n    }\n}\n</code></pre></div><p>third-party-dependency-a的接口定义与实现</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.mc.third.party.dependency.service;\n\n/**\n * @author M.C\n * @description SayHelloService\n * @date 2019-02-28 14:31\n **/\npublic interface SayHelloService {\n    /**\n     *\n     */\n    public String sayHello(String country);\n}\n</code></pre></div><p>具体的实现类</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.mc.third.party.dependency.service.impl;\n\nimport com.mc.third.party.dependency.service.SayFeedBackService;\nimport com.mc.third.party.dependency.service.SayHelloService;\nimport lombok.extern.slf4j.Slf4j;\n\n/**\n * @author M.C\n * @description SayHelloServiceImpl\n * @date 2019-02-28 14:32\n **/\n@Slf4j\npublic class SayHelloServiceImpl implements SayHelloService {\n\n    SayFeedBackService sayFeedBackService  =  new SayFeedBackServiceImpl();\n    /**\n     * sayHello\n     * @param country\n     */\n    @Override\n    public String  sayHello(String country) {\n        String result=\"\";\n            switch (country){\n                case \"China\":\n                    result = sayFeedBackService.sayFeedBackForChinese();break;\n                case \"US\":\n                    result = sayFeedBackService.sayFeedBackForAmerican();break;\n                    default: log.info(\"功能还未实现\");break;\n            }\n            return result;\n    }\n}\n</code></pre></div><p>incompatible工程为一个调用的客户端</p><div class=\"highlight\"><pre><code class=\"language-text\">package com.mc.incompatible;\n\nimport com.mc.third.party.dependency.service.SayHelloService;\nimport com.mc.third.party.dependency.service.impl.SayHelloServiceImpl;\nimport lombok.extern.slf4j.Slf4j;\n\n/**\n * @author M.C\n * @description Incompatible\n * @date 2019-02-28 16:23\n **/\n@Slf4j\npublic class Incompatible {\n    /**\n     * main\n     * @param args\n     */\n    public static void main(String[] args) {\n        SayHelloService sayHelloService = new SayHelloServiceImpl();\n        log.info(sayHelloService.sayHello(\"China\"));\n        log.info(sayHelloService.sayHello(\"US\"));\n    }\n}\n</code></pre></div><p>正常情况下maven的依赖配置</p><div class=\"highlight\"><pre><code class=\"language-xml\">    <span class=\"nt\">&lt;dependencies&gt;</span>\n        <span class=\"nt\">&lt;dependency&gt;</span>\n            <span class=\"nt\">&lt;groupId&gt;</span>org.projectlombok<span class=\"nt\">&lt;/groupId&gt;</span>\n            <span class=\"nt\">&lt;artifactId&gt;</span>lombok<span class=\"nt\">&lt;/artifactId&gt;</span>\n            <span class=\"nt\">&lt;version&gt;</span>1.18.6<span class=\"nt\">&lt;/version&gt;</span>\n            <span class=\"nt\">&lt;scope&gt;</span>provided<span class=\"nt\">&lt;/scope&gt;</span>\n        <span class=\"nt\">&lt;/dependency&gt;</span>\n        <span class=\"nt\">&lt;dependency&gt;</span>\n            <span class=\"nt\">&lt;groupId&gt;</span>org.slf4j<span class=\"nt\">&lt;/groupId&gt;</span>\n            <span class=\"nt\">&lt;artifactId&gt;</span>slf4j-api<span class=\"nt\">&lt;/artifactId&gt;</span>\n            <span class=\"nt\">&lt;version&gt;</span>1.7.26<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;/dependency&gt;</span>\n        <span class=\"nt\">&lt;dependency&gt;</span>\n            <span class=\"nt\">&lt;groupId&gt;</span>org.slf4j<span class=\"nt\">&lt;/groupId&gt;</span>\n            <span class=\"nt\">&lt;artifactId&gt;</span>slf4j-simple<span class=\"nt\">&lt;/artifactId&gt;</span>\n            <span class=\"nt\">&lt;version&gt;</span>1.7.26<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;/dependency&gt;</span>\n        <span class=\"nt\">&lt;dependency&gt;</span>\n            <span class=\"nt\">&lt;groupId&gt;</span>com.mc<span class=\"nt\">&lt;/groupId&gt;</span>\n            <span class=\"nt\">&lt;artifactId&gt;</span>third-party-dependency-a<span class=\"nt\">&lt;/artifactId&gt;</span>\n            <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;/dependencies&gt;</span></code></pre></div><p>正常时程序执行结果</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-79f6924552824dabf3f614d8aea476fb_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1187\" data-rawheight=\"169\" class=\"origin_image zh-lightbox-thumb\" width=\"1187\" data-original=\"https://pic4.zhimg.com/v2-79f6924552824dabf3f614d8aea476fb_r.jpg\"/></noscript><img src=\"https://pic4.zhimg.com/80/v2-79f6924552824dabf3f614d8aea476fb_720w.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1187\" data-rawheight=\"169\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1187\" data-original=\"https://pic4.zhimg.com/v2-79f6924552824dabf3f614d8aea476fb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-79f6924552824dabf3f614d8aea476fb_b.png\" data-lazy-status=\"ok\"></figure><p>把上面的pom文件做一个修改，比如我们错误的引入了third-party-dependency-b的1.0版本。</p><div class=\"highlight\"><pre><code class=\"language-text\">        &lt;dependency&gt;\n            &lt;groupId&gt;com.mc&lt;/groupId&gt;\n            &lt;artifactId&gt;third-party-dependency-a&lt;/artifactId&gt;\n            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.mc&lt;/groupId&gt;\n            &lt;artifactId&gt;third-party-dependency-b&lt;/artifactId&gt;\n            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n        &lt;/dependency&gt;</code></pre></div><p>再次执行上面的程序，就会发现出现异常了。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d64c9e9c493a9d453403e0380bf4f05e_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1627\" data-rawheight=\"183\" class=\"origin_image zh-lightbox-thumb\" width=\"1627\" data-original=\"https://pic3.zhimg.com/v2-d64c9e9c493a9d453403e0380bf4f05e_r.jpg\"/></noscript><img src=\"https://pic3.zhimg.com/80/v2-d64c9e9c493a9d453403e0380bf4f05e_720w.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1627\" data-rawheight=\"183\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1627\" data-original=\"https://pic3.zhimg.com/v2-d64c9e9c493a9d453403e0380bf4f05e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d64c9e9c493a9d453403e0380bf4f05e_b.png\" data-lazy-status=\"ok\"></figure><p>通过日志可以发现，出现的异常信息与之前遇到的问题是如此的惊人相似。因为他们的根本原因都是一样的。客户端通过maven依赖引入了a，然后a通过依赖传递引入了b的1.1版本。同时客户端也直接引入了b的旧版本1.0。但是为什么maven不选择一个较高的依赖版本，反而用的是旧的版本呢。这时候就需要简单了解一下maven的仲裁机制。</p><ul><li>优先按照依赖管理<b>&lt;</b>dependencyManagement<b>&gt;</b>元素中指定的版本声明进行仲裁，此时下面的两个原则都无效了</li><li>若无版本声明，则按照“短路径优先”的原则（Maven2.0）进行仲裁，即选择依赖树中路径最短的版本</li><li>若路径长度一致，则按照“第一声明优先”的原则进行仲裁，即选择POM中最先声明的版本</li></ul><p>有了上面的仲裁机制，就能知道为什么在客户端运行的时候，会出现异常了。首先在演示项目中没有dependencyManagement，所以进行短路径优先的原则。针对依赖b的路径，一条是app-&gt;a-b  另外一个是app-&gt;b 。</p><p><b>ClassNotFoundException/NoClassDefFoundError </b></p><p>在什么情况下，会出现ClassNotFoundExcetion/NoClassDefFoundError 呢？针对这个问题，先把之前的演示项目做一个改造。</p><div class=\"highlight\"><pre><code class=\"language-text\">        &lt;dependency&gt;\n            &lt;groupId&gt;com.mc&lt;/groupId&gt;\n            &lt;artifactId&gt;third-party-dependency-a&lt;/artifactId&gt;\n            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n            &lt;exclusions&gt;\n                &lt;exclusion&gt;\n                    &lt;groupId&gt;com.mc&lt;/groupId&gt;\n                    &lt;artifactId&gt;third-party-dependency-b&lt;/artifactId&gt;\n                &lt;/exclusion&gt;\n            &lt;/exclusions&gt;\n        &lt;/dependency&gt;</code></pre></div><p>执行客户端程序结果</p><div class=\"highlight\"><pre><code class=\"language-text\">Exception in thread \"main\" java.lang.NoClassDefFoundError: com/mc/third/party/dependency/service/SayFeedBackService\n\tat com.mc.incompatible.Incompatible.main(Incompatible.java:19)\nCaused by: java.lang.ClassNotFoundException: com.mc.third.party.dependency.service.SayFeedBackService\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:381)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:424)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n\t... 1 more</code></pre></div><p>因为在程序运行时需要SayFeedBackService，但是在POM中把该类包含的依赖做了排除处理。导致在运行时没有找到SayFeedBackService。这类典型异常通常是由于，没有在依赖管理中声明版本。还有一个原因是maven仲裁的时候选取了错误版本，而这个版本缺少我们需要的某个class而导致该错误。</p><p>NoClassDefFoundError和ClassNotFoundException都是由于在CLASSPATH下找不到对应的类而引起的，通常是缺少对应的jar包，JVM认为：（1）当应用运行时没有找到对应的引用，则会抛出java.lang.NoClassDefFoundError；（2）当你在代码中显式加载类（使用Class.forName()）时没有找到对应的类，则会抛出java.lang.ClassNotFoundException。开发者经常遇到的情况是：ClassNotFoundException异常引起了ClassNoDefFoundError。</p><h2><b>最佳实践</b></h2><p>对于NoSuchMethodError、NoClassDefFoundError或ClassNotFoundException包冲突问题，通常的做法是用<b>&lt;</b>excludes<b>&gt;</b>排除不需要的版本，但这种做法带来的问题是每次引入带有传递性依赖的Jar包时，都需要一一进行排除，非常麻烦。maven为此提供了集中管理依赖信息的机制，即依赖管理元素<b>&lt;</b>dependencyManagement<b>&gt;</b>，对依赖Jar包进行统一版本管理，一劳永逸。通常的做法是，在parent模块的pom文件中尽可能地声明所有相关依赖Jar包的版本，并在子pom中简单引用该构件即可。</p><p>重新回头看一开始的那个问题，根据最佳实践，最终修改后的pom文件如下。</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.mc&lt;/groupId&gt;\n    &lt;artifactId&gt;collision&lt;/artifactId&gt;\n    &lt;packaging&gt;pom&lt;/packaging&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;modules&gt;\n        &lt;module&gt;collision-service&lt;/module&gt;\n        &lt;module&gt;collision-domain&lt;/module&gt;\n        &lt;module&gt;collision-dao&lt;/module&gt;\n        &lt;module&gt;collision-controller&lt;/module&gt;\n        &lt;module&gt;collision-common&lt;/module&gt;\n    &lt;/modules&gt;\n\n    &lt;properties&gt;\n        &lt;spring.boot.version&gt;2.1.3.RELEASE&lt;/spring.boot.version&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring.boot.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n&lt;/project&gt;</code></pre></div><p class=\"ztext-empty-paragraph\"><br></p><p>子模块的pom定义</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;parent&gt;\n        &lt;artifactId&gt;collision&lt;/artifactId&gt;\n        &lt;groupId&gt;com.mc&lt;/groupId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;/parent&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;artifactId&gt;collision-controller&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.mc&lt;/groupId&gt;\n            &lt;artifactId&gt;collision-service&lt;/artifactId&gt;\n            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n&lt;/project&gt;</code></pre></div><h2><b>后序</b></h2><p>在实际的开发中，一个小小的异常就可以引起这么多的知识点，也是在开始写这篇文字是没有想到的。感觉有时候问题别看着小，但是就怕深入的挖掘。</p></div></div>"
  },
  {
    "category": "spring",
    "qes": "Spring Boot————自动配置原理",
    "ans": "<div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"htmledit_views\">\n                    <h1><a name=\"t0\"></a><a name=\"t0\"></a>引言</h1> \n<p>不论在工作中，亦或是求职面试，Spring Boot已经成为我们必知必会的技能项。除了某些老旧的政府项目或金融项目持有观望态度外，如今的各行各业都在飞速的拥抱这个已经不是很新的Spring启动框架。</p> \n<p>当然，作为Spring Boot的精髓，自动配置原理的工作过程往往只有在“面试”的时候才能用得上，但是如果在工作中你能够深入的理解Spring Boot的自动配置原理，将无往不利。</p> \n<p>Spring Boot的出现，得益于“习惯优于配置”的理念，没有繁琐的配置、难以集成的内容（大多数流行第三方技术都被集成），这是基于Spring 4.x提供的<span style=\"color:#f33b45;\"><strong>按条件配置</strong></span>Bean的能力。</p> \n<h1><a name=\"t1\"></a><a name=\"t1\"></a>Spring Boot的配置文件</h1> \n<p>初识Spring Boot时我们就知道，Spring Boot有一个全局配置文件：application.properties或application.yml。</p> \n<p>我们的各种属性都可以在这个文件中进行配置，最常配置的比如：server.port、logging.level.* 等等，然而我们实际用到的往往只是很少的一部分，那么这些属性是否有据可依呢？答案当然是肯定的，这些属性都可以在官方文档中查找到：</p> \n<p><a href=\"https://docs.spring.io/spring-boot/docs/2.1.0.RELEASE/reference/htmlsingle/#common-application-properties\">https://docs.spring.io/spring-boot/docs/2.1.0.RELEASE/reference/htmlsingle/#common-application-properties</a></p> \n<p><img alt=\"\" class=\"has\" height=\"534\" src=\"https://img-blog.csdnimg.cn/20181107113919249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQ3NDUwNjk=,size_16,color_FFFFFF,t_70\" width=\"1021\"></p> \n<p><em>（所以，话又说回来，找资料还得是官方文档，百度出来一大堆，还是稍显业余了一些）</em></p> \n<p>除了官方文档为我们提供了大量的属性解释，我们也可以使用IDE的相关提示功能，比如IDEA的自动提示，和Eclipse的YEdit插件，都可以很好的对你需要配置的属性进行提示，下图是使用Eclipse的YEdit插件的效果，Eclipse的版本是：STS 4。</p> \n<p><img alt=\"\" class=\"has\" height=\"170\" src=\"https://img-blog.csdnimg.cn/20181107114603751.png\" width=\"378\"></p> \n<p>&nbsp;以上，是Spring Boot的配置文件的大致使用方法，其实都是些题外话。</p> \n<p>那么问题来了：<strong>这些配置是如何在Spring Boot项目中生效的呢？</strong>那么接下来，就需要聚焦本篇博客的主题：自动配置工作原理或者叫实现方式。</p> \n<h1><a name=\"t2\"></a><a name=\"t2\"></a>工作原理剖析</h1> \n<p>Spring Boot关于自动配置的源码在spring-boot-autoconfigure-x.x.x.x.jar中：</p> \n<p><img alt=\"\" class=\"has\" height=\"287\" src=\"https://img-blog.csdnimg.cn/20181107144449611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQ3NDUwNjk=,size_16,color_FFFFFF,t_70\" width=\"307\"></p> \n<p>当然，自动配置原理的相关描述，官方文档貌似是没有提及。不过我们不难猜出，Spring Boot的启动类上有一个@SpringBootApplication注解，这个注解是Spring Boot项目必不可少的注解。那么自动配置原理一定和这个注解有着千丝万缕的联系！</p> \n<h2><a name=\"t3\"></a><a name=\"t3\"></a>@EnableAutoConfiguration</h2> \n<p><img alt=\"\" class=\"has\" height=\"221\" src=\"https://img-blog.csdnimg.cn/20181107115331414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQ3NDUwNjk=,size_16,color_FFFFFF,t_70\" width=\"973\"></p> \n<p>&nbsp;@SpringBootApplication是一个复合注解或派生注解，在@SpringBootApplication中有一个注解@EnableAutoConfiguration，翻译成人话就是<strong>开启自动配置</strong>，其定义如下：</p> \n<p><img alt=\"\" class=\"has\" height=\"162\" src=\"https://img-blog.csdnimg.cn/20181107125035592.png\" width=\"527\"></p> \n<p>&nbsp;而这个注解也是一个派生注解，其中的关键功能由@Import提供，其导入的<strong>AutoConfigurationImportSelector</strong>的selectImports()方法通过<strong>SpringFactoriesLoader.loadFactoryNames()</strong>扫描所有具有<strong>META-INF/spring.factories</strong>的jar包。spring-boot-autoconfigure-x.x.x.x.jar里就有一个这样的spring.factories文件。</p> \n<p>这个spring.factories文件也是一组一组的key=value的形式，其中一个key是EnableAutoConfiguration类的全类名，而它的value是一个xxxxAutoConfiguration的类名的列表，这些类名以逗号分隔，如下图所示：</p> \n<p><img alt=\"\" class=\"has\" height=\"341\" src=\"https://img-blog.csdnimg.cn/20181107130442565.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQ3NDUwNjk=,size_16,color_FFFFFF,t_70\" width=\"1200\"></p> \n<p>这个@EnableAutoConfiguration注解通过@SpringBootApplication被间接的标记在了Spring Boot的启动类上。在SpringApplication.run(...)的内部就会执行selectImports()方法，找到所有JavaConfig自动配置类的全限定名对应的class，然后将所有自动配置类加载到Spring容器中。</p> \n<h2><a name=\"t4\"></a><a name=\"t4\"></a>自动配置生效</h2> \n<p>每一个XxxxAutoConfiguration自动配置类都是在某些条件之下才会生效的，这些条件的限制在Spring Boot中以注解的形式体现，常见的<strong>条件注解</strong>有如下几项：</p> \n<blockquote> \n <p>@ConditionalOnBean：当容器里有指定的bean的条件下。</p> \n <p>@ConditionalOnMissingBean：当容器里不存在指定bean的条件下。</p> \n <p>@ConditionalOnClass：当类路径下有指定类的条件下。</p> \n <p>@ConditionalOnMissingClass：当类路径下不存在指定类的条件下。</p> \n <p>@ConditionalOnProperty：指定的属性是否有指定的值，比如@ConditionalOnProperties(prefix=”xxx.xxx”, value=”enable”, matchIfMissing=true)，代表当xxx.xxx为enable时条件的布尔值为true，如果没有设置的情况下也为true。</p> \n</blockquote> \n<p>以ServletWebServerFactoryAutoConfiguration配置类为例，解释一下全局配置文件中的属性如何生效，比如：server.port=8081，是如何生效的（当然不配置也会有默认值，这个默认值来自于org.apache.catalina.startup.Tomcat）。</p> \n<p><img alt=\"\" class=\"has\" height=\"231\" src=\"https://img-blog.csdnimg.cn/20181107133910432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQ3NDUwNjk=,size_16,color_FFFFFF,t_70\" width=\"894\"></p> \n<p>在ServletWebServerFactoryAutoConfiguration类上，有一个@EnableConfigurationProperties注解：<strong>开启配置属性</strong>，而它后面的参数是一个ServerProperties类，这就是习惯优于配置的最终落地点。</p> \n<p><img alt=\"\" class=\"has\" height=\"273\" src=\"https://img-blog.csdnimg.cn/20181107134400306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQ3NDUwNjk=,size_16,color_FFFFFF,t_70\" width=\"633\"></p> \n<p>在这个类上，我们看到了一个非常熟悉的注解：<strong>@ConfigurationProperties</strong>，它的作用就是从配置文件中绑定属性到对应的bean上，而<strong>@EnableConfigurationProperties</strong>负责导入这个已经绑定了属性的bean到spring容器中（见上面截图）。那么所有其他的和这个类相关的属性都可以在全局配置文件中定义，也就是说，真正“限制”我们可以在全局配置文件中配置哪些属性的类就是这些<strong>XxxxProperties</strong>类，它与配置文件中定义的prefix关键字开头的一组属性是唯一对应的。</p> \n<p>至此，我们大致可以了解。在全局配置的属性如：server.port等，通过@ConfigurationProperties注解，绑定到对应的XxxxProperties配置实体类上封装为一个bean，然后再通过@EnableConfigurationProperties注解导入到Spring容器中。</p> \n<p>而诸多的XxxxAutoConfiguration自动配置类，就是Spring容器的JavaConfig形式，作用就是为Spring 容器导入bean，而所有导入的bean所需要的属性都通过xxxxProperties的bean来获得。</p> \n<p>可能到目前为止还是有所疑惑，但面试的时候，其实远远不需要回答的这么具体，你只需要这样回答：</p> \n<blockquote> \n <p>Spring Boot启动的时候会通过@EnableAutoConfiguration注解找到META-INF/spring.factories配置文件中的所有自动配置类，并对其进行加载，而这些自动配置类都是以AutoConfiguration结尾来命名的，它实际上就是一个JavaConfig形式的Spring容器配置类，它能通过以Properties结尾命名的类中取得在全局配置文件中配置的属性如：server.port，而XxxxProperties类是通过@ConfigurationProperties注解与全局配置文件中对应的属性进行绑定的。</p> \n</blockquote> \n<p>通过一张图标来理解一下这一繁复的流程：</p> \n<p><img alt=\"\" class=\"has\" src=\"https://afoo.me/posts/images/how-spring-boot-autoconfigure-works.png\">&nbsp;图片来自于王福强老师的博客：<a href=\"https://afoo.me/posts/2015-07-09-how-spring-boot-works.html\">https://afoo.me/posts/2015-07-09-how-spring-boot-works.html</a>&nbsp;</p> \n<h1><a name=\"t5\"></a><a name=\"t5\"></a>总结</h1> \n<p>综上是对自动配置原理的讲解。当然，在浏览源码的时候一定要记得不要太过拘泥与代码的实现，而是应该抓住重点脉络。</p> \n<p>一定要记得XxxxProperties类的含义是：封装配置文件中相关属性；XxxxAutoConfiguration类的含义是：自动配置类，目的是给容器中添加组件。</p> \n<p>而其他的主方法启动，则是为了加载这些五花八门的XxxxAutoConfiguration类。</p>\n                </div><div><div></div></div>\n        </div>"
  },
  {
    "category": "spring",
    "qes": "Spring-Boot 加载Bean的几种方式",
    "ans": "<div class=\"_gp-ck\"><section class=\"ouvJEz\"><h1 class=\"_1RuRku\">Spring-Boot 加载Bean的几种方式</h1><div class=\"rEsl9f\"><div class=\"_2mYfmT\"><a class=\"_1qp91i _1OhGeD\" href=\"/u/a76565e2af90\" target=\"_blank\" rel=\"noopener noreferrer\"><img class=\"_13D2Eh\" src=\"https://upload.jianshu.io/users/upload_avatars/5384456/dce19c87-2c36-450c-8ee4-a335b7d60379.jpg?imageMogr2/auto-orient/strip|imageView2/1/w/96/h/96/format/webp\" alt=\"\"></a><div style=\"margin-left: 8px;\"><div class=\"_3U4Smb\"><span class=\"FxYr8x\"><a class=\"_1OhGeD\" href=\"/u/a76565e2af90\" target=\"_blank\" rel=\"noopener noreferrer\">沉寂之舟</a></span><button data-locale=\"zh-CN\" type=\"button\" class=\"_3kba3h _1OyPqC _3Mi9q9 _34692-\"><span>关注</span></button></div><div class=\"s-dsoj\"><span class=\"_3tCVn5\"><i aria-label=\"ic-diamond\" class=\"anticon\"><svg width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\" focusable=\"false\" class=\"\"><use xlink:href=\"#ic-diamond\"></use></svg></i><span>0.177</span></span><time datetime=\"2018-01-23T13:58:04.000Z\">2018.01.23 21:58:04</time><span>字数 755</span><span>阅读 20,443</span></div></div></div></div><article class=\"_2rhmJa\"><hr>\n<p>Spring从3.0之后，就逐步倾向于使用java code config方式来进行bean的配置，在spring-boot中，这种风格就更为明显了。<br>\n在查看spring-boot工程的时候，总想着探究一下spring-boot如何简单的声明一个starter、Enable××，就能额外增加一个强大的功能，spring是如何找到这些具体的实现bean的呢。<br>\n目前，我总结大概有这么几种：</p>\n<ol>\n<li>直接在工程中使用@Configuration注解<br>\n这个就是基本的java code方式，在@SpringBootApplication里面就包含了@ComponentScan，因而会把工程中的@Configuration注解找到，并加以解释。</li>\n<li>通过@Enable××注解里面的@Import注解<br>\n我们在Enable某个功能时，实际上是通过@Import注解加载了另外的配置属性类。<br>\n例如: 如果要给工程加上定时任务的功能，只需要在某个配置文件上加上@EnableScheduling，实际上它是引入了SchedulingConfiguration.class，代码如下：</li>\n</ol>\n<div class=\"_2Uzcx_\"><button class=\"VJbwyy\" type=\"button\" aria-label=\"复制代码\"><i aria-label=\"icon: copy\" class=\"anticon anticon-copy\"><svg viewBox=\"64 64 896 896\" focusable=\"false\" class=\"\" data-icon=\"copy\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\"></path></svg></i></button><pre class=\"line-numbers  language-java\"><code class=\"java  language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SchedulingConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">EnableScheduling</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>\n<p>而SchedulingConfiguration就是一个标准的配置文件了，里面定义了ScheduledAnnotationBeanPostProcessor这个bean。</p>\n<div class=\"_2Uzcx_\"><button class=\"VJbwyy\" type=\"button\" aria-label=\"复制代码\"><i aria-label=\"icon: copy\" class=\"anticon anticon-copy\"><svg viewBox=\"64 64 896 896\" focusable=\"false\" class=\"\" data-icon=\"copy\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\"></path></svg></i></button><pre class=\"line-numbers  language-java\"><code class=\"java  language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@Role</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinition</span><span class=\"token punctuation\">.</span>ROLE_INFRASTRUCTURE<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SchedulingConfiguration</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token class-name\">TaskManagementConfigUtils</span><span class=\"token punctuation\">.</span>SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME<span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Role</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinition</span><span class=\"token punctuation\">.</span>ROLE_INFRASTRUCTURE<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ScheduledAnnotationBeanPostProcessor</span> <span class=\"token function\">scheduledAnnotationProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ScheduledAnnotationBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>\n<p>有了ScheduledAnnotationBeanPostProcessor这bean，就会在context初始化时候，查找我们代码中的@Scheduled，并把它们转换为定时任务。</p>\n<ol start=\"3\">\n<li>通过@EnableAutoConfiguration注解<br>\n添加了这个异常强大的注解，spring-boot会利用AutoConfigurationImportSelector搜索所有jar包中META-INF文件夹中spring.factories，找到其中org.springframework.boot.autoconfigure.EnableAutoConfiguration的属性值，并把它作为需要解析的@Configuration文件。<br>\n例如：spring-cloud-commons里面的spring.factories</li>\n</ol>\n<div class=\"_2Uzcx_\"><button class=\"VJbwyy\" type=\"button\" aria-label=\"复制代码\"><i aria-label=\"icon: copy\" class=\"anticon anticon-copy\"><svg viewBox=\"64 64 896 896\" focusable=\"false\" class=\"\" data-icon=\"copy\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\"></path></svg></i></button><pre class=\"line-numbers  language-java\"><code class=\"java  language-java\"># <span class=\"token class-name\">AutoConfiguration</span>\norg<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span><span class=\"token class-name\">EnableAutoConfiguration</span><span class=\"token operator\">=</span>\\\norg<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span><span class=\"token class-name\">CommonsClientAutoConfiguration</span><span class=\"token punctuation\">,</span>\\\norg<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>discovery<span class=\"token punctuation\">.</span>noop<span class=\"token punctuation\">.</span><span class=\"token class-name\">NoopDiscoveryClientAutoConfiguration</span><span class=\"token punctuation\">,</span>\\\norg<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>hypermedia<span class=\"token punctuation\">.</span><span class=\"token class-name\">CloudHypermediaAutoConfiguration</span><span class=\"token punctuation\">,</span>\\\norg<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>loadbalancer<span class=\"token punctuation\">.</span><span class=\"token class-name\">AsyncLoadBalancerAutoConfiguration</span><span class=\"token punctuation\">,</span>\\\norg<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>loadbalancer<span class=\"token punctuation\">.</span><span class=\"token class-name\">LoadBalancerAutoConfiguration</span><span class=\"token punctuation\">,</span>\\\norg<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>serviceregistry<span class=\"token punctuation\">.</span><span class=\"token class-name\">ServiceRegistryAutoConfiguration</span><span class=\"token punctuation\">,</span>\\\norg<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span><span class=\"token class-name\">UtilAutoConfiguration</span><span class=\"token punctuation\">,</span>\\\norg<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>discovery<span class=\"token punctuation\">.</span>simple<span class=\"token punctuation\">.</span><span class=\"token class-name\">SimpleDiscoveryClientAutoConfiguration</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>\n<ol start=\"4\">\n<li>自己实现ImportSelector<br>\nAutoConfigurationImportSelector显然有时候还是不够用的，这时候就可以自己实现ImportSelector，实现更灵活的加载功能。</li>\n</ol>\n<div class=\"_2Uzcx_\"><button class=\"VJbwyy\" type=\"button\" aria-label=\"复制代码\"><i aria-label=\"icon: copy\" class=\"anticon anticon-copy\"><svg viewBox=\"64 64 896 896\" focusable=\"false\" class=\"\" data-icon=\"copy\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\"></path></svg></i></button><pre class=\"line-numbers  language-java\"><code class=\"java  language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ImportSelector</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">selectImports</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotationMetadata</span> importingClassMetadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></div>\n<p>ImportSelector接口定义了一个selectImports()方法,根据程序里面定义的注解信息，动态返回能被加载的类列表。这个实现就非常灵活了，简单的可以自己判断注解，直接返回类名；复杂的可以自己定制类似AutoConfigurationImportSelector的功能。<br>\n例如：我们看看spring-cloud的@EnableCircuitBreaker</p>\n<div class=\"_2Uzcx_\"><button class=\"VJbwyy\" type=\"button\" aria-label=\"复制代码\"><i aria-label=\"icon: copy\" class=\"anticon anticon-copy\"><svg viewBox=\"64 64 896 896\" focusable=\"false\" class=\"\" data-icon=\"copy\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\"></path></svg></i></button><pre class=\"line-numbers  language-java\"><code class=\"java  language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Inherited</span>\n<span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EnableCircuitBreakerImportSelector</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">EnableCircuitBreaker</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>\n<p>发现，它引入了EnableCircuitBreakerImportSelector，它本身并没有实现ImportSelector，而是其父类SpringFactoryImportSelector实现的。</p>\n<div class=\"_2Uzcx_\"><button class=\"VJbwyy\" type=\"button\" aria-label=\"复制代码\"><i aria-label=\"icon: copy\" class=\"anticon anticon-copy\"><svg viewBox=\"64 64 896 896\" focusable=\"false\" class=\"\" data-icon=\"copy\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\"></path></svg></i></button><pre class=\"line-numbers  language-java\"><code class=\"java  language-java\"><span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">selectImports</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotationMetadata</span> metadata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">AnnotationAttributes</span> attributes <span class=\"token operator\">=</span> <span class=\"token class-name\">AnnotationAttributes</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromMap</span><span class=\"token punctuation\">(</span>\n                metadata<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotationAttributes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>annotationClass<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>attributes<span class=\"token punctuation\">,</span> <span class=\"token string\">\"No \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" attributes found. Is \"</span>\n                <span class=\"token operator\">+</span> metadata<span class=\"token punctuation\">.</span><span class=\"token function\">getClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" annotated with @\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Find all possible auto configuration classes, filtering duplicates</span>\n        <span class=\"token comment\">// 调用SpringFactoriesLoader的loadFactoryNames去加载</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> factories <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringFactoriesLoader</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">loadFactoryNames</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>annotationClass<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanClassLoader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//省略了错误判断和多于一个的log</span>\n\n        <span class=\"token keyword\">return</span> factories<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>factories<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>\n<p>这里，我们看到，实际加载的代码是传入了this.annotationClass，那么对于EnableCircuitBreakerImportSelector来说，就是在spring.factories找它的全类名：<br>\norg.springframework.cloud.client.circuitbreaker.EnableCircuitBreakerImportSelector对应的值。<br>\n最终在spring-cloud-netflix-core-××.jar的pring.factories中找到如下配置</p>\n<div class=\"_2Uzcx_\"><button class=\"VJbwyy\" type=\"button\" aria-label=\"复制代码\"><i aria-label=\"icon: copy\" class=\"anticon anticon-copy\"><svg viewBox=\"64 64 896 896\" focusable=\"false\" class=\"\" data-icon=\"copy\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\"></path></svg></i></button><pre class=\"line-numbers  language-java\"><code class=\"java  language-java\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>circuitbreaker<span class=\"token punctuation\">.</span><span class=\"token class-name\">EnableCircuitBreaker</span><span class=\"token operator\">=</span>\\\norg<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>netflix<span class=\"token punctuation\">.</span>hystrix<span class=\"token punctuation\">.</span><span class=\"token class-name\">HystrixCircuitBreakerConfiguration</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></div>\n<p>这样就完成了通过@EnableCircuitBreaker的注解，最终加载到Hystrix的实现ystrixCircuitBreakerConfiguration，实现了功能定义和具体实现的分离。</p>\n<blockquote>\n<p>参考：</p>\n</blockquote>\n<ul>\n<li>Spring boot Bean加载源码分析 <a href=\"https://link.jianshu.com?t=http%3A%2F%2Fblog.csdn.net%2Fliaokailin%2Farticle%2Fdetails%2F49107209\" target=\"_blank\" rel=\"nofollow\">http://blog.csdn.net/liaokailin/article/details/49107209</a>\n</li>\n<li>Spring boot 自动配置原理分析<br>\n<a href=\"https://link.jianshu.com?t=http%3A%2F%2Fblog.csdn.net%2Fliaokailin%2Farticle%2Fdetails%2F49559951\" target=\"_blank\" rel=\"nofollow\">http://blog.csdn.net/liaokailin/article/details/49559951</a>\n</li>\n<li>Spring Boot 使用Java代码创建Bean并注册到Spring中<br>\n<a href=\"https://link.jianshu.com?t=http%3A%2F%2Fblog.csdn.net%2Fcatoop%2Farticle%2Fdetails%2F50558333\" target=\"_blank\" rel=\"nofollow\">http://blog.csdn.net/catoop/article/details/50558333</a>\n</li>\n</ul>\n</article><div></div><div class=\"_1kCBjS\"><div class=\"_18vaTa\"><div class=\"_3BUZPB\"><div class=\"_2Bo4Th\" role=\"button\" tabindex=\"-1\" aria-label=\"给文章点赞\"><i aria-label=\"ic-like\" class=\"anticon\"><svg width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\" focusable=\"false\" class=\"\"><use xlink:href=\"#ic-like\"></use></svg></i></div><span class=\"_1LOh_5\" role=\"button\" tabindex=\"-1\" aria-label=\"查看点赞列表\">1人点赞<i aria-label=\"icon: right\" class=\"anticon anticon-right\"><svg viewBox=\"64 64 896 896\" focusable=\"false\" class=\"\" data-icon=\"right\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M765.7 486.8L314.9 134.7A7.97 7.97 0 0 0 302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 0 0 0-50.4z\"></path></svg></i></span></div><div class=\"_3BUZPB\"><div class=\"_2Bo4Th\" role=\"button\" tabindex=\"-1\"><i aria-label=\"ic-dislike\" class=\"anticon\"><svg width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\" focusable=\"false\" class=\"\"><use xlink:href=\"#ic-dislike\"></use></svg></i></div></div></div><div class=\"_18vaTa\"><a class=\"_3BUZPB _1x1ok9 _1OhGeD\" href=\"/nb/21520854\" target=\"_blank\" rel=\"noopener noreferrer\"><i aria-label=\"ic-notebook\" class=\"anticon\"><svg width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\" focusable=\"false\" class=\"\"><use xlink:href=\"#ic-notebook\"></use></svg></i><span>Spring-Cloud学习</span></a><div class=\"_3BUZPB ant-dropdown-trigger\"><div class=\"_2Bo4Th\"><i aria-label=\"ic-others\" class=\"anticon\"><svg width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\" focusable=\"false\" class=\"\"><use xlink:href=\"#ic-others\"></use></svg></i></div></div></div></div><div class=\"_19DgIp\" style=\"margin-top:24px;margin-bottom:24px\"></div><div class=\"_13lIbp\"><div class=\"_16AzcO\">更多精彩内容下载简书APP</div><div class=\"_6S_NkV\"><canvas height=\"110\" width=\"110\" style=\"height: 110px; width: 110px;\"></canvas></div><div class=\"_191KSt\">\"小礼物走一走，来简书关注我\"</div><button type=\"button\" class=\"_1OyPqC _3Mi9q9 _2WY0RL _1YbC5u\"><span>赞赏支持</span></button><span class=\"_3zdmIj\">还没有人赞赏，支持一下</span></div><div class=\"d0hShY\"><a class=\"_1OhGeD\" href=\"/u/a76565e2af90\" target=\"_blank\" rel=\"noopener noreferrer\"><img class=\"_27NmgV\" src=\"https://upload.jianshu.io/users/upload_avatars/5384456/dce19c87-2c36-450c-8ee4-a335b7d60379.jpg?imageMogr2/auto-orient/strip|imageView2/1/w/100/h/100/format/webp\" alt=\"  \"></a><div class=\"Uz-vZq\"><div class=\"Cqpr1X\"><a class=\"HC3FFO _1OhGeD\" href=\"/u/a76565e2af90\" title=\"沉寂之舟\" target=\"_blank\" rel=\"noopener noreferrer\">沉寂之舟</a><span class=\"_2WEj6j\" title=\"码农一枚，好奇技术原理，探求解决思路。掌握C、C#、java、JavaScript、Rust多...\">码农一枚，好奇技术原理，探求解决思路。掌握C、C#、java、JavaScript、Rust多...</span></div><div class=\"lJvI3S\"><span>总资产59 (约2.55元)</span><span>共写了7.1W字</span><span>获得142个赞</span><span>共132个粉丝</span></div></div><button data-locale=\"zh-CN\" type=\"button\" class=\"_1OyPqC _3Mi9q9\"><span>关注</span></button></div></section><section class=\"-umr26\" aria-label=\"baidu-ad\"><div id=\"_u6201831_3vn99xfdd83\"><iframe id=\"iframeu6201831_0\" name=\"iframeu6201831_0\" src=\"https://pos.baidu.com/rctm?conwid=728&amp;conhei=90&amp;rdid=6201831&amp;dc=3&amp;exps=110261,110252,110011&amp;psi=411e49c64acd46f540080fdaac8d4506&amp;di=u6201831&amp;dri=0&amp;dis=0&amp;dai=1&amp;ps=3829x451&amp;enu=encoding&amp;ant=0&amp;dcb=___adblockplus_&amp;dtm=HTML_POST&amp;dvi=0.0&amp;dci=-1&amp;dpt=none&amp;tsr=0&amp;tpr=1609914046539&amp;ti=Spring-Boot%20%E5%8A%A0%E8%BD%BDBean%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%20-%20%E7%AE%80%E4%B9%A6&amp;ari=2&amp;ver=0105&amp;dbv=2&amp;drs=3&amp;pcs=1903x937&amp;pss=1903x4912&amp;cfv=0&amp;cpl=3&amp;chi=1&amp;cce=true&amp;cec=UTF-8&amp;tlm=1609914046&amp;prot=2&amp;rw=937&amp;ltu=https%3A%2F%2Fwww.jianshu.com%2Fp%2F7191dddf3c54&amp;ecd=1&amp;uc=1920x1040&amp;pis=-1x-1&amp;sr=1920x1080&amp;tcn=1609914047&amp;qn=a32c29d392b7b17c&amp;tt=1609914046532.9.9.10\" width=\"728\" height=\"90\" align=\"center,center\" vspace=\"0\" hspace=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" frameborder=\"0\" style=\"border:0;margin:0;width:728px;height:90px\" allowtransparency=\"true\"></iframe></div><script type=\"text/javascript\" src=\"//cpro.baidustatic.com/cpro/ui/cm.js\" async=\"\" defer=\"\"></script></section><div id=\"note-page-comment\"><div class=\"lazyload-placeholder\"></div></div><section class=\"ouvJEz\"><h3 class=\"QxT4hD\"><span>被以下专题收入，发现更多相似内容</span></h3><div class=\"_2Nttfz\"><div class=\"_3s5t0Q _1lsejJ\" role=\"button\" tabindex=\"-1\" aria-label=\"收入我的专题\"><i aria-label=\"ic-plus\" class=\"anticon\"><svg width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\" focusable=\"false\" class=\"\"><use xlink:href=\"#ic-plus\"></use></svg></i><span class=\"_2-Djqu\">收入我的专题</span></div></div><div class=\"_19DgIp\" style=\"margin-top:32px;margin-bottom:32px\"></div><h3 class=\"QxT4hD\"><span>推荐阅读</span><a class=\"_29KFEa _1OhGeD\" href=\"/\" target=\"_blank\" rel=\"noopener noreferrer\">更多精彩内容<i aria-label=\"ic-right\" class=\"anticon\"><svg width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\" focusable=\"false\" class=\"\"><use xlink:href=\"#ic-right\"></use></svg></i></a></h3><ul class=\"_1iTR78\"><li class=\"_11jppn\"><div class=\"JB6qEE\"><div class=\"em6wEs\" title=\"几个直击灵魂的Spring拷问（七）\" role=\"heading\" aria-level=\"4\"><a class=\"_2voXH8 _1OhGeD\" href=\"/p/e68df1bfbaf6\" target=\"_blank\" rel=\"noopener noreferrer\">几个直击灵魂的Spring拷问（七）</a></div><div class=\"_3fvgn4\">今天这一篇主要想围绕着Spring的循环依赖问题以及终极灵魂拷问如何手写Spring的问题讲讲。 一、Spring...</div><div class=\"_1pJt6F\"><a class=\"_3IWz1q _1OhGeD\" href=\"/u/abcf0e8f851a\" target=\"_blank\" rel=\"noopener noreferrer\"><img class=\"_34VC_H\" src=\"https://upload.jianshu.io/users/upload_avatars/8926909/fe082936-877c-4037-a5bf-7ca292646a40.jpg?imageMogr2/auto-orient/strip|imageView2/1/w/48/h/48/format/webp\" alt=\"\"><span class=\"_3tPsL6\">千淘萬漉</span></a><span class=\"_31hjBO\">阅读<!-- --> <!-- -->5,508</span><span class=\"_31hjBO\">评论<!-- --> <!-- -->0</span><span class=\"_31hjBO\">赞<!-- --> <!-- -->37</span></div></div><a class=\"_10MMAm _1OhGeD\" href=\"/p/e68df1bfbaf6\" target=\"_blank\" rel=\"noopener noreferrer\"><img class=\"_3zGDUj\" src=\"https://upload-images.jianshu.io/upload_images/8926909-f12f9ac4e56dbcd6.png?imageMogr2/auto-orient/strip|imageView2/1/w/300/h/240/format/webp\" alt=\"\"></a></li><li class=\"_11jppn\"><div class=\"JB6qEE\"><div class=\"em6wEs\" title=\"spring boot动态切换数据源\" role=\"heading\" aria-level=\"4\"><a class=\"_2voXH8 _1OhGeD\" href=\"/p/692d49d93ce4\" target=\"_blank\" rel=\"noopener noreferrer\">spring boot动态切换数据源</a></div><div class=\"_3fvgn4\">当数据量比较大的时候，我们就需要考虑读写分离了，也就是动态切换数据库连接,对指定的数据库进行操作。在spring中...</div><div class=\"_1pJt6F\"><a class=\"_3IWz1q _1OhGeD\" href=\"/u/3185aff85525\" target=\"_blank\" rel=\"noopener noreferrer\"><img class=\"_34VC_H\" src=\"https://upload.jianshu.io/users/upload_avatars/24191368/6addddd9-b1bd-466d-b023-4ae73f8f9327?imageMogr2/auto-orient/strip|imageView2/1/w/48/h/48/format/webp\" alt=\"\"><span class=\"_3tPsL6\">归来_仍是少年</span></a><span class=\"_31hjBO\">阅读<!-- --> <!-- -->518</span><span class=\"_31hjBO\">评论<!-- --> <!-- -->5</span><span class=\"_31hjBO\">赞<!-- --> <!-- -->9</span></div></div></li><li class=\"_11jppn\"><div class=\"JB6qEE\"><div class=\"em6wEs\" title=\"7种启动Spring Boot项目的方式，一次性打包说给你听\" role=\"heading\" aria-level=\"4\"><a class=\"_2voXH8 _1OhGeD\" href=\"/p/f8d054d84d5c\" target=\"_blank\" rel=\"noopener noreferrer\">7种启动Spring Boot项目的方式，一次性打包说给你听</a></div><div class=\"_3fvgn4\">今天重点来学习Spring Boot项目的7种启动方式。 第一种 也是最常见的本地启动的一种 这种方法就是执行ma...</div><div class=\"_1pJt6F\"><a class=\"_3IWz1q _1OhGeD\" href=\"/u/b7583394701a\" target=\"_blank\" rel=\"noopener noreferrer\"><img class=\"_34VC_H\" src=\"https://upload.jianshu.io/users/upload_avatars/24781613/971b421b-93f4-4cbd-bc90-d38810b151a1.png?imageMogr2/auto-orient/strip|imageView2/1/w/48/h/48/format/webp\" alt=\"\"><span class=\"_3tPsL6\">程序员木子</span></a><span class=\"_31hjBO\">阅读<!-- --> <!-- -->350</span><span class=\"_31hjBO\">评论<!-- --> <!-- -->0</span><span class=\"_31hjBO\">赞<!-- --> <!-- -->4</span></div></div><a class=\"_10MMAm _1OhGeD\" href=\"/p/f8d054d84d5c\" target=\"_blank\" rel=\"noopener noreferrer\"><img class=\"_3zGDUj\" src=\"https://upload-images.jianshu.io/upload_images/24781613-a5be1cb2b5682815?imageMogr2/auto-orient/strip|imageView2/1/w/300/h/240/format/webp\" alt=\"\"></a></li><li class=\"_11jppn\"><div class=\"JB6qEE\"><div class=\"em6wEs\" title=\"Java8学习--Stream&amp;Collectors\" role=\"heading\" aria-level=\"4\"><a class=\"_2voXH8 _1OhGeD\" href=\"/p/da94056cdf15\" target=\"_blank\" rel=\"noopener noreferrer\">Java8学习--Stream&amp;Collectors</a></div><div class=\"_3fvgn4\">java8关于stream操作api总结: 一、先介绍几个名词: 1、中间操作： 中间操作会产生另一个流。因此中间...</div><div class=\"_1pJt6F\"><a class=\"_3IWz1q _1OhGeD\" href=\"/u/02970f757292\" target=\"_blank\" rel=\"noopener noreferrer\"><img class=\"_34VC_H\" src=\"https://upload.jianshu.io/users/upload_avatars/23331175/d0498774-85bb-4589-8e3b-60d0ac1bf932.jpg?imageMogr2/auto-orient/strip|imageView2/1/w/48/h/48/format/webp\" alt=\"\"><span class=\"_3tPsL6\">与七书不是一本书</span></a><span class=\"_31hjBO\">阅读<!-- --> <!-- -->26</span><span class=\"_31hjBO\">评论<!-- --> <!-- -->0</span><span class=\"_31hjBO\">赞<!-- --> <!-- -->0</span></div></div></li><li class=\"_11jppn\"><div class=\"JB6qEE\"><div class=\"em6wEs\" title=\"数据结构之树型结构\" role=\"heading\" aria-level=\"4\"><a class=\"_2voXH8 _1OhGeD\" href=\"/p/393a54700b35\" target=\"_blank\" rel=\"noopener noreferrer\">数据结构之树型结构</a></div><div class=\"_3fvgn4\">关注微信公众号：程序猿的日常分享，定期更新分享。 树的定义 树是一种数据结构，它是由n(n&gt;=1)个有限结点组成一...</div><div class=\"_1pJt6F\"><a class=\"_3IWz1q _1OhGeD\" href=\"/u/c71c44372061\" target=\"_blank\" rel=\"noopener noreferrer\"><img class=\"_34VC_H\" src=\"https://upload.jianshu.io/users/upload_avatars/11156240/5a57276a-6540-4991-b7bf-b7b9ecaaccc2.jpg?imageMogr2/auto-orient/strip|imageView2/1/w/48/h/48/format/webp\" alt=\"\"><span class=\"_3tPsL6\">wangpeng123</span></a><span class=\"_31hjBO\">阅读<!-- --> <!-- -->51</span><span class=\"_31hjBO\">评论<!-- --> <!-- -->0</span><span class=\"_31hjBO\">赞<!-- --> <!-- -->0</span></div></div><a class=\"_10MMAm _1OhGeD\" href=\"/p/393a54700b35\" target=\"_blank\" rel=\"noopener noreferrer\"><img class=\"_3zGDUj\" src=\"https://upload-images.jianshu.io/upload_images/11156240-f80a6ba43eff710c.png?imageMogr2/auto-orient/strip|imageView2/1/w/300/h/240/format/webp\" alt=\"\"></a></li></ul></section></div>"
  },
  {
    "category": "spring",
    "qes": "servlet和jsp的区别",
    "ans": "<div class=\"content-intro view-box \"><p>jsp作为Servlet技术的扩展，经常会有人将jsp和Servlet搞混。本文，将为大家带来servlet和jsp的区别，希望对大家有所帮助。<br></p><p><br></p><p><b>servlet和</b><b>jsp</b><b>的区别</b></p><p>1、Servlet在Java代码中可以通过HttpServletResponse对象动态输出HTML内容。</p><p>2、JSP是在静态HTML内容中嵌入Java代码，然后Java代码在被动态执行后生成HTML内容。</p><p><br></p><p><b>servlet和</b><b>jsp</b><b>的</b><b>各自的特点</b></p><p>1、Servlet虽然能够很好地组织业务逻辑代码，但是在Java源文件中，因为是通过字符串拼接的方式生成动态HTML内容，这样就容易导致代码维护困难、可读性差。</p><p>2、JSP虽然规避了Servlet在生成HTML内容方面的劣势，但是在HTML中混入大量、复杂的业务逻辑。</p><p><br></p><p><b>通过MVC双剑合璧</b></p><p>JSP和Servlet都有自身的适用环境，那么有没有什么办法能够让它们发挥各自的优势呢？答案是肯有的，MVC模式就能够完美解决这一问题。</p><p>MVC模式，是Model-View-Controller的简称，是软件工程中的一种软件架构模式，分为三个基本部分，分别是：模型（Model）、视图（View）和控制器（Controller）：</p><p>Controller——负责转发请求，对请求进行处理</p><p>View——负责界面显示</p><p>Model——业务功能编写（例如算法实现）、数据库设计以及数据存取操作实现</p><p>在JSP/Servlet开发的软件系统中，这三个部分的描述如下所示：\n</p><p><br></p><p align=\"center\" style=\"text-align: center;\"><img src=\"https://atts.w3cschool.cn/attachments/image/20180428/1524895758222687.jpg\" alt=\"229cf9ff5b1729eaf408fac56238eeb3_hd\" class=\"\"><br></p><p><br></p><p>1、Web浏览器发送HTTP请求到服务端，然后被Controller(Servlet)获取并进行处理（例如参数解析、请求转发）\n</p><p>2、Controller(Servlet)调用核心业务逻辑——Model部分，获得结果\n</p><p>3、Controller(Servlet)将逻辑处理结果交给View（JSP），动态输出HTML内容\n</p><p>4、动态生成的HTML内容返回到浏览器显示\n</p><p>MVC模式在Web开发中有很大的优势，它完美规避了JSP与Servlet各自的缺点，让Servlet只负责业务逻辑部分，而不会生成HTML代码；同时JSP中也不会充斥着大量的业务代码，这样能大提高了代码的可读性和可维护性。</p><p><br></p><p><b>相关阅读：</b></p><p><a href=\"https://www.w3cschool.cn/servlet/\" target=\"_blank\">Servlet教程</a></p><p><a href=\"https://www.w3cschool.cn/jsp/\" target=\"_blank\">JSP教程</a></p><p><br></p></div>"
  },
  {
    "category": "spring",
    "qes": "什么是接口幂等性？为什么会产生这个问题？如何保证接口幂等性？",
    "ans": "<div class=\"RichText ztext Post-RichText\"><p>之前负责的项目报了一个问题，用户操作回退失效。我们的设计里，操作回退是回到操作前的状态。经过查看日志发现，用户之前的操作做了两次，也就是说提交操作的接口被调用了两次，导致之用户上一次的状态和这一次的状态是一样的，所以操作回退是没有问题的，问题出在了操作的接口被调用了两次。</p><p>对于防止重复提交，是放在前端控制的，用户点击完按钮之后，后台返回成功的结果，按钮就不可见，实践证明，客户端的限制操作不是绝对可靠的。</p><p>针对上面的场景，就引入了今天的问题，什么是接口幂等性？如何保证接口幂等性？</p><h2><b>什么是接口幂等性？</b></h2><p>首先看看幂等性的概念：</p><p>幂等性原本是数学上的概念，用在接口上就可以理解为：<b>同一个接口，多次发出同一个请求，必须保证操作只执行一次。</b> 调用接口发生异常并且重复尝试时，总是会造成系统所无法承受的损失，所以必须阻止这种现象的发生。</p><p>比如下面这些情况，如果没有实现接口幂等性会有很严重的后果： 支付接口，重复支付会导致多次扣钱 ；订单接口，同一个订单可能会多次创建。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-99611086d8a2f63c5cfee701772d1880_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1040\" data-rawheight=\"160\" class=\"origin_image zh-lightbox-thumb\" width=\"1040\" data-original=\"https://pic1.zhimg.com/v2-99611086d8a2f63c5cfee701772d1880_r.jpg\"/></noscript><img src=\"https://pic1.zhimg.com/80/v2-99611086d8a2f63c5cfee701772d1880_720w.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1040\" data-rawheight=\"160\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1040\" data-original=\"https://pic1.zhimg.com/v2-99611086d8a2f63c5cfee701772d1880_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-99611086d8a2f63c5cfee701772d1880_b.png\" data-lazy-status=\"ok\"></figure><h2><b>为什么会产生接口幂等性问题？</b></h2><p>那么，什么情况下，会产生接口幂等性的问题呢？</p><ul><li>网络波动, 可能会引起重复请求</li><li>用户重复操作,用户在操作时候可能会无意触发多次下单交易,甚至没有响应而有意触发多次交易应用</li><li>使用了失效或超时重试机制(Nginx重试、RPC重试或业务层重试等)</li><li>页面重复刷新</li><li>使用浏览器后退按钮重复之前的操作,导致重复提交表单</li><li>使用浏览器历史记录重复提交表单</li><li>浏览器重复的HTTP请求</li><li>定时任务重复执行</li><li>用户双击提交按钮</li></ul><h2><b>如何保证接口幂等性？</b></h2><p>那么最关键的来了，如何保证接口幂等性？</p><p>解决办法分为两个方向，一个方向是客户端防止重复调用，一个是服务端进行校验。当然，客户端防止重复提交并不是绝对可靠的，优点是实现起来比较简单。</p><ol><li><b>按钮只可操作一次</b></li></ol><p>一般是提交后把按钮置灰或loding状态,消除用户因为重复点击而产生的重复记录,比如添加操作,由于点击两次而产生两条记录</p><ol><li><b>token机制</b></li></ol><p>功能上允许重复提交,但要保证重复提交不产生副作用,比如点击n次只产生一条记录,具体实现就是进入页面时申请一个token,然后后面所有的请求都带上这个token,后端根据token来避免重复请求。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c75844632bbc7666da9055e5e479bbe6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"812\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-c75844632bbc7666da9055e5e479bbe6_r.jpg\"/></noscript><img src=\"https://pic3.zhimg.com/80/v2-c75844632bbc7666da9055e5e479bbe6_720w.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"812\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-c75844632bbc7666da9055e5e479bbe6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c75844632bbc7666da9055e5e479bbe6_b.jpg\" data-lazy-status=\"ok\"></figure><ol><li><b>使用Post/Redirect/Get模式</b></li></ol><p>在提交后执行页面重定向,这就是所谓的Post-Redirect—Get(PRG)模式,简单来说就是当用户提交连表单后,跳转到一个重定向的信息页面,这样就避免用户按F5刷新导致的重复提交,而且也不会出现浏览器表单重复提交的警告,也能消除按浏览器前进和后退导致同样重复提交的问题。</p><ol><li><b>在session存放特殊标志</b></li></ol><p>在服务端,生成一个唯一的标识符,将它存入session,同时前端获取这个标识符的值将它写入表单的隐藏中,用于用户输入信息后点击一起提交,在服务器端,获取表单中隐藏字段的值,与session中的唯一标识符比较,相等说明是首次提交,就处理本次请求,然后将session中的唯一标识符移除,不相等则表示是重复提交,不再做处理。</p><ol><li><b>使用唯一索引防止新增脏数据</b></li></ol><p>利用数据库唯一索引机制,当数据重复时,插入数据库会抛出异常,保证不会出现脏数据。</p><ol><li><b>乐观锁</b></li></ol><p>如果更新已有数据,可以进行加锁更新,也可以设计表结构时使用乐观锁,通过version来做乐观锁,这样既能保证执行效率,又能保证幂等, 乐观锁的version版本在更新业务数据要自增<br>update table set version = version + 1 where id = #{id} and version = #{version}<br>示例: 当有重复请求的时候,第一个请求会获取当前商品的version版本号,得到的version为1,紧接着由于第一个请求还没更新商品的version,第二个请求获取的version依然也是1, 这时候第一个请求操作更新的时候带上version并作为条件并且自增更新,这时候商品的version就会变成2,当第二个请求去操作更新的时候明显version不一致导致更新失败。</p><ol><li><b>select + insert or update or delete</b></li></ol><p>该方案就是操作之前先查询一下,符合要求再插入,该方案在没有并发的系统中可以解决幂等问题，在单JVM有并发的时候可以用JVM加锁来保证幂等性,在分布式环境它是无法保证幂等性,可以使用分布式来保证。</p><ol><li><b>分布式锁</b></li></ol><p>如果是分布是系统，构建全局唯一索引比较困难，例如唯一性的字段没法确定，这时候可以引入分布式锁，通过第三方的系统(redis或zookeeper)，在业务系统插入数据或者更新数据，获取分布式锁，然后做操作，之后释放锁，这样其实是把多线程并发的锁的思路，引入多多个系统，也就是分布式系统中得解决思路。要点：某个长流程处理过程要求不能并发执行，可以在流程执行之前根据某个标志(用户ID+后缀等)获取分布式锁，其他流程执行时获取锁就会失败，也就是同一时间该流程只能有一个能执行成功，执行完成后，释放分布式锁(分布式锁要第三方系统提供)。</p><ol><li><b>状态机幂等</b></li></ol><p>在设计单据相关的业务，或者是任务相关的业务，肯定会涉及到状态机(状态变更图)，就是业务单据上面有个状态，状态在不同的情况下会发生变更，一般情况下存在有限状态机，这时候，如果状态机已经处于下一个状态，这时候来了一个上一个状态的变更，理论上是不能够变更的，这样的话，保证了有限状态机的幂等。注意：订单等单据类业务，存在很长的状态流转，一定要深刻理解状态机，对业务系统设计能力提高有很大帮助 。</p><ol><li><b>防重表</b></li></ol><p>以支付为例: 使用唯一主键去做防重表的唯一索引,比如使用订单号作为防重表的唯一索引,每一次请求都根据订单号向防重表中插入一条数据,插入成功说明可以处理后面的业务,当处理完业务逻辑之后删除防重表中的订单号数据,后续如果有重复请求,则会因为防重表唯一索引原因导致插入失败,直接返回操作失败,直到第一次请求返回结果,可以看出防重表作用就是加锁的功能。<br>注: 最好结合状态机幂等先判断一下</p><ol><li><b>缓冲队列</b></li></ol><p>将请求都快速地接收下来后放入缓冲队列中,后续使用异步任务处理队列中的数据,过滤掉重复的请求,该解决方案优点是同步处理改成异步处理、高吞吐量,缺点则是不能及时地返回请求结果,需要后续轮询得处理结果。</p><ol><li><b>全局唯一号</b></li></ol><p>比如通过source来源 + 唯一序列号传入给后端，后端来判断请求是否重复,在并发时只能处理一个请求,其他相同并发请求要么返回请求重复,要么等待 前面请求执行完成后再执行。</p><blockquote>作者：三分恶<br>原文链接：<a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/three-fighter/p/14054749.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\"><span class=\"invisible\">https://www.</span><span class=\"visible\">cnblogs.com/three-fight</span><span class=\"invisible\">er/p/14054749.html</span><span class=\"ellipsis\"></span></a></blockquote></div>"
  },
  {
    "category": "spring",
    "qes": "",
    "ans": ""
  },
  {
    "category": "spring",
    "qes": "",
    "ans": ""
  },
  {
    "category": "spring",
    "qes": "",
    "ans": ""
  },
  {
    "category": "spring",
    "qes": "",
    "ans": ""
  }



]