[
  {
    "category": "jvm",
    "qes": "说说sleep方法和wait方法的区别和共同点?",
    "ans": "1.两者最主要的区别在于：sleep方法没有释放锁，而wait方法释放了锁。</br>2.两者都可以暂停线程的执行。</br>3.Wait通常被用于线程间的交互通信，sleep通常被用于暂停执行。</br>4.wait()方法被调用之后，线程不会自动苏醒，需要别的线程调用同一对象上的notify()或者notifyAll()方法，sleep()方法执行完成后，线程会自动苏醒，或者可以使用wait(long timeout)超时后线程会自动苏醒"
  },
  {
    "category": "jvm",
    "qes": "为什么我们调用start()方法时会执行run方法，为什么我们不能直接调用run方法？",
    "ans": "new一个Thread,线程进入新建状态;调用start方法，会启动一个线程并使线程进入就绪状态，当分配到时间片以后就能构运行了。</br>start()方法会执行线程的相应准备工作，然后自动执行run()方法的内容，这是真正的多线程工作，而直接执行run()方法，会把run方法当成一个main线程下的普通方法执行，并不会在某个线程中执行它，所以这并不是多线程工作。"
  },
  {
    "category": "jvm",
    "qes": "说一说自己对于synchronized关键字的理解？",
    "ans": "synchronized关键字解决的是多个线程之间访问资源的异步性，synchronized关键字可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。另外，在JDK早期的版本，synchronized属于重量级锁，效率低下，因为监视器锁(monitor)是依赖于底层的操作系统的Mutex Lock来实现的，Java的线程是映射到操作系统的原生线程之上的。如果要挂起或者唤醒一个线程，都需要操作系统帮忙完成，而操作系统实现线程之间的切换需要从用户态转变为内核态，这个状态之间的切换需要相对比较长的时间，时间成本相对较高，这也是为什么早期的synchronized效率低的原因。庆幸的是在Java6之后的Java官方从JVM层面对synchronized较大的优化，所以现在的synchronized锁效率也优化得很不错了。JDK1.6对锁得实现引入了大量的优化，如自旋锁、适应性自旋锁、锁消除、锁粗化、偏向锁、轻量级锁等技术来减少锁操作得开销。"
  },
  {
    "category": "jvm",
    "qes": "synchronized关键字最主要的三种使用方式？",
    "ans": "1.修饰实例方法：作用于当前对象实例加锁，进入同步代码前要获得当前对象得实例的锁；</br>2.修饰静态方法：也就是给当前类加锁，会作用于类的所有对象实例，因为静态成员不会属于任何一个实例对象，是类成员(static表明这是该类的一个静态资源，不管new多少个对象，只有一份)。所以如果一个线程A调用一个实例对象的非静态类synchronized方法，而线程B需要调用这个实例对象所属类的静态synchronized方法，是允许的，不会发生互斥现象，因为访问静态synchronized方法占用的锁是当前类的锁，而访问非静态synchronized方法占用的锁是当前实例对象锁;</br>3.修饰代码块：指定加锁对象，对给定对象加锁，进入同步代码前要获得给定对象的锁。</br>总结:synchronized关键字加到static静态方法和synchronized(class)代码块上都是给Class类上。synchronized关键字加到实例方法上是给对象实例上锁，尽量不要使用synchronized(String a),因为JVM中，字符串常量池具有缓存功能。"
  },
  {
    "category": "jvm",
    "qes": "什么是指令重排?",
    "ans": "重排序通常是编译器或运行时环境为了优化程序性能而采取的对指令进行重新排序执行的一种手段。重排序分为两类：编译期重排序和运行期重排序，分别对应编译时和运行时环境。编译期重排序的典型就是通过调整指令顺序，在不改变程序语义的前提下，尽可能减少寄存器的读取、存储次数，充分复用寄存器的存储值。例如int i = 1;int j = 2;第二行代码完全可能先被处理器执行，这并不影响先行先发生原则，因为我们在这条线程中没有办法感知到这点。（都是赋值操作，无论先发生哪一个，最终结果都与顺序执行一样）。但如果有其他线程在读取这两个值，重排序就会造成读取错误！\n\n对于单一线程，如果有办法感知到这点，即int a = 1;int b = a;那么就不能重排序。编译器和处理器在重排序时，会遵守数据依赖性，编译器和处理器不会改变存在数据依赖关系的两个操作的执行顺序。也就是说：在单线程环境下，指令执行的最终效果应当与其在顺序执行下的效果一致，否则这种优化便会失去意义。这句话有个专业术语叫做as-if-serial semantics (as-if-serial语义)。"
  },
  {
    "category": "jvm",
    "qes": "产生死锁的四个必要条件",
    "ans": "互斥，不剥夺，请求与保持，循环等待"
  },
  {
    "category": "jvm",
    "qes": "yield有什么作用？",
    "ans": "public static native void yield();这是一个静态方法，一旦执行，它会是当前线程让出CPU，但是，需要注意的是，让出的CPU并不是代表当前线程不再运行了，如果在下一次竞争中，又获得了CPU时间片当前线程依然会继续运行。另外，让出的时间片只会分配给当前线程相同优先级的线程。"
  },
  {
    "category": "jvm",
    "qes": "sleep()和yield()方法，同样都是当前线程会交出处理器资源,但是他们具有什么不同之处？",
    "ans": "sleep()交出来的时间片其他线程都可以去竞争，也就是说都有机会获得当前线程让出的时间片。而yield()方法只允许与当前线程具有相同优先级的线程能够获得释放出来的CPU时间片。"
  },
  {
    "category": "jvm",
    "qes": "Java内存模型(JMM)的核心概念",
    "ans": "Java的采用的是共享内存模型，线程之间共享程序的公共状态，线程之间通过写-读内存中的公共状态来隐式进行通信。Java线程之间的通信由Java内存模型（JMM）控制，JMM决定一个线程对共享变量的写入何时对另一个线程可见。\n从抽象的角度来看，JMM定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存中，每个线程都有一个私有的本地内存，本地内存中存储了该线程以读/写共享变量的副本。本地内存是JMM的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。"
  },
  {
    "category": "jvm",
    "qes": "JVM内存模型的三大特性",
    "ans": "JAVA内存模型主要是建立在如何处理java并发过程中的原子性、可见性和有序性这三个特征的：</br>1.原子性：由Java内存模型直接保证的原子性变量操作包括read、load、use、assign、store和write六个，大致可以认为基础数据类型的访问和读写是具备原子性的。如果应用场景需要一个更大范围的原子性保证，Java内存模型还提供了lock和unlock操作来满足这种需求，尽管虚拟机未把lock与unlock操作直接开放给用户使用，但是却提供了更高层次的字节码指令monitorenter和monitorexit来隐匿地使用这两个操作，这两个字节码指令反映到Java代码中就是同步块—synchronized关键字，因此在synchronized块之间的操作也具备原子性。</br>2.可见性：可见性就是指当一个线程修改了线程共享变量的值，其它线程能够立即得知这个修改。Java内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值这种依赖主内存作为传递媒介的方法来实现可见性的，无论是普通变量还是volatile变量都是如此，普通变量与volatile变量的区别是volatile的特殊规则保证了新值能立即同步到主内存，以及每使用前立即从内存刷新。因为我们可以说volatile保证了线程操作时变量的可见性，而普通变量则不能保证这一点。</br>3.有序性：Java语言提供了volatile和synchronized两个关键字来保证线程间操作的有序性。在java中，有序性可以总结为：如果在本线程内观察，所有操作都是有序的；如果在一个线程内观察另一个线程，所有操作都是无序的。前半句讲的是“线程内表现为串行语义”，后半句指“指令重排序”和“工作内存和主内存同步延迟”。"
  },
  {
    "category": "jvm",
    "qes": "synchronized和ReentrantLock的区别",
    "ans": "1.两者都是可以重入锁：可重入锁的概念是，自己可以再次获取自己的内部锁，比如一个线程获得了某个对象的锁，此时这个对象锁还没有释放，当其再次想要获取这个对象的锁的时候还是可以获取的，如果不可锁重入的话，就会造成死锁，同一个线程每次获取锁，锁的计数器都会自增1，所以要等到锁的计数器下降为0时才能释放锁；</br>2.synchronized依赖于JVM并没有直接暴露给我们，而ReentrantLock依赖于API，需要lock()和unlock()方法配合try/finally语句块来完成，</br>3.ReentrantLock比synchronized增加了一些高级的功能，主要有三点：1.等待可中断（正在等待的线程可以选择放弃等待，改为处理其他事情）2.可实现公平锁(即可指定公平锁还是非公平锁，而synchronized只能是非公平锁，所谓的公平锁就是先等待的线程先获得锁)3.可实现选择性通知(锁可以绑定多个条件)"
  },
  {
    "category": "jvm",
    "qes": "透过volatile关键字了解一下Java内存模型",
    "ans": "在JDK1.2之前，Java的内存模型实现总是从主存(即共享内存)读取变量，而在当前JVM下，线程可以把变量保存在本地内存，如寄存器中，而不是直接在主存中进行读写，这就可能导致多个线程同时读取导致数据不一致，为了避免这种情况，就需要把变量声明为volatile，这就只是JVM，这个变量是不稳定的，每次使用它都到主存中进行读取，即volatile关键字的作用就是保证变量的可见性然后还有一个作用是防止指令重排序。"
  },
  {
    "category": "jvm",
    "qes": "说说synchronized关键字和volatile关键字的区别",
    "ans": "1.volatile关键字是线程同步的轻量级实现，所以volatile性能肯定要比synchronized要好，但前者只能修饰变量，后者可以修饰方法及代码块，jdk1.6之后synchronized进行了主要包括为了减少锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁以及其他各种优化之后执行效率有了明显的提升，因此在实际的开发过程中，synchronized关键字的场景还是更多一些；</br>2.多线程访问volatile关键字不会发生阻塞，而synchronized关键字可能会发生阻塞;</br>3.volatile只能保证数据的原子性，不能保证数据的可见性，但是synchronized两者都能保证;</br>4.volatile关键字主要用于解决变量在多个线程之间的可见性，而synchronized关键字解决的是多个线程之间访问的同步性"
  },
  {
    "category": "jvm",
    "qes": "为什么要使用线程池，使用线程池有什么好处？",
    "ans": "池化技术的思想主要是为了减少每次获取资源的消耗，提高对资源的利用率。线程池提供了一种限制和管理资源(包括执行一个任务)。每个线程池还维护一些基本统计信息，例如已完成人物的数量</br>1.降低资源消耗--通过重复利用已创建的线程降低线程创建和销毁造成的消耗;</br>2.提高响应速度--当任务到达时，任务可以不需要等到线程创建就能立即执行;</br>3.提高系统的可管理性：线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以统一的分配，调优和监控"
  },
  {
    "category": "jvm",
    "qes": "实现Runnable接口和Callable接口的区别？",
    "ans": "Runnable自Java1.0以来一直存在，而Callable仅在Java1.5中引入，目的是为了来处理Runnable不支持的用例，Runnable接口不会返回结果或抛出异常推荐使用Runnable接口，这样代码会看起来更加简洁。"
  },
  {
    "category": "jvm",
    "qes": "执行execute()方法和submit()方法的区别是什么呢？",
    "ans": "1.execute()方法用于提交不需要返回值的任务，所以无法判断任务是否被线程池成功执行与否。</br>submit()方法用于提交需要返回值的任务，线程池会返回一个Future类型的对象，通过这个Future对象可以判断任务是否执行成功，并且可以通过Future的get()方法来获取返回值，get()方法会阻塞当前线程知道任务完成，而是用get(long timeout, TimeUnit unitr)方法则会阻塞当前线程一段时间后立即返回，这时候可能任务没有执行完。"
  },
  {
    "category": "jvm",
    "qes": "阿里巴巴Java开发手册中强制线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式，为什么？",
    "ans": "  Executor返回线程池对象的弊端如下：</br>1.FixedThreadPool和SingleThreadExecutor:允许请求的队列长度为Integer.MAX_VALUE,可能堆积大量的请求，从而导致OOM。</br>2.CacheThreadPool和ScheduledThreadPool：允许创建的线程数量为Integer.MAX_VALUE，可能会创建大量线程，从而导致OOM"
  },
  {
    "category": "jvm",
    "qes": "线程池大小确定的依据",
    "ans": "线程池数量的确定一直是困扰着程序员的一个难题，大部分程序员在设定线程池大小的时候就是随心而定。我们并没有考虑过这样大小的配置是否会带来什么问题，我自己就是这大部分程序员中的一个代表。\n\n由于笔主对如何确定线程池大小也没有什么实际经验，所以，这部分内容参考了网上很多文章/书籍。\n\n首先，可以肯定的一点是线程池大小设置过大或者过小都会有问题。合适的才是最好，貌似在 95 % 的场景下都是合适的。\n\n如果我们设置的线程池数量太小的话，如果同一时间有大量任务/请求需要处理，可能会导致大量的请求/任务在任务队列中排队等待执行，甚至会出现任务队列满了之后任务/请求无法处理的情况，或者大量任务堆积在任务队列导致 OOM。这样很明显是有问题的！ CPU 根本没有得到充分利用。\n\n但是，如果我们设置线程数量太大，大量线程可能会同时在争取 CPU 资源，这样会导致大量的上下文切换，从而增加线程的执行时间，影响了整体执行效率。</br></br>有一个简单并且适用面比较广的公式：\n\n</br>1.CPU 密集型任务(N+1)： 这种任务消耗的主要是 CPU 资源，可以将线程数设置为 N（CPU 核心数）+1，比 CPU 核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用 CPU 的空闲时间。\n</br>2.I/O 密集型任务(2N)： 这种任务应用起来，系统会用大部分的时间来处理 I/O 交互，而线程在处理 I/O 的时间段内不会占用 CPU 来处理，这时就可以将 CPU 交出给其它线程使用。因此在 I/O 密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是 2N。"
  },
  {
    "category": "jvm",
    "qes": "java.util.concurrent简称juc，该包中的原子类是哪4类？",
    "ans": "1.基本类型(使用原子的方式更新基本类型)</br>2.数组类型(使用原子的方式更新数组里的某些元素)</br>3.引用类型</br>4.对象的属性修改类型"
  },
  {
    "category": "jvm",
    "qes": "简要描述AQS原理",
    "ans": "AQS的全称是AbstractQueuedSynchronizer,AQS的核心思想是如果被请求的共享共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态，如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制AQS是用CLH队列锁实现的，即将暂时获取不到的线程加入到队列中。"
  },
  {
    "category": "jvm",
    "qes": "接上问，CLH是什么？",
    "ans": "Craig,Landin, and Hagersten队列是一个虚拟的双向队列(虚拟的双向队列即不存在队列实例，仅存在节点之间的关联关系)。AQS是将每条请求共享资源的线程封装成一个CLH队列的一个结点(Node)来实现锁的分配"
  },
  {
    "category": "jvm",
    "qes": "JDK1.8前后，Java的内存区域发生了哪些变化？",
    "ans": "线程共享的方法区(内含运行时常量)变成了直接内存中的元空间，即从方法区(PermGen)到元空间(MetaSpace)"
  },
  {
    "category": "jvm",
    "qes": "接上问，什么是方法区？",
    "ans": " 1.JDK1.8以前的HotSpot JVM有方法区，也叫做永久代</br>2.方法区用于存放已被虚拟机加载的类信息、常量、静态变量、即编译器编译后的代码；</br>3.方法区是一片连续的堆空间，通过-XX:MaxPermSize来设定永久代最大可分配空间，当JVM加载的类信息容量超过这个值，会报OOM:PermGen的错误;</br>4.永久代的GC是和老年代的(old generation)捆绑在一起的，无论谁满了都会触发永久代和老年代的垃圾收集;</br>5.JDK1.7开始了方法区的部分移除，符号引用(Symbols)移至native heap，字面量的(interned strings)和静态变量(class statics)移至java heap;</br>6.为什么要用Metaspace代替方法区？随着动态类加载的情况越来越多，这块内存变得不太可控，如果设置小了，系统运行过程中的就容易出现内存溢出，设置大了又浪费内存。"
  },
  {
    "category": "jvm",
    "qes": "元空间MetaSpace的组成？",
    "ans": "元空间(MetaSpace)由两大部分组成:Klass Metaspace和NoKlass Metaspace。</br>1.Klass Metaspace就是用来存klass的，就是class文件在jvm里的运行时数据结构(不过我们看到的类似A.class其实是存在heap里的，是java.lang.Class的对象实例);</br>2.NoKlass Metaspace专门来存klass相关的其他内容，比如method,constantPool等，可以由多块不连续的内存组成"
  },
  {
    "category": "jvm",
    "qes": "jdk1.8下Java的内存区域(运行时数据区)哪些是线程共享的，哪些是线程私有的",
    "ans": "1.线程私有：程序计数器，虚拟机栈，本地方法栈；2.线程共享：堆，方法区，直接内存(非运行时数据区的一部分)"
  },
  {
    "category": "jvm",
    "qes": "简单解释一下程序计数器",
    "ans": "程序计数器是一块比较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。字节码指示器工作时通过改变这个计时器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完成。另外，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各线程之间的计数器互不影响，独立存储，我们称这类内存区域为线程私有的内存；</br>因此，我们可以总结出程序计数器主要有如下的两个作用，1.字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如:顺序执行，选择，循环，异常处理；2.在多线程的处理下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能狗知道程序上次执行到哪儿了。注意：程序计数器是为一个个不会出险OOM的内存区域，它的生命周期随着线程的创建而创建，随着现成的结束而死亡"
  },
  {
    "category": "jvm",
    "qes": "简单解释一下Java虚拟机栈",
    "ans": "和程序计数器一样，Java虚拟机栈也是程序私有的，它的生命周期和线程周期相同，描述的是Java方法执行的内存模型，每次方法调用的数据都是通过栈传递的。Java内存可以粗糙的区分为堆内存(Heap)和栈内存(Stack)，其中栈就是现在说的虚拟机栈，或者说是虚拟机栈中局部变量表部分。(实际上，Java虚拟机栈是由一个个栈帧组成的，而每一格栈帧中都拥有：局部变量表，操作数栈，动态链接，方法出口信息。)</br>局部变量表主要存放了编译器可知的各种数据类型(boolean,byte,char,short,int,float,long,double)，对象引用(reference类型，它不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或者其他于此对象相关的位置)"
  },
  {
    "category": "jvm",
    "qes": "Java虚拟机栈会出现两种异常,哪两种？",
    "ans": "StackOverFlowError：若Java虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前java虚拟机栈的最大深度时，就抛出StackOverFlowError异常</br>OutOfMemoryError：若Java虚拟机栈的内存大小允许动态扩展，且当前线程请求栈时内存用完了，无法再动态扩展了，此时就会抛出OOM异常"
  },
  {
    "category": "jvm",
    "qes": "简单解释一下本地方法栈？",
    "ans": "和虚拟机栈发挥的作用非常类似，区别是：虚拟机栈为虚拟执行java方法(也就是字节码)服务，而本地方法栈则为虚拟机栈使用到的Native方法服务，在HotSpot虚拟机中和Java虚拟机栈合二为一；</br>本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。</br>方法执行完毕后相应的栈帧也会出栈并释放内存空间，也会出现StackOverFlowError和OutOfMemoryError两种异常"
  },
  {
    "category": "jvm",
    "qes": "简单解释一下堆空间",
    "ans": "Java堆是Java虚拟机所管理的内存中最大的一块，Java堆是所有线程共享的一块内存区域，在虚拟机启动时创建，此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存；</br>Java堆是垃圾收集器管理的主要区域，因此也被称作GC堆(Garbage Collected Heap)从垃圾回收的角度，由于现在收集器基本采用分代垃圾收集算法，所以Java堆还可以细分为：新生代和老年代：再细致一点有：Eden空间，From Survivor,To Survivor空间等，进一步划分的目的是更好的回收内存，或者更快的分配内存"
  },
  {
    "category": "jvm",
    "qes": "Java堆可以分为哪几代？",
    "ans": "Java堆可以分为新生代和老年代，再细致一点的可以分为(按从新到老的顺序)eden->s0->s1->tentired,其中前三是新生代，最后一个老年代，大部分情况下，对象都会首先在Eden区域分配，在一次新生代垃圾回收后，如果对象还存活，则会进入s0或者s1,并且对象的年龄还会加1(Eden区->Survivor区后对象的初始年龄变为1)，当它的年龄增加到一定程度(默认为15岁)，就会被晋升到老年代中，对象晋升到老年代的年龄域值，可以通过参数(-XX:MaxTenuringThreshold来设置)"
  },
  {
    "category": "jvm",
    "qes": "简单解释一下方法区",
    "ans": "方法区和Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等数据。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫作Non-Heap(非堆)，目的是与Java堆区分开来"
  },
  {
    "category": "jvm",
    "qes": "方法区和永久代的关系",
    "ans": "Java虚拟机规范只是规定了有方法区这么个概念和它的作用，并没有规定如何去实现它，那么，在不同的JVM上方法区的实现肯定是不同的，方法区和永久代的关系很象Java中接口和类的关系，类实现了接口，而永久代就是HotSpot虚拟机对虚拟机规范中方法区的实现方式。也就是说，永久代是HotSpot的概念，方法区是Java虚拟机规范中的定义，是一种规范，而永久代是一种实现，一个是标准一个是实现，其他的虚拟机实现并没有永久带这一说法；JDK1.8的时候，方法区(HotSpot的永久代)被彻底移除了，(JDK1.7就已经开始了)，取而代之的是元空间，元空间使用的是直接内存"
  },
  {
    "category": "jvm",
    "qes": "为什么要将永久代(PermGen)替换为元空间(MetaSpace)呢",
    "ans": "整个永久代有一个JVM本身设定固定大小上限，无法进行调整，而元空间使用的是直接内存，收本机可用内存的限制，并且永远不会得到java.lang.OutOfMemoryError，你可以使用-XX:MaxMetaspaceSize标志设置最大空间大小，默认值为unlimited，这意味着它只受系统内存的限制，。-XX:MetaspaceSize调整标志定义元空间的初始大小如果未指定此标志，则Metaspace将根据运行时的应用程序需求动态的重新调整大小"
  },
  {
    "category": "jvm",
    "qes": "简答解释一下直接内存",
    "ans": "直接内存并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError异常出现。"
  },
  {
    "category": "jvm",
    "qes": "说一下Java内存的创建过程",
    "ans": "类检查机制->分配内存->初始化零值->设置对象头->执行init方法</br>1.类加载检查：虚拟机遇到一条new指令时，首先将去检查这个指令地参数是否能在常量池中定位到这个类地符号引用，并且检查这个符号引用代表地类是否已被加载过、解析和初始化过。如果没有，那就必须先执行相应的类加载过程</br>2.分配内存:在类加载检查通过后，接下来虚拟机将为新生对象分配内存，对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把一块确定大小的内存从Java堆中划分出来，分配方式有指针碰撞和空闲列表两种，选择哪种分配方式由Java堆是否规整决定，而Java堆是否规整又由所采集的垃圾收集器是否带有压缩整理功能决定"
  },
  {
    "category": "jvm",
    "qes": "分配内存的两种方式",
    "ans": "1.指针碰撞:适用场合:堆内存规整(即没有内存碎片)的情况下；原理：用过的内存全部整合到一边，没有用过的内存放在另一边，中间有一个分界值指针，只需要向着没用过的内存方向将该指针移动对象内存大小位置即可;GC收集器:Serial,ParNew</br> 2.空闲列表：适用场合:堆内存不规整的情况下；原理:虚拟机会维护一个列表，该列表会记录哪些内存块是可用的，在分配的时候，找一块足够大的内存块来划分给对象实例，最后更新列表记录;GC收集器:CMS"
  },
  {
    "category": "jvm",
    "qes": "内存分配的并发问题，虚拟机有哪些办法来保证线程安全?",
    "ans": "1.CAS+失败重试:CAS乐观锁的一种实现方式，所谓的乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。虚拟机采用的是CAS配上失败重试的方式保证更新操作的原子性</br>TLAB:为每一个线程预先在Eden区分配一块内存，JVM在给线程中的对象分配内存时，首先在TLAB分配，当对象大于TLAB中的剩余内存或TLAB的内存已用尽时，再采用上述的CAS进行内存分配"
  },
  {
    "category": "jvm",
    "qes": "初始化零值的过程",
    "ans": "内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值，(不包括对象头)，这一步操作保证了对象的实例字段在Java代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值"
  },
  {
    "category": "jvm",
    "qes": "设置对象头的过程",
    "ans": "初始化零值完成后，虚拟机要对对象进行必要的设置，例如这个对象是那个类的实例，如何才能找到类的元数据信息，对象的哈希码，对象的GC分代年龄等信息，这些信息才能放在对象头中。另外，根据虚拟机当前运行状态的不同，如是否启用偏置锁等，对象头会有不同的设置方法"
  },
  {
    "category": "jvm",
    "qes": "执行init的方法",
    "ans": "在上面工作都完成之后，从虚拟机的角度来看，一个新的对象已经产生了，但从Java程序的角度来看，执行new指令之后会接着执行init方法，把对象按照程序员的义元进行初始化，，这样一个真正可用的对象才算完全产生出来"
  },
  {
    "category": "jvm",
    "qes": "对象的访问定位有哪两种方式",
    "ans": "建立对象就是为了访问对象，我们的Java程序通过栈上的reference数据来操作堆上的具体对象，对象的访问方式有虚拟机实现而定，目前的主流访问方式有</br>1.句柄:如果使用句柄的话，那么java堆中会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息</br>2.直接指针:如果使用直接指针访问，那么Java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而reference中存储的直接就是对象的地址</br>这两种对象访问方式各有优势，使用句柄来访问的最大好处是reference中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而reference本身不需要修改，使用直接指针访问的最大好处是速度快，它节省了一次指针定位到时间开销"
  },
  {
    "category": "jvm",
    "qes": "说一下堆内存中对象的分配的基本策略",
    "ans": "堆内存可分为新生代(eden代->s0代->s1代)以及老年代(tentired)区属于老年代。大部分情况，对象都会首先在Eden区域分配，在一次新生代垃圾回收后，如果对象还存活，则会进入s0或者s1,并且对象的年龄还会加1，(Eden区->Survivor区后对象的初始年龄变为1)，当它的年龄增加到一定程度(默认为15岁)，就会被晋升到老年代中，并长久的存在。可以通过参数-XX:MaxTenuringThreshould来设置。</br>另外，大对象和长期存活的对象会直接进入老年代</br>总结(堆内存常见的分配策略):1.对象优先在eden区分配，2.大对象直接进入老年代，3.长期存活的对象将进入老年代"
  },
  {
    "category": "jvm",
    "qes": "Minor GC和Full GC有什么不同?",
    "ans": "大多数情况下，对象在新生代中eden区分配，当eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC。</br>1.新生代GC(Minor GC):指发生新生代的垃圾收集动作，Minor GC非常频繁，回收速度一般也比较快;</br>2.老年代GC(Major GC/Full GC)：指发生在老年代的GC，出现了Major GC经常会伴随一到两次的Minor GC(并非绝对),Major GC的速度一般会比Minor GC的馒10倍以上"
  },
  {
    "category": "jvm",
    "qes": "判断对象死亡有哪几种方法",
    "ans": "1.引用计数法:给对象中添加一个应用计数器，每当有一个地方引用它，计数器就+1;当引用失效，计数器就-1；任何时候计数器为0的对象就是不可能再被使用的；</br>可达性分析算法:这个算法的基本思想就是通过一系列的称为GC Root的对象作为起点，从这些结点开始开始向下搜索，节点所走过的路径称为引用链，当一个对象到GC Root没有任何引用链相连的话，则证明此对象是不可用的"
  },
  {
    "category": "jvm",
    "qes": "简单介绍一下强引用，软引用，弱引用，虚引用",
    "ans": "<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\"><tbody><tr><td>引用类型</td><td>被回收时间</td><td>用途</td><td>生存时间</td></tr><tr><td>强引用</td><td>从来不会</td><td>对象的一般状态</td><td>JVM停止运行时</td></tr><tr><td>软引用</td><td>内存不足时</td><td>对象缓存</td><td>内存不足时</td></tr><tr><td>弱引用</td><td>jvm垃圾回收时</td><td>对象缓存</td><td>gc运行后</td></tr><tr><td>虚引用</td><td>未知</td><td>未知</td><td>未知</td></tr></tbody></table>"
  },
  {
    "category": "jvm",
    "qes": "如何判断一个常量是废弃常量，一个类是无用类",
    "ans": "判断一个对象是否是一个废弃对象，需想到的是检测垃圾对象的两种方法：</br></br>1.引用计数法</br>给对象添加引用计数器，每当有个地方引用它，计数器就加1；引用失效就减1</br></br>     2.可达性分析算法</br></br>以根集对象为起始点进行搜索，如果对象不可达的话，即为垃圾对象。这里的根集指java栈中引用的对象、方法去常量池中引用的对象，本地方法中引用的对象等。</br></br>综上，判断一个对象是否为废弃对象，1.引用计数为0    2.对象不可达</br></br> </br></br>相比对象的判断，一个类是否为无用类，就复杂了点。类需要同时满足下面3个条件才能算无用的类：</br></br>该类所有的实例都已经被回收，也就是说java堆中不存在该类的任何实例。</br>加载该类的ClassLoader已经被回收</br>该类对应的java.lang.class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</br>Jvm可以对满足以上条件的无用类进行回收，当然这里所说的是可以，并不代表，和对象一样不使用了，就一定会被回收"
  },
  {
    "category": "jvm",
    "qes": "垃圾收集有哪些算法，各自的特点",
    "ans": "1.标记-清除算法</br>标记-清除算法分为“标记”和“清除”阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。它是最基础的收集算法，效率也很高</br>空间问题（标记清除后会产生大量不连续的碎片）</br>2. 复制算法</br>它可以将内存分为大小相同的两块，每次使用其中的一块。当这一块的内存使用完后，就将还存活的对象复制到另一块去，然后再把使用的空间一次清理掉。这样就使每次的内存回收都是对内存区间的一半进行回收。</br>3. 标记-整理算法</br>根据老年代的特点特出的一种标记算法，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象回收，而是让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存。</br>4.分代收集算法</br>因为有的对象寿命长，有的对象寿命短。应该将寿命长的对象放在一个区，寿命短的对象放在一个区。不同的区采用不同的垃圾收集算法。寿命短的区清理频次高一点，寿命长的区清理频次低一点。</br></br>分为老年代和新生代区。新生代区又被分为Eden区和两个Survivor区。新产生的对象放在新生代的Eden区，当Eden区满的时候，清理Eden区的垃圾，将存活对象放在Survivor一区。当Eden区又满的时候，清理Eden区和Survivor一区，并将存活对象放在Survivor二区。依次这样循环。当对象经过15次垃圾收集都没有被收集后，就放到老年区，中间放不下的对象，大对象也放在老年区。"
  },
  {
    "category": "jvm",
    "qes": "hotspot为什么要分为新生代和老年代？为什么要有Survivor区？",
    "ans": "HotSpot为什么要分为新生代和老年代？</br>因为有的对象寿命长，有的对象寿命短。应该将寿命长的对象放在一个区，寿命短的对象放在一个区。不同的区采用不同的垃圾收集算法。寿命短的区清理频次高一点，寿命长的区清理频次低一点。提高效率。</br></br>为什么要有Survivor区？</br>如果没有Survivor区，那么Eden每次满了清理垃圾，存活的对象被迁移到老年区，老年区满了，就会触发Full GC，Full GC是非常耗时的，解决办法：</br></br>增加老年代内存，那么老年代清理频次减少，但清理一次花费时间更长。</br>减少老年代内存，老年代一次FullGC时间更少，频率增加。</br>都不行，只有再加一层Survivor。将Eden区满了的对象，添加到Survivor区，等对象反复清理几遍之后都没清理掉，再放到老年区，这样老年区的压力就会小很多。即Survivor相当于一个筛子，筛掉生命周期短的，将生命周期长的放到老年代区，减少老年代被清理的次数。"
  },
  {
    "category": "jvm",
    "qes": "JVM有哪些常见的垃圾回收器？各自的特点是什么？",
    "ans": "<article class=\"article fmt article-content\" data-id=\"1190000037547621\" data-license=\"\">\n                                <h2 id=\"item-1\">前言</h2><p>之前我们讲解了<code>jvm</code>的<code>组成结构</code>与<code>垃圾回收算法</code>等知识点，今天我们来讲讲jvm最重要的<code>堆内存</code>是如何使用<code>垃圾回收器</code>进行垃圾回收，并且如何使用<code>命令</code>去配置使用这些垃圾回收器。</p><h2 id=\"item-2\">堆内存详解</h2><p><span class=\"img-wrap\"></span></p><p>上面这个图大家应该已经很明白了吧。大家就可以理解成一个<code>房子</code>被分成了几个<code>房间</code>，每个房间的作用不同而已，有的是婴儿住的，有的是父母住的，有的是爷爷奶奶住的</p><ul><li>堆内存被划分为<code>两块</code>，一块的<code>年轻代</code>，另一块是<code>老年代</code>。</li><li>年轻代又分为<code>Eden</code>和<code>survivor</code>。他俩空间大小比例默认为8:2,</li><li>幸存区又分为<code>s0</code>和<code>s1</code>。这两个空间大小是一模一样的，就是一对双胞胎，他俩是1:1的比例</li></ul><h3 id=\"item-2-1\">堆内存垃圾回收过程</h3><h4>第一步</h4><p><code>新生成</code>的对象首先放到<code>Eden</code>区，当Eden区<code>满了</code>会触发<code>Minor GC</code>。</p><h4>第二步</h4><p>第一步GC活下来的对象，会被移动到<code>survivor</code>区中的S0区，S0区满了之后会触发<code>Minor GC</code>，S0区存活下来的对象会被移动到S1区，S0区空闲。</p><p>S1满了之后在GC，存活下来的再次移动到S0区，S1区空闲，这样反反复复GC，每GC一次，对象的年龄就<code>涨一岁</code>，达到某个值后（15），就会进入<code>老年代</code>。</p><h4>第三步</h4><p>在发生一次<code>Minor GC</code>后（前提条件），老年代可能会出现<code>Major GC</code>，这个视垃圾回收器而定。</p><h4>Full GC触发条件</h4><ul><li>手动调用System.gc，会不断的执行Full GC</li><li>老年代空间不足/满了</li><li>方法区空间不足/满了</li></ul><h4>注意</h4><p>们需要记住一个单词：<code>stop-the-world</code>。它会在任何一种GC算法中发生。stop-the-world 意味着JVM因为需要执行GC而<code>停止</code>应用程序的执行。</p><p>当stop-the-world 发生时，除GC所需的线程外，所有的<code>线程</code>都进入<code>等待</code>状态，直到GC任务完成。GC优化很多时候就是减少stop-the-world 的发生。</p><h4>回收哪些区域的对象</h4><p>需要注意的是，JVM GC只回收<code>堆内存</code>和<code>方法区内</code>的对象。而<code>栈内存</code>的数据，在超出作用域后会被JVM自动释放掉，所以其不在JVM GC的管理范围内。</p><h3 id=\"item-2-2\">堆内存常见参数配置</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-Xms</td><td>堆内存初始大小，单位m、g</td></tr><tr><td>-Xmx</td><td>堆内存最大允许大小，一般不要大于物理内存的80%</td></tr><tr><td>-XX:PermSize</td><td>非堆内存初始大小，一般应用设置初始化200m，最大1024m就够了</td></tr><tr><td>-XX:MaxPermSize</td><td>非堆内存最大允许大小</td></tr><tr><td>-XX:NewSize（-Xns）</td><td>年轻代内存初始大小</td></tr><tr><td>-XX:MaxNewSize（-Xmn）</td><td>年轻代内存最大允许大小</td></tr><tr><td>-XX:SurvivorRatio=8</td><td>年轻代中Eden区与Survivor区的容量比例值，默认为8，即8:1</td></tr><tr><td>-Xss</td><td>堆栈内存大小</td></tr><tr><td>-XX:NewRatio=老年代/新生代</td><td>设置老年代和新生代的大小比例</td></tr><tr><td>-XX:+PrintGC</td><td>jvm启动后，只要遇到GC就会打印日志</td></tr><tr><td>-XX:+PrintGCDetails</td><td>查看GC详细信息，包括各个区的情况</td></tr><tr><td>-XX:MaxDirectMemorySize</td><td>在NIO中可以直接访问<strong>直接内存</strong>，这个就是设置它的大小，不设置默认就是最大堆空间的值-Xmx</td></tr><tr><td>-XX:+DisableExplicitGC</td><td>关闭System.gc()</td></tr><tr><td>-XX:MaxTenuringThreshold</td><td>垃圾可以进入老年代的年龄</td></tr><tr><td>-Xnoclassgc</td><td>禁用垃圾回收</td></tr><tr><td>-XX:TLABWasteTargetPercent</td><td>TLAB占eden区的百分比，默认是1%</td></tr><tr><td>-XX:+CollectGen0First</td><td>FullGC时是否先YGC，默认false</td></tr></tbody></table><h3 id=\"item-2-3\">TLAB 内存</h3><p>TLAB全称是Thread Local Allocation Buffer即<code>线程本地分配缓存</code>，从名字上看是一个线程专用的内存分配区域，是为了加速对象分配而生的。</p><p>每一个线程都会产生一个TLAB，该线程独享的工作区域，java虚拟机使用这种TLAB区来避免多线程冲突问题，提高了对象分配的效率。</p><p>TLAB空间一般不会太大，当大对象无法在TLAB分配时，则会直接分配到堆上。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-Xx:+UseTLAB</td><td>使用TLAB</td></tr><tr><td>-XX:+TLABSize</td><td>设置TLAB大小</td></tr><tr><td>-XX:TLABRefillWasteFraction</td><td>设置维护进入TLAB空间的单个对象大小，他是一个比例值，默认为64，即如果对象大于整个空间的1/64，则在堆创建</td></tr><tr><td>-XX:+PrintTLAB</td><td>查看TLAB信息</td></tr><tr><td>-Xx:ResizeTLAB</td><td>自调整TLABRefillWasteFraction阀值。</td></tr></tbody></table><p><span class=\"img-wrap\"><img referrerpolicy=\"no-referrer\" src=\"/img/bVcHHZJ\" alt=\"image.png\" title=\"image.png\"></span></p><h2 id=\"item-3\">垃圾回收器总览</h2><p><span class=\"img-wrap\"><img referrerpolicy=\"no-referrer\" src=\"/img/bVcHHZL\" alt=\"image.png\" title=\"image.png\"></span></p><p>新生代可配置的回收器：Serial、ParNew、Parallel Scavenge</p><p>老年代配置的回收器：CMS、Serial Old、Parallel Old</p><p>新生代和老年代区域的回收器之间进行连线，说明他们之间可以搭配使用。</p><h2 id=\"item-4\">新生代垃圾回收器</h2><h3 id=\"item-4-4\">Serial 垃圾回收器</h3><p>Serial收集器是最基本的、发展历史最悠久的收集器。俗称为：<code>串行回收器</code>，采用<code>复制算法</code>进行垃圾回收</p><h4>特点</h4><p>串行回收器是指使用单线程进行垃圾回收的回收器。每次回收时，串行回收器只有一个工作线程。</p><p>对于并行能力较弱的单CPU计算机来说，串行回收器的专注性和独占性往往有更好的性能表现。</p><p>它存在Stop The World问题，及垃圾回收时，要停止程序的运行。</p><p>使用<code>-XX:+UseSerialGC</code>参数可以设置新生代使用这个串行回收器</p><h3 id=\"item-4-5\">ParNew 垃圾回收器</h3><p>ParNew其实就是Serial的<code>多线程</code>版本，除了使用多线程之外，其余参数和Serial一模一样。俗称：<code>并行垃圾回收器</code>，采用<code>复制算法</code>进行垃圾回收</p><h4>特点</h4><p>ParNew默认开启的线程数与CPU数量相同，在CPU核数很多的机器上，可以通过参数<code>-XX:ParallelGCThreads</code>来设置线程数。</p><p>它是目前新生代首选的垃圾回收器，因为除了ParNew之外，它是唯一一个能与老年代CMS配合工作的。</p><p>它同样存在Stop The World问题</p><p>使用<code>-XX:+UseParNewGC</code>参数可以设置新生代使用这个并行回收器</p><h3 id=\"item-4-6\">ParallelGC 回收器</h3><p>ParallelGC使用复制算法回收垃圾，也是多线程的。</p><h4>特点</h4><p>就是非常关注系统的吞吐量，<code>吞吐量</code>=<code>代码运行时间</code>/(<code>代码运行时间</code>+<code>垃圾收集时间</code>)</p><p><code>-XX:MaxGCPauseMillis</code>：设置最大垃圾收集停顿时间，可用把虚拟机在GC停顿的时间控制在MaxGCPauseMillis范围内，如果希望减少GC停顿时间可以将MaxGCPauseMillis设置的很小，但是会导致<code>GC频繁</code>，从而增加了GC的<code>总时间</code>，<code>降低</code>了<code>吞吐量</code>。所以需要根据实际情况设置该值。</p><p><code>-Xx:GCTimeRatio</code>：设置吞吐量大小，它是一个0到100之间的整数，默认情况下他的取值是<code>99</code>，那么系统将花费不超过<code>1/(1+n)</code>的时间用于垃圾回收，也就是<code>1/(1+99)=1%</code>的时间。</p><p>另外还可以指定<code>-XX:+UseAdaptiveSizePolicy</code>打开自适应模式，在这种模式下，新生代的大小、eden、from/to的比例，以及晋升老年代的对象年龄参数会被自动调整，以达到在堆大小、吞吐量和停顿时间之间的平衡点。</p><p>使用-XX:+UseParallelGC参数可以设置新生代使用这个并行回收器</p><h2 id=\"item-5\">老年代垃圾回收器</h2><h3 id=\"item-5-7\">SerialOld 垃圾回收器</h3><p>SerialOld是Serial回收器的<code>老年代</code>回收器版本，它同样是一个<code>单线程</code>回收器。</p><h4>用途</h4><ul><li>一个是在JDK1.5及之前的版本中与Parallel Scavenge收集器搭配使用，</li><li>另一个就是作为CMS收集器的后备预案，如果CMS出现Concurrent Mode Failure，则SerialOld将作为后备收集器。</li></ul><p><code>使用算法</code>：标记 - 整理算法</p><h3 id=\"item-5-8\">ParallelOldGC 回收器</h3><p>老年代<code>ParallelOldGC</code>回收器也是一种多线程的回收器，和新生代的ParallelGC回收器一样，也是一种关注吞吐量的回收器，他使用了<code>标记压缩算法</code>进行实现。</p><p><code>-XX:+UseParallelOldGc</code>进行设置老年代使用该回收器</p><p><code>-XX:+ParallelGCThreads</code>也可以设置垃圾收集时的线程数量。</p><h3 id=\"item-5-9\">CMS 回收器</h3><p>CMS全称为:Concurrent Mark Sweep意为并发标记清除，他使用的是<code>标记清除法</code>。主要关注系统停顿时间。</p><p>使用<code>-XX:+UseConcMarkSweepGC</code>进行设置老年代使用该回收器。</p><p>使用<code>-XX:ConcGCThreads</code>设置并发线程数量。</p><h4>特点</h4><p>CMS并不是独占的回收器，也就说CMS回收的过程中，应用程序仍然在不停的工作，又会有新的垃圾不断的产生，所以在使用CMS的过程中应该确保应用程序的内存足够可用。</p><p>CMS不会等到应用程序<code>饱和</code>的时候才去回收垃圾，而是在某一阀值的时候开始回收，回收阀值可用指定的参数进行配置：<code>-XX:CMSInitiatingoccupancyFraction</code>来指定，默认为<code>68</code>，也就是说当老年代的空间<code>使用率</code>达到<code>68%</code>的时候，会<code>执行</code>CMS回收。</p><p>如果内存使用率增长的很快，在CMS执行的过程中，已经出现了内存不足的情况，此时CMS回收就会失败，虚拟机将启动老年代<code>串行</code>回收器；<code>SerialOldGC</code>进行垃圾回收，这会导致应用程序中断，直到垃圾回收完成后才会正常工作。</p><p>这个过程GC的停顿时间可能较长，所以<code>-XX:CMSInitiatingoccupancyFraction</code>的设置要根据实际的情况。</p><p>之前我们在学习算法的时候说过，标记清除法有个缺点就是存在<code>内存碎片</code>的问题，那么CMS有个参数设置<code>-XX:+UseCMSCompactAtFullCollecion</code>可以使CMS回收完成之后进行一次<code>碎片整理</code>。</p><p><code>-XX:CMSFullGCsBeforeCompaction</code>参数可以设置进行多少次CMS回收之后，对内存进行一次<code>压缩</code>。</p><h3 id=\"item-5-10\">G1 回收器</h3><p>篇幅太长，我们下篇文章讲解！！！</p><p><span class=\"img-wrap\"><img referrerpolicy=\"no-referrer\" src=\"/img/bVcHHZW\" alt=\"image.png\" title=\"image.png\"></span></p><h2 id=\"item-6\">IT 老哥</h2><p><em><strong><code>一个在大厂做高级Java开发的程序猿，一路自学走到今天，关注 老哥，我们一起来自学技术</code></strong></em></p>\n                            </article>"
  },
  {
    "category": "jvm",
    "qes": "Java类加载过程",
    "ans": "<div id=\"content_views\" class=\"htmledit_views\">\n                    <p><strong><span style=\"font-family:Arial Black; font-size:18px\"><span style=\"color:#003300\">转载请注明出处：</span><a target=\"_blank\" href=\"http://blog.csdn.net/ns_code/article/details/17881581\" rel=\"noopener noreferrer\"><span style=\"color:#660000\">http://blog.csdn.net/ns_code/article/details/17881581</span></a></span></strong></p> \n<p><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><br> </span></p> \n<h1><a name=\"t0\"></a><a name=\"t0\"></a><span style=\"font-family:Microsoft YaHei; font-size:18px; color:#000099\">类加载过程</span></h1> \n<p><span style=\"font-family:Microsoft YaHei; font-size:14px\"><span style=\"color:#003300\"><strong>&nbsp; &nbsp;&nbsp;</strong></span>类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载、验证、准备、解析、初始化、使用和卸载七个阶段。它们开始的顺序如下图所示：</span></p> \n<p style=\"text-align:center\"><img alt=\"\" src=\"https://img-blog.csdn.net/20140105211344671\"><br> </p> \n<p><span style=\"font-family:Microsoft YaHei; font-size:14px\">&nbsp; &nbsp; 其中<span style=\"color:#ff0000\">类加载的过程包括了加载、验证、准备、解析、初始化五个阶段。</span>在这五个阶段中，加载、验证、准备和初始化这四个阶段发生的顺序是确定的，而解析阶段则不一定，它在某些情况下可以在初始化阶段之后开始，这是为了支持Java语言的运行时绑定（也成为动态绑定或晚期绑定）。另外注意这里的几个阶段是按顺序<strong>开始</strong>，而不是按顺序<strong>进行</strong>或<strong>完成</strong>，因为这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段。</span></p> \n<p><span style=\"font-size:14px\"><span style=\"font-family:'Microsoft YaHei'\">&nbsp; &nbsp; 这里简要说明下Java中的绑定：</span><span style=\"line-height:26px\"><span style=\"font-family:Microsoft YaHei\">绑定指的是把一个方法的调用与方法所在的类(方法主体)关联起来，对java来说，绑定分为静态绑定和动态绑定：</span></span></span></p> \n<p></p> \n<ul><li><span style=\"font-family:Microsoft YaHei; font-size:14px\"><span style=\"line-height:26px\">静态绑定：即前期绑定。<span style=\"line-height:26px\">在程序执行前方法已经被绑定，此时由编译器或其它连接程序实现。针对java，简单的可以理解为程序编译期的绑定。java当中的方法只有final，static，private和构造方法是前期绑定的。</span></span></span></li><li><span style=\"font-family:Microsoft YaHei; font-size:14px\"><span style=\"line-height:26px\">动态绑定：即晚期绑定，也叫运行时绑定。<span style=\"line-height:26px\">在运行时根据具体对象的类型进行绑定。在java中，几乎所有的方法都是后期绑定的。</span></span></span></li></ul> \n<div>\n <span style=\"font-family:Microsoft YaHei; font-size:14px\"><span style=\"line-height:26px\">&nbsp; &nbsp; 下面详细讲述类加载过程中每个阶段所做的工作。</span></span>\n</div> \n<div>\n <span style=\"font-family:Microsoft YaHei; font-size:14px\"><span style=\"line-height:26px\"><br> </span></span>\n</div> \n<h2><a name=\"t1\"></a><a name=\"t1\"></a><span style=\"color:#0099\"><span style=\"font-family:Microsoft YaHei; font-size:14px\">&nbsp; &nbsp;<span style=\"color:#000099\">加载</span></span></span></h2> \n<p></p> \n<p><span style=\"font-family:Microsoft YaHei; font-size:14px\">&nbsp; &nbsp; 加载时类加载过程的第一个阶段，在加载阶段，虚拟机需要完成以下三件事情：</span></p> \n<p><span style=\"font-family:Microsoft YaHei; font-size:14px\"><span style=\"color:#000099\">&nbsp; &nbsp; 1、通过一个类的全限定名来获取其定义的二进制字节流。</span></span></p> \n<p><span style=\"font-family:Microsoft YaHei; font-size:14px\"><span style=\"color:#000099\">&nbsp; &nbsp; 2、将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</span></span></p> \n<p><span style=\"font-family:Microsoft YaHei; font-size:14px\"><span style=\"color:#000099\">&nbsp; &nbsp; 3、在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口。</span></span></p> \n<p><span style=\"font-family:Microsoft YaHei; font-size:14px\">&nbsp; &nbsp; 注意，这里第1条中的二进制字节流并不只是单纯地从Class文件中获取，比如它还可以从Jar包中获取、从网络中获取（最典型的应用便是Applet）、由其他文件生成（JSP应用）等。</span></p> \n<p><span style=\"font-family:Microsoft YaHei; font-size:14px\">&nbsp; &nbsp; 相对于类加载的其他阶段而言，加载阶段（准确地说，是加载阶段获取类的二进制字节流的动作）是可控性最强的阶段，因为开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载。</span></p> \n<p><span style=\"font-family:Microsoft YaHei; font-size:14px\">&nbsp; &nbsp; 加载阶段完成后，虚拟机外部的 二进制字节流就按照虚拟机所需的格式存储在方法区之中，而且在Java堆中也创建一个java.lang.Class类的对象，这样便可以通过该对象访问方法区中的这些数据。</span></p> \n<p><span style=\"font-family:Microsoft YaHei; font-size:14px\">&nbsp; &nbsp; <span style=\"color:#ff0000\"> 说到加载，不得不提到类加载器，下面就具体讲述下类加载器。</span></span></p> \n<p><span style=\"font-family:Microsoft YaHei; font-size:14px\">&nbsp; &nbsp; 类加载器虽然只用于实现类的加载动作，但它在Java程序中起到的作用却远远不限于类的加载阶段。对于任意一个类，都需要由它的类加载器和这个类本身一同确定其在就Java虚拟机中的唯一性，也就是说，即使两个类来源于同一个Class文件，只要加载它们的类加载器不同，那这两个类就必定不相等。这里的“相等”包括了代表类的Class对象的equals（）、isAssignableFrom（）、isInstance（）等方法的返回结果，也包括了使用instanceof关键字对对象所属关系的判定结果。</span></p> \n<p><span style=\"font-family:Microsoft YaHei; font-size:14px\">&nbsp; &nbsp; 站在Java虚拟机的角度来讲，只存在两种不同的类加载器：</span></p> \n<p></p> \n<ul><li><span style=\"font-family:Microsoft YaHei\"><span style=\"font-size:14px\">启动类加载器：它使用C++实现（这里仅限于Hotspot，也就是JDK1.5之后默认的虚拟机，有很多其他的虚拟机是用Java语言实现的），是虚拟机自身的一部分。</span></span></li><li><span style=\"font-family:Microsoft YaHei\"><span style=\"font-size:14px\">所有其他的类加载器：这些类加载器都由Java语言实现，独立于虚拟机之外，并且全部继承自抽象类java.lang.ClassLoader，这些类加载器需要由启动类加载器加载到内存中之后才能去加载其他的类。</span></span></li></ul> \n<p></p> \n<p><span style=\"font-family:Microsoft YaHei; font-size:14px\">&nbsp; &nbsp; 站在Java开发人员的角度来看，类加载器可以大致划分为以下三类：</span></p> \n<p></p> \n<ul><li><span style=\"font-family:Microsoft YaHei; font-size:14px\">启动类加载器：Bootstrap ClassLoader，跟上面相同。它负责加载存放在JDK\\jre\\lib(JDK代表JDK的安装目录，下同)下，或被-Xbootclasspath参数指定的路径中的，并且能被虚拟机识别的类库（如rt.jar，所有的java.*开头的类均被<span style=\"font-family:'Microsoft YaHei'; font-size:14px\">Bootstrap ClassLoader加载</span>）。启动类加载器是无法被Java程序直接引用的。</span></li><li><span style=\"font-family:Microsoft YaHei; font-size:14px\">扩展类加载器：Extension ClassLoader，该加载器由sun.misc.Launcher$ExtClassLoader实现，它负责加载JDK\\jre\\lib\\ext目录中，或者由java.ext.dirs系统变量指定的路径中的所有类库（如javax.*开头的类），开发者可以直接使用扩展类加载器。</span></li><li><span style=\"font-family:Microsoft YaHei; font-size:14px\">应用程序类加载器：Application ClassLoader，该类加载器由sun.misc.Launcher$AppClassLoader来实现，它负责加载用户类路径（ClassPath）所指定的类，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，<span style=\"color:#ff0000\">一般情况下这个就是程序中默认的类加载器。</span></span></li></ul> \n<p></p> \n<p><span style=\"font-family:Microsoft YaHei; font-size:14px\">&nbsp; &nbsp; &nbsp;应用程序都是由这三种类加载器互相配合进行加载的，如果有必要，我们还可以加入自定义的类加载器。</span><span style=\"line-height:24px; text-indent:2em\"><span style=\"font-family:Microsoft YaHei; font-size:14px\"><span style=\"color:#ff0000\">因为JVM自带的ClassLoader只是懂得从本地文件系统加载标准的java class文件，因此如果编写了自己的ClassLoader，便可以做到如下几点：</span></span></span></p> \n<p style=\"text-indent:24px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px; line-height:24px; text-indent:2em\">&nbsp;1）在执行非置信代码之前，自动验证数字签名。</span></p> \n<p style=\"text-indent:24px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px; line-height:24px; text-indent:2em\">&nbsp;2）动态地创建符合用户特定需要的定制化构建类。</span></p> \n<p style=\"text-indent:24px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px; line-height:24px; text-indent:2em\">&nbsp;3）从特定的场所取得java class，例如数据库中和网络中。</span></p> \n<p style=\"text-indent:24px\"><span style=\"line-height:24px; font-family:'Microsoft YaHei'; font-size:14px\">事实上当使用Applet的时候，就用到了特定的ClassLoader，因为这时需要从网络上加载java class，并且要检查相关的安全信息，</span><span style=\"line-height:24px; font-family:'Microsoft YaHei'; font-size:14px; text-indent:2em\">应用服务器也大都使用了自定义的ClassLoader技术。</span></p> \n<p></p> \n<p><span style=\"font-family:'Microsoft YaHei'; font-size:14px\">&nbsp; &nbsp; 这几种类加载器的层次关系如下图所示：</span></p> \n<p style=\"text-align:center\"><img alt=\"\" src=\"https://img-blog.csdn.net/20140105211242593\"><br> </p> \n<p style=\"text-align:left\"><span style=\"font-family:Microsoft YaHei; font-size:14px\">&nbsp; &nbsp; 这种层次关系称为类加载器的<span style=\"color:#ff0000\">双亲委派模型</span>。我们把每一层上面的类加载器叫做当前层类加载器的父加载器，当然，它们之间的父子关系并不是通过继承关系来实现的，而是使用组合关系来复用父加载器中的代码。该模型在JDK1.2期间被引入并广泛应用于之后几乎所有的Java程序中，但它并不是一个强制性的约束模型，而是Java设计者们推荐给开发者的一种类的加载器实现方式。</span></p> \n<p style=\"text-align:left\"><span style=\"font-family:Microsoft YaHei; font-size:14px\">&nbsp; &nbsp; 双亲委派模型的工作流程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法完成该加载，子加载器才会尝试自己去加载该类。</span></p> \n<p style=\"text-align:left\"><span style=\"font-family:Microsoft YaHei; font-size:14px\">&nbsp; &nbsp; 使用双亲委派模型来组织类加载器之间的关系，<span style=\"color:#ff0000\">有一个很明显的好处，就是Java类随着它的类加载器（说白了，就是它所在的目录）一起具备了一种带有优先级的层次关系</span>，这对于保证Java程序的稳定运作很重要。例如，类java.lang.Object类存放在JDK\\jre\\lib下的rt.jar之中，因此无论是哪个类加载器要加载此类，最终都会委派给启动类加载器进行加载，这边保证了Object类在程序中的各种类加载器中都是同一个类。</span></p> \n<p style=\"text-align:left\"><span style=\"font-family:Microsoft YaHei; font-size:14px\"><br> </span></p> \n<p style=\"text-align:left\"></p> \n<h2 style=\"font-family:'Microsoft YaHei'; font-size:14px\"><a name=\"t2\"></a><a name=\"t2\"></a><span style=\"color:#0099\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\">&nbsp; &nbsp;<span style=\"color:#000099\">验证</span></span></span></h2> \n<span style=\"font-family:Microsoft YaHei; font-size:14px\">&nbsp; &nbsp; 验证的目的是为了确保Class文件中的字节流包含的信息符合当前虚拟机的要求，而且不会危害虚拟机自身的安全。不同的虚拟机对类验证的实现可能会有所不同，但大致都会完成以下四个阶段的验证：<span style=\"color:#ff0000\">文件格式的验证、元数据的验证、字节码验证和符号引用验证。</span></span> \n<p></p> \n<p style=\"text-align:left\"></p> \n<ul><li><span style=\"font-family:Microsoft YaHei\"><span style=\"font-size:14px\">文件格式的验证：验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理，该验证的主要目的是保证输入的字节流能正确地解析并存储于方法区之内。经过该阶段的验证后，字节流才会进入内存的方法区中进行存储，后面的三个验证都是基于方法区的存储结构进行的。<br> </span></span></li><li><span style=\"font-family:Microsoft YaHei\"><span style=\"font-size:14px\">元数据验证：对类的元数据信息进行语义校验（其实就是对类中的各数据类型进行语法校验），保证不存在不符合Java语法规范的元数据信息。</span></span></li><li><span style=\"font-family:Microsoft YaHei\"><span style=\"font-size:14px\">字节码验证：该阶段验证的主要工作是进行数据流和控制流分析，对类的方法体进行校验分析，以保证被校验的类的方法在运行时不会做出危害虚拟机安全的行为。</span></span></li><li><span style=\"font-family:Microsoft YaHei\"><span style=\"font-size:14px\">符号引用验证：这是最后一个阶段的验证，它发生在虚拟机将符号引用转化为直接引用的时候（解析阶段中发生该转化，后面会有讲解），主要是对类自身以外的信息（常量池中的各种符号引用）进行匹配性的校验。</span></span></li></ul> \n<div>\n <span style=\"font-family:Microsoft YaHei\"><span style=\"font-size:14px\"><br> </span></span>\n</div> \n<p></p> \n<p style=\"text-align:left\"><span style=\"font-family:Microsoft YaHei; font-size:14px\"></span></p> \n<h2 style=\"font-family:'Microsoft YaHei'\"><a name=\"t3\"></a><a name=\"t3\"></a><span style=\"color:#0099\"><span style=\"font-size:14px\">&nbsp; &nbsp;<span style=\"color:#000099\">准备</span></span></span></h2> \n<span style=\"font-family:Microsoft YaHei; font-size:14px\">&nbsp; &nbsp; <span style=\"color:#ff0000\"> 准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中分配。</span><span style=\"color:#ff0000\">对于该阶段有以下几点需要注意：</span></span> \n<p></p> \n<p style=\"text-align:left\"><span style=\"font-family:Microsoft YaHei; font-size:14px\"><span style=\"color:#ff0000\">&nbsp; &nbsp;&nbsp;</span><span style=\"color:#0099\">1、这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。</span></span></p> \n<p style=\"text-align:left\"><span style=\"font-family:Microsoft YaHei; font-size:14px\"><span style=\"color:#0099\">&nbsp; &nbsp; 2、这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值。</span></span></p> \n<p style=\"text-align:left\"><span style=\"font-family:Microsoft YaHei\"><span style=\"font-size:14px\"><span style=\"color:#000099\">&nbsp; &nbsp;</span>假设一个类变量的定义为：</span></span></p> \n<p style=\"text-align:center\"><span style=\"font-family:Microsoft YaHei\"><span style=\"font-size:14px\">public static int value = 3；</span></span></p> \n<p style=\"text-align:left\"><span style=\"font-family:Microsoft YaHei\"><span style=\"font-size:14px\">&nbsp; &nbsp; 那么变量value在准备阶段过后的初始值为0，而不是3，因为这时候尚未开始执行任何Java方法，而把value赋值为3的putstatic指令是在程序编译后，存放于类构造器&lt;clinit&gt;（）方法之中的，<span style=\"color:#ff0000\">所以把value赋值为3的动作将在初始化阶段才会执行。</span></span></span></p> \n<p style=\"text-align:left\"><span style=\"font-family:Microsoft YaHei; font-size:14px\">&nbsp; &nbsp; 下表列出了Java中所有基本数据类型以及reference类型的默认零值：</span></p> \n<p style=\"text-align:center\"><span style=\"font-family:Microsoft YaHei; font-size:14px\"><img alt=\"\" src=\"https://img-blog.csdn.net/20140105195119234\"><br> </span></p> \n<p style=\"text-align:left\"><span style=\"font-family:Microsoft YaHei; font-size:14px\"><span style=\"color:#ff0000\">&nbsp; &nbsp;</span>这里还需要注意如下几点：</span></p> \n<p style=\"text-align:left\"></p> \n<ul><li><span style=\"font-family:'Microsoft YaHei'; font-size:14px; color:#ff00\">对基本数据类型来说，对于类变量（static）和全局变量，如果不显式地对其赋值而直接使用，则系统会为其赋予默认的零值，而对于局部变量来说，在使用前必须显式地为其赋值，否则编译时不通过。</span></li><li><span style=\"font-family:'Microsoft YaHei'; font-size:14px; color:#ff00\">对于同时被static和final修饰的常量，必须在声明的时候就为其显式地赋值，否则编译时不通过；而只被final修饰的常量则既可以在声明时显式地为其赋值，也可以在类初始化时显式地为其赋值，总之，在使用前必须为其显式地赋值，系统不会为其赋予默认零值。</span></li><li><span style=\"font-family:'Microsoft YaHei'; font-size:14px; color:#ff00\">对于引用数据类型reference来说，如数组引用、对象引用等，如果没有对其进行显式地赋值而直接使用，系统都会为其赋予默认的零值，即null。</span></li><li><span style=\"font-family:'Microsoft YaHei'; font-size:14px; color:#ff00\">如果在数组初始化时没有对数组中的各元素赋值，那么其中的元素将根据对应的数据类型而被赋予默认的零值。</span></li></ul> \n<p></p> \n<p><span style=\"font-family:'Microsoft YaHei'; font-size:14px\">&nbsp; &nbsp;&nbsp;<span style=\"color:#000099\">3</span><span style=\"font-family:'Microsoft YaHei'; font-size:14px; color:#0099\">、如果类字段的字段属性表中存在ConstantValue属性，即同时被final和static修饰，那么在准备阶段变量value就会被初始化为ConstValue属性所指定的值。</span></span></p> \n<p><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"color:#000099\">&nbsp; &nbsp;</span>假设上面的类变量value被定义为：</span>&nbsp;</span></span></p> \n<p style=\"text-align:center\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\">public static final int value = 3；</span></span></p> \n<p style=\"text-align:left\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\">&nbsp; &nbsp; 编译时Javac将会为value生成ConstantValue属性，在准备阶段虚拟机就会根据ConstantValue的设置将value赋值为3。回忆<a target=\"_blank\" href=\"http://blog.csdn.net/ns_code/article/details/17845821\" rel=\"noopener noreferrer\"><strong>上一篇博文</strong></a>中对象被动引用的第2个例子，便是这种情况。<span style=\"color:#ff0000\">我们可以理解为static final常量在编译期就将其结果放入了调用它的类的常量池中。</span></span></span></p> \n<p style=\"text-align:left\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"color:#ff0000\"><br> </span></span></span></p> \n<p style=\"text-align:center\"></p> \n<h2 style=\"text-align:left; font-family:'Microsoft YaHei'; font-size:14px\"><a name=\"t4\"></a><a name=\"t4\"></a><span style=\"color:#0099\"><span style=\"font-size:14px\">&nbsp; &nbsp;<span style=\"color:#000099\">解析</span></span></span></h2> \n<div style=\"text-align:left; font-family:'Microsoft YaHei'; font-size:14px\">\n <span style=\"font-size:14px\"><span style=\"color:#000099\">&nbsp; &nbsp;</span>解析阶段是虚拟机将常量池中的符号引用转化为直接引用的过程。在<a target=\"_blank\" href=\"http://blog.csdn.net/ns_code/article/details/17675609\" rel=\"noopener noreferrer\"><strong>Class类文件结构</strong></a>一文中已经比较过了符号引用和直接引用的区别和关联，这里不再赘述。前面说解析阶段可能开始于初始化之前，也可能在初始化之后开始，虚拟机会根据需要来判断，到底是在类被加载器加载时就对常量池中的符号引用进行解析（初始化之前），还是等到一个符号引用将要被使用前才去解析它（初始化之后）。</span>\n</div> \n<div style=\"text-align:left; font-family:'Microsoft YaHei'; font-size:14px\">\n <span style=\"font-size:14px\">&nbsp; &nbsp; 对同一个符号引用进行多次解析请求时很常见的事情，虚拟机实现可能会对第一次解析的结果进行缓存（在运行时常量池中记录直接引用，并把常量标示为已解析状态），从而避免解析动作重复进行。</span>\n</div> \n<div style=\"text-align:left; font-family:'Microsoft YaHei'; font-size:14px\">\n <span style=\"font-size:14px\">&nbsp; &nbsp; 解析动作主要针对类或接口、字段、类方法、接口方法四类符号引用进行，分别对应于常量池中的CONSTANT_Class_info、</span>CONSTANT_Fieldref_info、CONSTANT_Methodref_info、CONSTANT_InterfaceMethodref_info四种常量类型。\n</div> \n<div style=\"text-align:left; font-family:'Microsoft YaHei'; font-size:14px\">\n <span style=\"font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"></span></span></span>\n</div> \n<div style=\"text-align:left; font-family:'Microsoft YaHei'; font-size:14px\">\n <span style=\"font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\">&nbsp; &nbsp; <strong>1、类或接口的解析：</strong>判断所要转化成的直接引用是对数组类型，还是普通的对象类型的引用，从而进行不同的解析。</span></span></span></span>\n</div> \n<div style=\"text-align:left; font-family:'Microsoft YaHei'; font-size:14px\">\n <span style=\"font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\">&nbsp; &nbsp; <strong>2、字段解析：</strong>对字段进行解析时，会先在本类中查找是否包含有简单名称和字段描述符都与目标相匹配的字段，如果有，则查找结束；如果没有，则会按照继承关系从上往下递归搜索该类所实现的各个接口和它们的父接口，还没有，则按照继承关系从上往下递归搜索其父类，直至查找结束，查找流程如下图所示：</span></span></span></span>\n</div> \n<div style=\"text-align:center; font-family:'Microsoft YaHei'; font-size:14px\">\n <span style=\"font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><img alt=\"\" src=\"https://img-blog.csdn.net/20140105220608531\"><br> </span></span></span></span>\n</div> \n<div style=\"font-family:'Microsoft YaHei'; font-size:14px\">\n <span style=\"color:#0099\"><span style=\"font-size:14px\"><br> </span></span>\n</div> \n<div style=\"text-align:left\">\n <span style=\"font-family:'Microsoft YaHei'; font-size:14px; color:#000099\">&nbsp;</span>\n <span style=\"font-family:Microsoft YaHei\"><span style=\"font-size:14px\">&nbsp;</span><span style=\"font-size:14px\"> 从下面一段代码的执行结果中很容易看出来字段解析的搜索顺序：</span></span>\n</div> \n<div style=\"text-align:left\">\n <span style=\"font-family:Microsoft YaHei\"><span style=\"font-size:14px\"></span></span>\n <pre><code class=\"language-java hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Super</span></span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> m = <span class=\"hljs-number\">11</span>;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">\t<span class=\"hljs-keyword\">static</span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">\t\tSystem.out.println(<span class=\"hljs-string\">\"执行了super类静态语句块\"</span>);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">\t}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Father</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Super</span></span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> m = <span class=\"hljs-number\">33</span>;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">\t<span class=\"hljs-keyword\">static</span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">\t\tSystem.out.println(<span class=\"hljs-string\">\"执行了父类静态语句块\"</span>);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"13\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">\t}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"14\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"15\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"16\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Child</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Father</span></span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"17\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">\t<span class=\"hljs-keyword\">static</span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"18\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">\t\tSystem.out.println(<span class=\"hljs-string\">\"执行了子类静态语句块\"</span>);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"19\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">\t}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"20\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"21\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"22\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StaticTest</span></span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"23\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span></span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"24\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">\t\tSystem.out.println(Child.m);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"25\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">\t}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"26\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li></ol></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.signin(event)\"></div></pre>&nbsp; &nbsp; 执行结果如下：\n</div> \n<div style=\"text-align:left\">\n <span style=\"font-family:Microsoft YaHei\"><span style=\"font-size:14px\"><span style=\"color:#009900\">&nbsp; &nbsp; 执行了super类静态语句块<br> &nbsp; &nbsp; 执行了父类静态语句块<br> &nbsp; &nbsp; 33</span><br> &nbsp; &nbsp; 如果注释掉Father类中对m定义的那一行，则输出结果如下：</span></span>\n</div> \n<div style=\"text-align:left\">\n <span style=\"font-family:Microsoft YaHei\"><span style=\"font-size:14px; color:#009900\">&nbsp; &nbsp; 执行了super类静态语句块<br> &nbsp; &nbsp; 11</span></span>\n</div> \n<div style=\"text-align:left\">\n <span style=\"font-family:Microsoft YaHei\"><span style=\"font-size:14px\"><span style=\"color:#000099\">&nbsp; &nbsp;</span>另外，很明显这就是<a target=\"_blank\" href=\"http://blog.csdn.net/ns_code/article/details/17845821\" rel=\"noopener noreferrer\"><strong>上篇博文</strong></a>中的第1个例子的情况，这里我们便可以分析如下：static变量发生在静态解析阶段，也即是初始化之前，此时已经将字段的符号引用转化为了内存引用，也便将它与对应的类关联在了一起，由于在子类中没有查找到与m相匹配的字段，那么m便不会与子类关联在一起，因此并不会触发子类的初始化。</span></span>\n</div> \n<div style=\"text-align:left\">\n <span style=\"font-family:Microsoft YaHei; font-size:14px\"><span style=\"color:#000099\">&nbsp; &nbsp;</span>&nbsp;<span style=\"color:#ff0000\">最后需要注意：理论上是按照上述顺序进行搜索解析，但在实际应用中，虚拟机的编译器实现可能要比上述规范要求的更严格一些。如果有一个同名字段同时出现在该类的接口和父类中，或同时在自己或父类的接口中出现，编译器可能会拒绝编译。</span>如果对上面的代码做些修改，将Super改为接口，并将Child类继承Father类且实现Super接口，那么在编译时会报出如下错误：</span>\n</div> \n<div>\n <span style=\"font-family:Microsoft YaHei; font-size:14px\"><span style=\"color:#009900\">StaticTest.java:24: 对 m 的引用不明确，Father 中的 变量 m 和 Super 中的 变量 m<br> 都匹配<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(Child.m);<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ^<br> 1 错误</span><br> </span>\n</div> \n<span style=\"font-family:Microsoft YaHei; font-size:14px\"></span> \n<div style=\"text-align:left\">\n <span style=\"color:#000099\">&nbsp; &nbsp;</span>\n <strong>&nbsp; &nbsp; &nbsp;3、类方法解析：</strong>对类方法的解析与对字段解析的搜索步骤差不多，只是多了判断该方法所处的是类还是接口的步骤，而且对类方法的匹配搜索，是先搜索父类，再搜索接口。\n</div> \n<div style=\"text-align:left\"> \n <div style=\"font-family:'Microsoft YaHei'; font-size:14px\">\n  <span style=\"color:#000099\">&nbsp; &nbsp;</span>\n  <strong>&nbsp;4、接口方法解析：</strong>与类方法解析步骤类似，知识接口不会有父类，因此，只递归向上搜索父接口就行了。\n </div> \n <br> \n <h2 style=\"font-family:'Microsoft YaHei'; font-size:14px\"><a name=\"t5\"></a><a name=\"t5\"></a>&nbsp; &nbsp; <span style=\"color:#000099\"> 初始化</span></h2> \n <span style=\"font-family:Microsoft YaHei; font-size:14px\"><span style=\"color:#000099\">&nbsp; &nbsp;&nbsp;</span>初始化是类加载过程的最后一步，到了此阶段，才真正开始执行类中定义的Java程序代码。在准备阶段，类变量已经被赋过一次系统要求的初始值，而在初始化阶段，则是根据程序员通过程序指定的主观计划去初始化类变量和其他资源，或者可以从另一个角度来表达：初始化阶段是执行类构造器&lt;clinit&gt;()方法的过程。</span>\n</div> \n<div style=\"text-align:left\">\n <span style=\"font-family:Microsoft YaHei; font-size:14px\"><span style=\"color:#ff0000\">&nbsp; &nbsp;</span><span style=\"color:#ff0000\">这里简单说明下&lt;clinit&gt;（）方法的执行规则:</span></span>\n</div> \n<div style=\"text-align:left\">\n <span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"color:#000099\">&nbsp; &nbsp; 1、&lt;clinit&gt;（）方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的，静态语句块中只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句中可以赋值，但是不能访问。</span></span>\n</div> \n<div style=\"text-align:left\">\n <span style=\"color:#000099\"><span style=\"font-family:Microsoft YaHei; font-size:14px\">&nbsp; &nbsp; 2、<span style=\"font-family:'Microsoft YaHei'; font-size:14px\">&lt;clinit&gt;（）方法与实例构造器&lt;init&gt;（）方法（</span></span><span style=\"font-family:'Microsoft YaHei'; font-size:14px\">类的构造函数</span><span style=\"font-family:'Microsoft YaHei'; font-size:14px\">）不同，它不需要显式地调用父类构造器，虚拟机会保证在子类的<span style=\"font-family:'Microsoft YaHei'; font-size:14px\">&lt;clinit&gt;（）方法执行之前，父类的<span style=\"font-family:'Microsoft YaHei'; font-size:14px\">&lt;clinit&gt;（）方法已经执行完毕。因此，在虚拟机中第一个被执行的<span style=\"font-family:'Microsoft YaHei'; font-size:14px\">&lt;clinit&gt;（）方法的类肯定是java.lang.Object。</span></span></span></span></span>\n</div> \n<div style=\"text-align:left\">\n <span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"color:#000099\">&nbsp; &nbsp; 3、<span style=\"font-family:'Microsoft YaHei'; font-size:14px\">&lt;clinit&gt;（）方法对于类或接口来说并不是必须的，如果一个类中没有静态语句块，也没有对类变量的赋值操作，那么编译器可以不为这个类生成&lt;clinit&gt;（）方法。</span></span></span></span></span></span>\n</div> \n<div style=\"text-align:left\">\n <span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"color:#000099\">&nbsp; &nbsp; 4、接口中不能使用静态语句块，但仍然有类变量（final static）初始化的赋值操作，因此接口与类一样会生成<span style=\"font-family:'Microsoft YaHei'; font-size:14px\">&lt;clinit&gt;（）方法。但是接口鱼类不同的是：执行接口的<span style=\"font-family:'Microsoft YaHei'; font-size:14px\">&lt;clinit&gt;（）方法不需要先执行父接口的<span style=\"font-family:'Microsoft YaHei'; font-size:14px\">&lt;clinit&gt;（）方法，只有当父接口中定义的变量被使用时，父接口才会被初始化。另外，接口的实现类在初始化时也一样不会执行接口的<span style=\"font-family:'Microsoft YaHei'; font-size:14px\">&lt;clinit&gt;（）方法。</span></span></span></span></span></span></span></span></span></span>\n</div> \n<div style=\"text-align:left\">\n <span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"color:#000099\">&nbsp; &nbsp; 5、虚拟机会保证一个类的&lt;clinit&gt;（）方法在多线程环境中被正确地加锁和同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的<span style=\"font-family:'Microsoft YaHei'; font-size:14px\">&lt;clinit&gt;（）方法，其他线程都需要阻塞等待，直到活动线程执行<span style=\"font-family:'Microsoft YaHei'; font-size:14px\">&lt;clinit&gt;（）方法完毕。如果在一个类的&lt;clinit&gt;（）方法中有耗时很长的操作，那就可能造成多个线程阻塞，在实际应用中这种阻塞往往是很隐蔽的。</span></span></span></span>\n</div> \n<div style=\"text-align:left\">\n <span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><br> </span></span>\n</div> \n<div style=\"text-align:left\">\n <span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\">&nbsp; &nbsp; 下面给出一个简单的例子，以便更清晰地说明如上规则：</span></span>\n</div> \n<div style=\"text-align:left\">\n <span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"></span></span>\n <pre><code class=\"language-java hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Father</span></span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">1</span>;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">\t<span class=\"hljs-keyword\">static</span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">\t\ta = <span class=\"hljs-number\">2</span>;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">\t}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Child</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Father</span></span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> b = a;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ClinitTest</span></span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"13\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span></span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"14\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">\t\tSystem.out.println(Child.b);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"15\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">\t}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"16\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li></ol></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.signin(event)\"></div></pre>&nbsp;\n <span style=\"font-family:Microsoft YaHei; font-size:14px\">&nbsp;<span style=\"color:#33cc00\">&nbsp;</span><span style=\"color:#009900\">执行上面的代码，会打印出2，也就是说b的值被赋为了2。</span></span>\n</div> \n<div style=\"text-align:left\">\n <span style=\"font-family:Microsoft YaHei; font-size:14px\">&nbsp; &nbsp; 我们来看得到该结果的步骤。首先在准备阶段为类变量分配内存并设置类变量初始值，这样A和B均被赋值为默认值0，而后再在调用&lt;clinit&gt;（）方法时给他们赋予程序中指定的值。当我们调用Child.b时，触发Child的&lt;clinit&gt;（）方法，根据规则2，在此之前，要先执行完其父类Father的&lt;clinit&gt;（）方法，又根据规则1，在执行&lt;clinit&gt;（）方法时，需要按static语句或static变量赋值操作等在代码中出现的顺序来执行相关的static语句，因此当触发执行Father的&lt;clinit&gt;（）方法时，会先将a赋值为1，再执行static语句块中语句，将a赋值为2，而后再执行Child类的&lt;clinit&gt;（）方法，这样便会将b的赋值为2.</span>\n</div> \n<div style=\"text-align:left\">\n <span style=\"font-family:Microsoft YaHei; font-size:14px\">&nbsp; &nbsp;<span style=\"color:#009900\"> 如果我们颠倒一下Father类中“public static int a = 1;”语句和“static语句块”的顺序，程序执行后，则会打印出1。</span>很明显是根据规则1，执行Father的&lt;clinit&gt;（）方法时，根据顺序先执行了static语句块中的内容，后执行了“public static int a = 1;”语句。</span>\n</div> \n<div style=\"text-align:left\">\n <span style=\"font-family:Microsoft YaHei; font-size:14px\">&nbsp; &nbsp; 另外，在颠倒二者的顺序之后，如果在static语句块中对a进行访问（比如将a赋给某个变量），在编译时将会报错，因为根据规则1，它只能对a进行赋值，而不能访问。</span>\n <br> \n <br> \n <br> \n</div> \n<div style=\"text-align:left\">\n <span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"></span></span></span> \n <h1><a name=\"t6\"></a><a name=\"t6\"></a><span style=\"font-family:'Microsoft YaHei'; font-size:18px; color:#0099\"><span style=\"color:#000099\">总结</span></span></h1> &nbsp;\n <span style=\"font-family:'Microsoft YaHei'; font-size:14px\">&nbsp; &nbsp; 整个类加载过程中，除了在加载阶段用户应用程序可以自定义类加载器参与之外，其余所有的动作完全由虚拟机主导和控制。到了初始化才开始执行类中定义的Java程序代码（亦及字节码），但这里的执行代码只是个开端，它仅限于<span style=\"font-family:'Microsoft YaHei'; font-size:14px\">&lt;clinit&gt;（）方法。类加载过程中主要是将Class文件（准确地讲，应该是类的二进制字节流）加载到虚拟机内存中，真正执行字节码的操作，在加载完成后才真正开始。</span></span>\n</div> \n<div style=\"text-align:left\">\n <span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><br> </span></span></span>\n</div> \n<div style=\"text-align:left\">\n <span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><br> </span></span></span>\n</div> \n<div style=\"text-align:left\">\n <span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><br> </span></span></span>\n</div> \n<div style=\"text-align:left\">\n <span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><span style=\"font-family:'Microsoft YaHei'; font-size:14px\"><br> </span></span></span>\n</div>\n                </div>"
  },
  {
    "category": "jvm",
    "qes": "双亲委派模型",
    "ans": "<div id=\"cnblogs_post_body\" class=\"blogpost-body\">\n    <h1 id=\"类加载器\"><span style=\"font-size: 18pt\">加载类的开放性</span></h1>\n<p><span style=\"font-size: 18px\">&nbsp; &nbsp; &nbsp; &nbsp; 我们在了解双亲委派模型之前，不得不先了解一下什么是类加载器。虚拟机设计团队之初是希望类加载过程“通过一个类的全限定名来获取描述该类的二进制字节流”这个动作能放到虚拟机外部实现，以便于让程序自己决定如何获取该类，实现这个动作的代码的工具成为类加载器。</span></p>\n<p><span style=\"font-size: 18px\">&nbsp; &nbsp; &nbsp; &nbsp; 可能很多人觉得类加载器，顾名思义，就是个加载类的嘛，有啥大不了的，但是类加载这个过程是很严格的，对于任意一个类，我们都需要由加载他的类加载器和类的本身来决定该类在虚拟机之中的唯一性。什么意思呢？？</span><span style=\"font-size: 18px\">就是说我们的虚拟机要比较两个类是否相等，那前提条件是就是这两个类必须是在同一个类加载器加载的，如果两个类都不是由同一个加载器加载的，那么这俩类就一定不相等，所以就没有比较的意义！</span></p>\n<div class=\"cnblogs_Highlighter sh-gutter\">\n<div><div id=\"highlighter_968202\" class=\"syntaxhighlighter  java\"><div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"java keyword\">public</code> <code class=\"java keyword\">class</code> <code class=\"java plain\">ClassLoaderTest {</code></div><div class=\"line number2 index1 alt1\">&nbsp;</div><div class=\"line number3 index2 alt2\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java keyword\">public</code> <code class=\"java keyword\">static</code> <code class=\"java keyword\">void</code> <code class=\"java plain\">main(String[] args) </code><code class=\"java keyword\">throws</code> <code class=\"java plain\">Exception {</code></div><div class=\"line number4 index3 alt1\">&nbsp;</div><div class=\"line number5 index4 alt2\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java plain\">ClassLoader myLoader = </code><code class=\"java keyword\">new</code> <code class=\"java plain\">ClassLoader() {</code></div><div class=\"line number6 index5 alt1\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java color1\">@Override</code></div><div class=\"line number7 index6 alt2\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java keyword\">public</code> <code class=\"java plain\">Class&lt;?&gt; loadClass(String name) </code><code class=\"java keyword\">throws</code> <code class=\"java plain\">ClassNotFoundException {</code></div><div class=\"line number8 index7 alt1\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java keyword\">try</code> <code class=\"java plain\">{</code></div><div class=\"line number9 index8 alt2\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java plain\">String fileName = name.substring(name.lastIndexOf(</code><code class=\"java string\">\".\"</code><code class=\"java plain\">) + </code><code class=\"java value\">1</code><code class=\"java plain\">) + </code><code class=\"java string\">\".class\"</code><code class=\"java plain\">;</code></div><div class=\"line number10 index9 alt1\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java plain\">InputStream is = getClass().getResourceAsStream(fileName);</code></div><div class=\"line number11 index10 alt2\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java keyword\">if</code> <code class=\"java plain\">(is == </code><code class=\"java keyword\">null</code><code class=\"java plain\">) {</code></div><div class=\"line number12 index11 alt1\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java keyword\">return</code> <code class=\"java keyword\">super</code><code class=\"java plain\">.loadClass(name);</code></div><div class=\"line number13 index12 alt2\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java plain\">}</code></div><div class=\"line number14 index13 alt1\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java keyword\">byte</code><code class=\"java plain\">[] b = </code><code class=\"java keyword\">new</code> <code class=\"java keyword\">byte</code><code class=\"java plain\">[is.available()];</code></div><div class=\"line number15 index14 alt2\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java plain\">is.read(b);</code></div><div class=\"line number16 index15 alt1\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java keyword\">return</code> <code class=\"java plain\">defineClass(name, b, </code><code class=\"java value\">0</code><code class=\"java plain\">, b.length);</code></div><div class=\"line number17 index16 alt2\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java plain\">} </code><code class=\"java keyword\">catch</code> <code class=\"java plain\">(IOException e) {</code></div><div class=\"line number18 index17 alt1\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java keyword\">throw</code> <code class=\"java keyword\">new</code> <code class=\"java plain\">ClassNotFoundException(name);</code></div><div class=\"line number19 index18 alt2\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java plain\">}</code></div><div class=\"line number20 index19 alt1\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java plain\">}</code></div><div class=\"line number21 index20 alt2\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java plain\">};</code></div><div class=\"line number22 index21 alt1\">&nbsp;</div><div class=\"line number23 index22 alt2\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java plain\">Object obj = myLoader.loadClass(</code><code class=\"java string\">\"org.fenixsoft.classloading.ClassLoaderTest\"</code><code class=\"java plain\">).newInstance();</code></div><div class=\"line number24 index23 alt1\">&nbsp;</div><div class=\"line number25 index24 alt2\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java plain\">System.out.println(obj.getClass());</code></div><div class=\"line number26 index25 alt1\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java plain\">System.out.println(obj </code><code class=\"java keyword\">instanceof</code> <code class=\"java plain\">org.fenixsoft.classloading.ClassLoaderTest);</code></div><div class=\"line number27 index26 alt2\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java plain\">}</code></div><div class=\"line number28 index27 alt1\"><code class=\"java plain\">}</code></div></div></td></tr></tbody></table></div></div>\n</div>\n<p>　　<span style=\"font-size: 18px\">就比如上面这段代码，代码运行结果很令人失望，虽然打印出的类路径是相同的，但是比较后的结果却是false，这是为啥啊？好气啊，明明类路径一样，但是结果却不同？</span></p>\n<p><span style=\"font-size: 18px\">&nbsp; &nbsp; &nbsp; 这是因为，我们自己实现了属于我们自己的类加载器，我们选择了我们自己的加载路径去加载该类，而另一个同类路径名的类却是由另一个加载器（<strong>应用程序类加载器</strong>）加载的，只要不是同一个类加载器加载的类，一定不是同一个类！！</span></p>\n<p>&nbsp;</p>\n<p><strong><span style=\"font-size: 18pt\">双亲委派模型</span></strong></p>\n<p><span style=\"font-size: 18px\">&nbsp; &nbsp; &nbsp; 从java虚拟机角度来讲，只存在两种不同的类加载器：</span></p>\n<p><span style=\"font-size: 18px\">&nbsp; &nbsp; &nbsp; &nbsp;（1）一种是启动类加载器，由C++语言实现的，属于虚拟机的一部分；</span></p>\n<p><span style=\"font-size: 18px\">&nbsp; &nbsp; &nbsp; &nbsp;（2）一种是所有的其他类加载器，这些都是由Java实现的，独立于虚拟机外部，继承自java.lang.ClassLoader；</span></p>\n<p><span style=\"font-size: 18px\">&nbsp; &nbsp; &nbsp; 但是从<strong>开发人员角度来讲</strong>，应该分的再细一些，绝大部分程序都使用到了以下三种系统提供的类加载器：</span></p>\n<p><span style=\"font-size: 18px\">&nbsp; &nbsp; &nbsp; &nbsp;（1）启动类加载器，该加载器是C++实现的，它负责加载存放于&lt;JAVA_HOME&gt;\\lib目录下的类，它是仅仅按照文件的名字来识别的，名字不符合的类就算放到该目录下，也是毫无卵用的.....</span></p>\n<p><span style=\"font-size: 18px\">&nbsp; &nbsp; &nbsp; &nbsp;（2）扩展类加载器，它是负责加载&lt;JAVA_HOME&gt;\\lib\\Ext目录下的；</span></p>\n<p><span style=\"font-size: 18px\">&nbsp; &nbsp; &nbsp; &nbsp;（3）应用程序类加载器，这个类也被称为系统类加载器，它是负责用户类路径classpath上指定的类库，开发者可以直接使用这个加载器；</span></p>\n<p><span style=\"font-size: 18px\">应用程序都是由这三种加载器相互配合进行加载的，有必要的话，还可以实现属于自己的类加载器，这几种加载器关系如图：</span></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<img src=\"https://images2018.cnblogs.com/blog/1229366/201806/1229366-20180624145029820-870443098.png\" alt=\"\" width=\"847\" height=\"626\"></span></p>\n<p><span style=\"font-size: 18px\">&nbsp; &nbsp; &nbsp; &nbsp;这种层次结构我们就称之为双亲委派模型，可以很直观的看出除了顶层的启动类加载器外，其他的都有属于自己的父类加载器。但是我们在这里不要混淆一个概念，就是继承（Inheritance），这个结构图并不是继承关系而是通过组合的方式来实现向上委托的.......</span></p>\n<p><span style=\"font-size: 18px\">&nbsp; &nbsp; &nbsp; &nbsp;双亲委派的工作流程就是：如果一个类加载器收到了类加载的请求，它是不会自己立马亲自动手去加载的（比较懒，哈哈！），而是把该请求委托给父类，每一层都是如此，到了顶层后，这时就无法再向上传递了，所有的请求都集中到了启动类加载器，当父类反馈自己无法满足这个请求时，这时就会再把请求一层层向下传递。</span></p>\n<p><span style=\"font-size: 18px\">&nbsp; &nbsp; &nbsp; &nbsp;这样的好处是啥？？相信大家看这种层次结构应该很清晰，但是这有什么意义吗？比如java.lang.Object，他是存在rt.jar里的，不论哪种加载器，是系统自带的也好还是我们自己实现的也好，都会把请求一层层的往上委托，直到启动类加载器，而启动类加载器一看，自己是有这个类的，所以加载，因此Object在程序的各个类加载器的加载下永远都是同一个类。反之，没有双亲委派模型，任由各个类加载器自己去加载的话，比如我们开发者自己写了Object类，包名也是java.lang，那么系统中就会出现各种各样的Object，每一个层级的类加载器都加载了自己具有个性的Object，那么作为程序中这么基础这么重要的Object，他的唯一性得不到保证，应用程序就会杂乱不堪。</span></p>\n<p><span style=\"font-size: 18px\">&nbsp; &nbsp; &nbsp; &nbsp;双亲委派模型的作用想必到这里很多人应该清楚了，觉得：“哇！这个模型还真的是很强大呢...”。他的实现也是非常简单的：</span></p>\n<div class=\"cnblogs_Highlighter sh-gutter\">\n<div><div id=\"highlighter_743271\" class=\"syntaxhighlighter  java\"><div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"java keyword\">protected</code> <code class=\"java keyword\">synchronized</code> <code class=\"java plain\">Class&lt;?&gt; loadClass(String name,</code><code class=\"java keyword\">boolean</code> <code class=\"java plain\">resolve)</code><code class=\"java keyword\">throws</code> <code class=\"java plain\">ClassNotFoundException{</code></div><div class=\"line number2 index1 alt1\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java comments\">//check the class has been loaded or not</code></div><div class=\"line number3 index2 alt2\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java plain\">Class c = findLoadedClass(name);</code></div><div class=\"line number4 index3 alt1\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java keyword\">if</code><code class=\"java plain\">(c == </code><code class=\"java keyword\">null</code><code class=\"java plain\">){</code></div><div class=\"line number5 index4 alt2\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java keyword\">try</code><code class=\"java plain\">{</code></div><div class=\"line number6 index5 alt1\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java keyword\">if</code><code class=\"java plain\">(parent != </code><code class=\"java keyword\">null</code><code class=\"java plain\">){</code></div><div class=\"line number7 index6 alt2\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java plain\">c = parent.loadClass(name,</code><code class=\"java keyword\">false</code><code class=\"java plain\">);</code></div><div class=\"line number8 index7 alt1\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java plain\">}</code><code class=\"java keyword\">else</code><code class=\"java plain\">{</code></div><div class=\"line number9 index8 alt2\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java plain\">c = findBootstrapClassOrNull(name);</code></div><div class=\"line number10 index9 alt1\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java plain\">}</code></div><div class=\"line number11 index10 alt2\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java plain\">}</code><code class=\"java keyword\">catch</code><code class=\"java plain\">(ClassNotFoundException e){</code></div><div class=\"line number12 index11 alt1\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java comments\">//if throws the exception ,the father can not complete the load</code></div><div class=\"line number13 index12 alt2\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java plain\">}</code></div><div class=\"line number14 index13 alt1\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java keyword\">if</code><code class=\"java plain\">(c == </code><code class=\"java keyword\">null</code><code class=\"java plain\">){</code></div><div class=\"line number15 index14 alt2\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java plain\">c = findClass(name);</code></div><div class=\"line number16 index15 alt1\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java plain\">}</code></div><div class=\"line number17 index16 alt2\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java plain\">}</code></div><div class=\"line number18 index17 alt1\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java keyword\">if</code><code class=\"java plain\">(resolve){</code></div><div class=\"line number19 index18 alt2\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java plain\">resolveClass(c);</code></div><div class=\"line number20 index19 alt1\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java plain\">}</code></div><div class=\"line number21 index20 alt2\"><code class=\"java spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"java keyword\">return</code> <code class=\"java plain\">c;</code></div><div class=\"line number22 index21 alt1\"><code class=\"java plain\">}</code></div></div></td></tr></tbody></table></div></div>\n</div>\n<p><span style=\"font-size: 18px\">&nbsp; &nbsp; &nbsp; &nbsp;从图中的代码，我们大致可以看出这个委托机制是如何实现的，当一个加载器收到请求后，首先会判断一下当前这个类是否已经被加载过，如果没有被加载的话，开始委托父类加载器了（就是这么懒，哈哈），如果没有父类的话，就默认使用启动类加载器。如果抛异常了，就代表当前类加载器的父类无法加载，满足不了请求，那么此时只能自己亲自出马了！！所以什么事还是自己来做的靠谱啊哈哈。</span></p>\n<p>&nbsp;</p>\n<p><strong><span style=\"font-size: 18pt\">总结</span></strong></p>\n<p><span style=\"font-size: 18px\">&nbsp; &nbsp; &nbsp; &nbsp;当然，这种模型一直都不是强制性的，而是推荐我们这么做的，往年就出现过打破该机制的事件，</span><span style=\"font-size: 18px\">典型的例子就是JNDI服务，他的代码是交给启动类加载器去实现的，但是当JNDI要对资源进行集中化管理时，他需要调用其他公司实现并部署在应用程序的classpath下的JNDI接口，因为这些代码是需要我们开发者自己来实现的，这时启动类加载器是无法识别这些类的，于是乎出现了一种线程上下文加载器，JNDI服务可以调用该加载器去加载所需要的代码，就是通过父类加载器去请求子类加载器来实现的，这已经很明显的违背了双亲委派模型。</span></p>\n</div>"
  },
  {
    "category": "jvm",
    "qes": "Java内存溢出(OOM)异常完全指南",
    "ans": "<div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"htmledit_views\">\n                    <blockquote> \n <p>本文分析什么情况会导致这些异常出现，提供示例代码的同时为您提供解决指南。<br><strong>Nikita Salnikov-Tarnovski</strong><br> Plumbr Co-Founder and VP of Engineering<br> 本文内容来源于<a href=\"https://link.jianshu.com?t=https%3A%2F%2Fplumbr.eu%2Foutofmemoryerror\">Plumbr</a>，对原文内容有删减和补充</p> \n</blockquote> \n<p>这也许是目前最为完整的Java OOM异常的解决指南。</p> \n<p><span style=\"color:#f33b45;\"><strong>1、<code>java.lang.OutOfMemoryError:Java heap space</code></strong></span></p> \n<p>Java应用程序在启动时会指定所需要的内存大小，它被分割成两个不同的区域：<span style=\"color:#f33b45;\"><code>Heap space（堆空间）</code></span>和<span style=\"color:#f33b45;\"><code>Permgen（永久代）</code></span>：</p> \n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNzU3MjQtYTY4NTE5NTMzZDU5OTk2ZS5wbmc_aW1hZ2VNb2dyMi9hdXRvLW9yaWVudC9zdHJpcCU3Q2ltYWdlVmlldzIvMi93LzI3MS9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p> \n<p>JVM内存模型示意图</p> \n<p><br> 这两个区域的大小可以在JVM（Java虚拟机）启动时通过参数<span style=\"color:#f33b45;\"><code>-Xmx</code></span>和<span style=\"color:#f33b45;\"><code>-XX:MaxPermSize</code></span>设置，如果你没有显式设置，则将使用特定平台的默认值。</p> \n<p>&nbsp;</p> \n<p>当应用程序试图向堆空间添加更多的数据，但堆却没有足够的空间来容纳这些数据时，将会触发<span style=\"color:#f33b45;\"><code>java.lang.OutOfMemoryError: Java heap space</code></span>异常。需要注意的是：即使有足够的物理内存可用，只要达到堆空间设置的大小限制，此异常仍然会被触发。</p> \n<p><strong>原因分析</strong></p> \n<p>触发<span style=\"color:#f33b45;\"><code>java.lang.OutOfMemoryError: Java heap space</code></span>最常见的原因就是应用程序需要的堆空间是XXL号的，但是JVM提供的却是S号。解决方法也很简单，提供更大的堆空间即可。除了前面的因素还有更复杂的成因：</p> \n<ul><li>流量/数据量峰值：应用程序在设计之初均有用户量和数据量的限制，某一时刻，当用户数量或数据量突然达到一个峰值，并且这个峰值已经超过了设计之初预期的阈值，那么以前正常的功能将会停止，并触发<span style=\"color:#f33b45;\"><code>java.lang.OutOfMemoryError: Java heap space</code></span>异常。</li><li>内存泄漏：特定的编程错误会导致你的应用程序不停的消耗更多的内存，每次使用有内存泄漏风险的功能就会留下一些不能被回收的对象到堆空间中，随着时间的推移，泄漏的对象会消耗所有的堆空间，最终触发<span style=\"color:#f33b45;\"><code>java.lang.OutOfMemoryError: Java heap space</code></span>错误。</li></ul>\n<p><strong>示例</strong></p> \n<p><strong>①、简单示例</strong></p> \n<p>首先看一个非常简单的示例，下面的代码试图创建2 x 1024 x 1024个元素的整型数组，当你尝试编译并指定12M堆空间运行时（java -Xmx12m OOM）将会失败并抛出<span style=\"color:#f33b45;\"><code>java.lang.OutOfMemoryError: Java heap space</code></span>错误，而当你指定13M堆空间时，将正常的运行。</p> \n<pre class=\"has\" name=\"code\"><code class=\"language-java hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">OOM</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> SIZE=<span class=\"hljs-number\">2</span>*<span class=\"hljs-number\">1024</span>*<span class=\"hljs-number\">1024</span>;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] a)</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">int</span>[] i = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[SIZE];</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>运行如下：</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs groovy\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attr\">D:</span>\\&gt;javac OOM.java</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attr\">D:</span>\\&gt;java -Xmx12m OOM</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">Exception <span class=\"hljs-keyword\">in</span> thread <span class=\"hljs-string\">\"main\"</span> java.lang.<span class=\"hljs-attr\">OutOfMemoryError:</span> Java heap space</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        at OOM.main(OOM.<span class=\"hljs-attr\">java:</span><span class=\"hljs-number\">4</span>)</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attr\">D:</span>\\&gt;java -Xmx13m OOM</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p><strong>②、内存泄漏示例</strong></p> \n<p>在Java中，当开发者创建一个新对象（比如：<span style=\"color:#f33b45;\"><code>new Integer(5)</code></span>）时，不需要自己开辟内存空间，而是把它交给JVM。在应用程序整个生命周期类，JVM负责检查哪些对象可用，哪些对象未被使用。未使用对象将被丢弃，其占用的内存也将被回收，这一过程被称为垃圾回收。JVM负责垃圾回收的模块集合被称为垃圾回收器（<span style=\"color:#f33b45;\"><code>GC</code></span>）。</p> \n<p>Java的内存自动管理机制依赖于GC定期查找未使用对象并删除它们。Java中的内存泄漏是由于GC无法识别一些已经不再使用的对象，而这些未使用的对象一直留在堆空间中，这种堆积最终会导致<span style=\"color:#f33b45;\"><code>java.lang.OutOfMemoryError: Java heap space</code></span>错误。</p> \n<p>我们可以非常容易的写出导致内存泄漏的Java代码：</p> \n<pre class=\"has\" name=\"code\"><code class=\"language-java hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">KeylessEntry</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Key</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        Integer id;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        Key(Integer id) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            <span class=\"hljs-keyword\">this</span>.id = id;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-meta\">@Override</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">hashCode</span><span class=\"hljs-params\">()</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            <span class=\"hljs-keyword\">return</span> id.hashCode();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"13\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"14\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"15\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"16\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"17\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        Map&lt;Key,String&gt; m = <span class=\"hljs-keyword\">new</span> HashMap&lt;Key,String&gt;();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"18\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-keyword\">true</span>) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"19\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">10000</span>;i++) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"20\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                <span class=\"hljs-keyword\">if</span>(!m.containsKey(<span class=\"hljs-keyword\">new</span> Key(i))) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"21\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                    m.put(<span class=\"hljs-keyword\">new</span> Key(i), <span class=\"hljs-string\">\"Number:\"</span> + i);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"22\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"23\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"24\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"25\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"26\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>代码中<span style=\"color:#f33b45;\"><code>HashMap</code></span>为本地缓存，第一次while循环，会将10000个元素添加到缓存中。后面的while循环中，由于key已经存在于缓存中，缓存的大小将一直会维持在10000。但事实真的如此吗？由于<span style=\"color:#f33b45;\"><code>Key</code></span>实体没有实现<span style=\"color:#f33b45;\"><code>equals()</code></span>方法，导致for循环中每次执行<span style=\"color:#f33b45;\"><code>m.containsKey(new Key(i))</code></span>结果均为<span style=\"color:#f33b45;\"><code>false</code></span>，其结果就是<span style=\"color:#f33b45;\"><code>HashMap</code></span>中的元素将一直增加。</p> \n<p>随着时间的推移，越来越多的<span style=\"color:#f33b45;\"><code>Key</code></span>对象进入堆空间且不能被垃圾收集器回收（m为局部变量，GC会认为这些对象一直可用，所以不会回收），直到所有的堆空间被占用，最后抛出<span style=\"color:#f33b45;\"><code>java.lang.OutOfMemoryError:Java heap space</code></span>。</p> \n<blockquote> \n <p>上面的代码直接运行可能很久也不会抛出异常，可以在启动时使用-Xmx参数，设置堆内存大小，或者在for循环后打印HashMap的大小，执行后会发现HashMap的size一直再增长。</p> \n</blockquote> \n<p>解决方法也非常简单，只要<span style=\"color:#f33b45;\"><code>Key</code></span>实现自己的<span style=\"color:#f33b45;\"><code>equals</code></span>方法即可：</p> \n<pre class=\"has\" name=\"code\"><code class=\"language-java hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-function\">Override</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">equals</span><span class=\"hljs-params\">(Object o)</span> {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-keyword\">boolean</span> response = <span class=\"hljs-keyword\">false</span>;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-keyword\">if</span> (o <span class=\"hljs-keyword\">instanceof</span> Key) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        response = (((Key)o).id).equals(<span class=\"hljs-keyword\">this</span>.id);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-keyword\">return</span> response;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p><strong>解决方案</strong></p> \n<p>第一个解决方案是显而易见的，你应该确保有足够的堆空间来正常运行你的应用程序，在JVM的启动配置中增加如下配置：</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs diff\"><span class=\"hljs-deletion\">-Xmx1024m</span>\n</code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>上面的配置分配1024M堆空间给你的应用程序，当然你也可以使用其他单位，比如用G表示GB，K表示KB。下面的示例都表示最大堆空间为1GB：</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs css\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-selector-tag\">java</span> <span class=\"hljs-selector-tag\">-Xmx1073741824</span> <span class=\"hljs-selector-tag\">com</span><span class=\"hljs-selector-class\">.mycompany</span><span class=\"hljs-selector-class\">.MyClass</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-selector-tag\">java</span> <span class=\"hljs-selector-tag\">-Xmx1048576k</span> <span class=\"hljs-selector-tag\">com</span><span class=\"hljs-selector-class\">.mycompany</span><span class=\"hljs-selector-class\">.MyClass</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-selector-tag\">java</span> <span class=\"hljs-selector-tag\">-Xmx1024m</span> <span class=\"hljs-selector-tag\">com</span><span class=\"hljs-selector-class\">.mycompany</span><span class=\"hljs-selector-class\">.MyClass</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-selector-tag\">java</span> <span class=\"hljs-selector-tag\">-Xmx1g</span> <span class=\"hljs-selector-tag\">com</span><span class=\"hljs-selector-class\">.mycompany</span><span class=\"hljs-selector-class\">.MyClass</span></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>然后，更多的时候，单纯地增加堆空间不能解决所有的问题。如果你的程序存在内存泄漏，一味的增加堆空间也只是推迟<span style=\"color:#f33b45;\"><code>java.lang.OutOfMemoryError: Java heap space</code></span>错误出现的时间而已，并未解决这个隐患。除此之外，垃圾收集器在GC时，应用程序会停止运行直到GC完成，而增加堆空间也会导致GC时间延长，进而影响程序的吞吐量。</p> \n<p>如果你想完全解决这个问题，那就好好提升自己的编程技能吧，当然运用好<span style=\"color:#f33b45;\"><code>Debuggers, profilers, heap dump analyzers</code></span>等工具，可以让你的程序最大程度的避免内存泄漏问题。</p> \n<p><span style=\"color:#f33b45;\"><strong>2、<code>java.lang.OutOfMemoryError:GC overhead limit exceeded</code></strong></span></p> \n<p>Java运行时环境（<span style=\"color:#f33b45;\"><code>JRE</code></span>）包含一个内置的垃圾回收进程，而在许多其他的编程语言中，开发者需要手动分配和释放内存。</p> \n<p>Java应用程序只需要开发者分配内存，每当在内存中特定的空间不再使用时，一个单独的垃圾收集进程会清空这些内存空间。垃圾收集器怎样检测内存中的某些空间不再使用已经超出本文的范围，但你只需要相信GC可以做好这些工作即可。</p> \n<p>默认情况下，当应用程序花费超过98%的时间用来做GC并且回收了不到2%的堆内存时，会抛出<span style=\"color:#f33b45;\"><code>java.lang.OutOfMemoryError:GC overhead limit exceeded</code></span>错误。具体的表现就是你的应用几乎耗尽所有可用内存，并且GC多次均未能清理干净。</p> \n<p><strong>原因分析</strong></p> \n<p><span style=\"color:#f33b45;\"><code>java.lang.OutOfMemoryError:GC overhead limit exceeded</code></span>错误是一个信号，示意你的应用程序在垃圾收集上花费了太多时间但却没有什么卵用。默认超过98%的时间用来做GC却回收了不到2%的内存时将会抛出此错误。那如果没有此限制会发生什么呢？GC进程将被重启，100%的CPU将用于GC，而没有CPU资源用于其他正常的工作。如果一个工作本来只需要几毫秒即可完成，现在却需要几分钟才能完成，我想这种结果谁都没有办法接受。</p> \n<p>所以<span style=\"color:#f33b45;\"><code>java.lang.OutOfMemoryError:GC overhead limit exceeded</code></span>也可以看做是一个<code><span style=\"color:#f33b45;\">fail-fast（快速失败）</span></code>实战的实例。</p> \n<p><strong>示例</strong></p> \n<p>下面的代码初始化一个<span style=\"color:#f33b45;\"><code>map</code></span>并在无限循环中不停的添加键值对，运行后将会抛出<span style=\"color:#f33b45;\"><code>GC overhead limit exceeded</code></span>错误：</p> \n<pre class=\"has\" name=\"code\"><code class=\"language-java hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Wrapper</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String args[])</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        Map map = System.getProperties();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        Random r = <span class=\"hljs-keyword\">new</span> Random();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-keyword\">true</span>) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            map.put(r.nextInt(), <span class=\"hljs-string\">\"value\"</span>);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>正如你所预料的那样，程序不能正常的结束，事实上，当我们使用如下参数启动程序时：</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs groovy\">java -Xmx100m -<span class=\"hljs-attr\">XX:</span>+UseParallelGC Wrapper\n</code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>我们很快就可以看到程序抛出<span style=\"color:#f33b45;\"><code>java.lang.OutOfMemoryError: GC overhead limit exceeded</code></span>错误。但如果在启动时设置不同的堆空间大小或者使用不同的GC算法，比如这样：</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs groovy\">java -Xmx10m -<span class=\"hljs-attr\">XX:</span>+UseParallelGC Wrapper\n</code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>我们将看到如下错误：</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs css\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-selector-tag\">Exception</span> <span class=\"hljs-selector-tag\">in</span> <span class=\"hljs-selector-tag\">thread</span> \"<span class=\"hljs-selector-tag\">main</span>\" <span class=\"hljs-selector-tag\">java</span><span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.OutOfMemoryError</span>: <span class=\"hljs-selector-tag\">Java</span> <span class=\"hljs-selector-tag\">heap</span> <span class=\"hljs-selector-tag\">space</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-selector-tag\">at</span> <span class=\"hljs-selector-tag\">java</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.Hashtable</span><span class=\"hljs-selector-class\">.rehash</span>(<span class=\"hljs-selector-tag\">Unknown</span> <span class=\"hljs-selector-tag\">Source</span>)</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-selector-tag\">at</span> <span class=\"hljs-selector-tag\">java</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.Hashtable</span><span class=\"hljs-selector-class\">.addEntry</span>(<span class=\"hljs-selector-tag\">Unknown</span> <span class=\"hljs-selector-tag\">Source</span>)</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-selector-tag\">at</span> <span class=\"hljs-selector-tag\">java</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.Hashtable</span><span class=\"hljs-selector-class\">.put</span>(<span class=\"hljs-selector-tag\">Unknown</span> <span class=\"hljs-selector-tag\">Source</span>)</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-selector-tag\">at</span> <span class=\"hljs-selector-tag\">cn</span><span class=\"hljs-selector-class\">.moondev</span><span class=\"hljs-selector-class\">.Wrapper</span><span class=\"hljs-selector-class\">.main</span>(<span class=\"hljs-selector-tag\">Wrapper</span><span class=\"hljs-selector-class\">.java</span><span class=\"hljs-selector-pseudo\">:12)</span></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>使用以下GC算法：<span style=\"color:#f33b45;\"><code>-XX:+UseConcMarkSweepGC</code></span> 或者<span style=\"color:#f33b45;\"><code>-XX:+UseG1GC</code></span>，启动命令如下：</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs apache\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attribute\">java</span> -Xmx<span class=\"hljs-number\">100</span>m -XX:+UseConcMarkSweepGC Wrapper</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attribute\">java</span> -Xmx<span class=\"hljs-number\">100</span>m -XX:+UseG<span class=\"hljs-number\">1</span>GC Wrapper</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>得到的结果是这样的：</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs php\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-built_in\">Exception</span>: java.lang.OutOfMemoryError thrown <span class=\"hljs-keyword\">from</span> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">the UncaughtExceptionHandler in thread <span class=\"hljs-string\">\"main\"</span></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>错误已经被默认的异常处理程序捕获，并且没有任何错误的堆栈信息输出。</p> \n<p>以上这些变化可以说明，在资源有限的情况下，你根本无法无法预测你的应用是怎样挂掉的，什么时候会挂掉，所以在开发时，你不能仅仅保证自己的应用程序在特定的环境下正常运行。</p> \n<p><strong>解决方案</strong></p> \n<p>首先是一个毫无诚意的解决方案，如果你仅仅是不想看到<span style=\"color:#f33b45;\"><code>java.lang.OutOfMemoryError:GC overhead limit exceeded</code></span>的错误信息，可以在应用程序启动时添加如下JVM参数：</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs groovy\">-<span class=\"hljs-attr\">XX:</span>-UseGCOverheadLimit\n</code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>但是强烈建议不要使用这个选项，因为这样并没有解决任何问题，只是推迟了错误出现的时间，错误信息也变成了我们更熟悉的<span style=\"color:#f33b45;\"><code>java.lang.OutOfMemoryError: Java heap space</code></span>而已。</p> \n<p>另一个解决方案，如果你的应用程序确实内存不足，增加堆内存会解决<span style=\"color:#f33b45;\"><code>GC overhead limit</code></span>问题，就如下面这样，给你的应用程序1G的堆内存：</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs css\"><span class=\"hljs-selector-tag\">java</span> <span class=\"hljs-selector-tag\">-Xmx1024m</span> <span class=\"hljs-selector-tag\">com</span><span class=\"hljs-selector-class\">.yourcompany</span><span class=\"hljs-selector-class\">.YourClass</span>\n</code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>但如果你想确保你已经解决了潜在的问题，而不是掩盖<span style=\"color:#f33b45;\"><code>java.lang.OutOfMemoryError: GC overhead limit exceeded</code></span>错误，那么你不应该仅止步于此。你要记得还有<span style=\"color:#f33b45;\"><code>profilers</code></span>和<span style=\"color:#f33b45;\"><code>memory dump analyzers</code></span>这些工具，你需要花费更多的时间和精力来查找问题。还有一点需要注意，这些工具在Java运行时有显著的开销，因此不建议在生产环境中使用。</p> \n<p><span style=\"color:#f33b45;\"><strong>3、<code>java.lang.OutOfMemoryError:Permgen space</code></strong></span></p> \n<p>Java中堆空间是JVM管理的最大一块内存空间，可以在JVM启动时指定堆空间的大小，其中堆被划分成两个不同的区域：新生代（Young）和老年代（Tenured），新生代又被划分为3个区域：<span style=\"color:#f33b45;\"><code>Eden</code>、<code>From Survivor</code>、<code>To Survivor</code></span>，如下图所示。</p> \n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNzU3MjQtNWRiN2ViNDUxOTUxNjVhYy5qcGc_aW1hZ2VNb2dyMi9hdXRvLW9yaWVudC9zdHJpcCU3Q2ltYWdlVmlldzIvMi93LzEwMDAvZm9ybWF0L3dlYnA?x-oss-process=image/format,png\"></p> \n<p>图片来源：并发编程网</p> \n<p><span style=\"color:#f33b45;\"><code>java.lang.OutOfMemoryError: PermGen space</code></span>错误就表明持久代所在区域的内存已被耗尽。</p> \n<p><strong>原因分析</strong></p> \n<p>要理解<span style=\"color:#f33b45;\"><code>java.lang.OutOfMemoryError: PermGen space</code></span>出现的原因，首先需要理解<span style=\"color:#f33b45;\"><code>Permanent Generation Space</code></span>的用处是什么。持久代主要存储的是每个类的信息，比如：<strong>类加载器引用</strong>、<strong>运行时常量池（所有常量、字段引用、方法引用、属性）</strong>、<strong>字段(Field)数据</strong>、<strong>方法(Method)数据</strong>、<strong>方法代码</strong>、<strong>方法字节码</strong>等等。我们可以推断出，<span style=\"color:#f33b45;\"><code>PermGen</code></span>的大小取决于被加载类的数量以及类的大小。</p> \n<p>因此，我们可以得出出现<span style=\"color:#f33b45;\"><code>java.lang.OutOfMemoryError: PermGen space</code></span>错误的原因是：太多的类或者太大的类被加载到<span style=\"color:#f33b45;\"><code>permanent generation</code></span>（持久代）。</p> \n<p><strong>示例</strong></p> \n<p>①、最简单的示例</p> \n<p>正如前面所描述的，<span style=\"color:#f33b45;\"><code>PermGen</code></span>的使用与加载到JVM类的数量有密切关系，下面是一个最简单的示例：</p> \n<pre class=\"has\" name=\"code\"><code class=\"language-java hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> javassist.ClassPool;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MicroGenerator</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100_000_000</span>; i++) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            generate(<span class=\"hljs-string\">\"cn.moondev.User\"</span> + i);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Class <span class=\"hljs-title\">generate</span><span class=\"hljs-params\">(String name)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        ClassPool pool = ClassPool.getDefault();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">return</span> pool.makeClass(name).toClass();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"13\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>运行时请设置JVM参数：<span style=\"color:#f33b45;\"><code>-XX:MaxPermSize=5m</code></span>，值越小越好。需要注意的是JDK8已经完全移除持久代空间，取而代之的是元空间（<span style=\"color:#f33b45;\"><code>Metaspace</code></span>），所以示例最好的JDK1.7或者1.6下运行。</p> \n<p>代码在运行时不停的生成类并加载到持久代中，直到撑满持久代内存空间，最后抛出<span style=\"color:#f33b45;\"><code>java.lang.OutOfMemoryError:Permgen space</code></span>。代码中类的生成使用了<span style=\"color:#f33b45;\"><code>javassist</code></span>库。</p> \n<p>②、Redeploy-time</p> \n<p>更复杂和实际的一个例子就是Redeploy（重新部署，你可以想象一下你开发时，点击eclipse的reploy按钮或者使用idea时按ctrl + F5时的过程）。在从服务器卸载应用程序时，当前的<span style=\"color:#f33b45;\"><code>classloader</code></span>以及加载的<span style=\"color:#f33b45;\"><code>class</code></span>在没有实例引用的情况下，持久代的内存空间会被GC清理并回收。如果应用中有类的实例对当前的<span style=\"color:#f33b45;\"><code>classloader</code></span>的引用，那么<span style=\"color:#f33b45;\"><code>Permgen</code></span>区的<span style=\"color:#f33b45;\"><code>class</code></span>将无法被卸载，导致<span style=\"color:#f33b45;\"><code>Permgen</code></span>区的内存一直增加直到出现<span style=\"color:#f33b45;\"><code>Permgen space</code></span>错误。</p> \n<p>不幸的是，许多第三方库以及糟糕的资源处理方式（比如：线程、JDBC驱动程序、文件系统句柄）使得卸载以前使用的类加载器变成了一件不可能的事。反过来就意味着在每次重新部署过程中，应用程序所有的类的先前版本将仍然驻留在<span style=\"color:#f33b45;\"><code>Permgen</code></span>区中，你的每次部署都将生成几十甚至几百M的垃圾。</p> \n<p>就以线程和JDBC驱动来说说。很多人都会使用线程来处理一下周期性或者耗时较长的任务，这个时候一定要注意线程的生命周期问题，你需要确保线程不能比你的应用程序活得还长。否则，如果应用程序已经被卸载，线程还在继续运行，这个线程通常会维持对应用程序的<span style=\"color:#f33b45;\"><code>classloader</code></span>的引用，造成的结果就不再多说。多说一句，<strong>开发者有责任处理好这个问题，特别是如果你是第三方库的提供者的话，一定要提供线程关闭接口来处理清理工作</strong>。</p> \n<p>让我们想象一个使用JDBC驱动程序连接到关系数据库的示例应用程序。当应用程序部署到服务器上的时：服务器创建一个<span style=\"color:#f33b45;\"><code>classloader</code></span>实例来加载应用所有的类（包含相应的JDBC驱动）。根据JDBC规范，JDBC驱动程序（比如：<span style=\"color:#f33b45;\"><code>com.mysql.jdbc.Driver</code></span>）会在初始化时将自己注册到<span style=\"color:#f33b45;\"><code>java.sql.DriverManager</code></span>中。该注册过程中会将驱动程序的一个实例存储在DriverManager的静态字段内，代码可以参考：</p> \n<pre class=\"has\" name=\"code\"><code class=\"language-java hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">// com.mysql.jdbc.Driver源码</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">package</span> com.mysql.jdbc;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Driver</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">NonRegisteringDriver</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">java</span>.<span class=\"hljs-title\">sql</span>.<span class=\"hljs-title\">Driver</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Driver</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> SQLException </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-keyword\">static</span> {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">try</span> {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            DriverManager.registerDriver(<span class=\"hljs-keyword\">new</span> Driver());</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        } <span class=\"hljs-keyword\">catch</span> (SQLException var1) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RuntimeException(<span class=\"hljs-string\">\"Can\\'t register driver!\"</span>);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"13\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"14\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"15\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">// // // // // // // // // //</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"16\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">// 再看下DriverManager对应代码</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"17\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> CopyOnWriteArrayList&lt;DriverInfo&gt; registeredDrivers = <span class=\"hljs-keyword\">new</span> CopyOnWriteArrayList&lt;&gt;();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"18\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"19\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">synchronized</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">registerDriver</span><span class=\"hljs-params\">(java.sql.Driver driver,DriverAction da)</span> <span class=\"hljs-keyword\">throws</span> SQLException </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"20\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-keyword\">if</span>(driver != <span class=\"hljs-keyword\">null</span>) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"21\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        registeredDrivers.addIfAbsent(<span class=\"hljs-keyword\">new</span> DriverInfo(driver, da));</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"22\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    } <span class=\"hljs-keyword\">else</span> {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"23\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> NullPointerException();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"24\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"25\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>现在，当从服务器上卸载应用程序的时候，<span style=\"color:#f33b45;\"><code>java.sql.DriverManager</code></span>仍将持有那个驱动程序的引用，进而持有用于加载应用程序的<span style=\"color:#f33b45;\"><code>classloader</code></span>的一个实例的引用。这个<span style=\"color:#f33b45;\"><code>classloader</code></span>现在仍然引用着应用程序的所有类。如果此程序启动时需要加载2000个类，占用约10MB永久代（PermGen）内存，那么只需要5~10次重新部署，就会将默认大小的永久代（PermGen）塞满，然后就会触发<span style=\"color:#f33b45;\"><code>java.lang.OutOfMemoryError: PermGen space</code></span>错误并崩溃。</p> \n<p><strong>解决方案</strong></p> \n<p>① 解决初始化时的<span style=\"color:#f33b45;\"><code>OutOfMemoryError</code></span></p> \n<p>当在应用程序启动期间触发由于<code>PermGen</code>耗尽引起的<code>OutOfMemoryError</code>时，解决方案很简单。 应用程序需要更多的空间来加载所有的类到<code>PermGen</code>区域，所以我们只需要增加它的大小。 为此，请更改应用程序启动配置，并添加（或增加，如果存在）-XX：MaxPermSize参数，类似于以下示例：</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs groovy\">java -<span class=\"hljs-attr\">XX:</span>MaxPermSize=<span class=\"hljs-number\">512</span>m com.yourcompany.YourClass\n</code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>② 解决<span style=\"color:#f33b45;\"><code>Redeploy</code></span>时的<span style=\"color:#f33b45;\"><code>OutOfMemoryError</code></span></p> \n<p>分析dump文件：首先，找出引用在哪里被持有；其次，给你的web应用程序添加一个关闭的hook，或者在应用程序卸载后移除引用。你可以使用如下命令导出dump文件：</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs lua\">jmap -<span class=\"hljs-built_in\">dump</span>:<span class=\"hljs-built_in\">format</span>=b,file=<span class=\"hljs-built_in\">dump</span>.hprof &lt;process-id&gt;\n</code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>如果是你自己代码的问题请及时修改，如果是第三方库，请试着搜索一下是否存在\"关闭\"接口，如果没有给开发者提交一个bug或者issue吧。</p> \n<p>③ 解决运行时<span style=\"color:#f33b45;\"><code>OutOfMemoryError</code></span></p> \n<p>首先你需要检查是否允许GC从<span style=\"color:#f33b45;\"><code>PermGen</code></span>卸载类，JVM的标准配置相当保守，只要类一创建，即使已经没有实例引用它们，其仍将保留在内存中，特别是当应用程序需要动态创建大量的类但其生命周期并不长时，允许JVM卸载类对应用大有助益，你可以通过在启动脚本中添加以下配置参数来实现：</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs groovy\">-<span class=\"hljs-attr\">XX:</span>+CMSClassUnloadingEnabled\n</code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>默认情况下，这个配置是未启用的，如果你启用它，GC将扫描<span style=\"color:#f33b45;\"><code>PermGen</code></span>区并清理已经不再使用的类。但请注意，这个配置只在<span style=\"color:#f33b45;\"><code>UseConcMarkSweepGC</code></span>的情况下生效，如果你使用其他GC算法，比如：<span style=\"color:#f33b45;\"><code>ParallelGC</code></span>或者<span style=\"color:#f33b45;\"><code>Serial GC</code></span>时，这个配置无效。所以使用以上配置时，请配合：</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs groovy\">-<span class=\"hljs-attr\">XX:</span>+UseConcMarkSweepGC\n</code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>如果你已经确保JVM可以卸载类，但是仍然出现内存溢出问题，那么你应该继续分析dump文件，使用以下命令生成dump文件：</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs lua\">jmap -<span class=\"hljs-built_in\">dump</span>:file=<span class=\"hljs-built_in\">dump</span>.hprof,<span class=\"hljs-built_in\">format</span>=b &lt;process-id&gt;\n</code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>当你拿到生成的堆转储文件，并利用像Eclipse Memory Analyzer Toolkit这样的工具来寻找应该卸载却没被卸载的类加载器，然后对该类加载器加载的类进行排查，找到可疑对象，分析使用或者生成这些类的代码，查找产生问题的根源并解决它。</p> \n<p><span style=\"color:#f33b45;\"><strong>4、<code>java.lang.OutOfMemoryError:Metaspace</code></strong></span></p> \n<p>前文已经提过，<span style=\"color:#f33b45;\"><code>PermGen</code></span>区域用于存储类的名称和字段，类的方法，方法的字节码，常量池，JIT优化等，但从Java8开始，Java中的内存模型发生了重大变化：引入了称为<span style=\"color:#f33b45;\"><code>Metaspace</code></span>的新内存区域，而删除了<span style=\"color:#f33b45;\"><code>PermGen</code></span>区域。请注意：不是简单的将<span style=\"color:#f33b45;\"><code>PermGen</code></span>区所存储的内容直接移到<span style=\"color:#f33b45;\"><code>Metaspace</code></span>区，<span style=\"color:#f33b45;\"><code>PermGen</code></span>区中的某些部分，已经移动到了普通堆里面。</p> \n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNzU3MjQtZDY2MzU2ZDIxN2FiM2I0NS5wbmc_aW1hZ2VNb2dyMi9hdXRvLW9yaWVudC9zdHJpcCU3Q2ltYWdlVmlldzIvMi93LzcwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p> \n<p>OOM-example-metaspace，图片来源：Plumbr</p> \n<p><strong>原因分析</strong></p> \n<p>Java8做出如此改变的原因包括但不限于：</p> \n<ul><li>应用程序所需要的<span style=\"color:#f33b45;\"><code>PermGen</code></span>区大小很难预测，设置太小会触发<span style=\"color:#f33b45;\"><code>PermGen OutOfMemoryError</code></span>错误，过度设置导致资源浪费。</li><li>提升GC性能，在HotSpot中的每个垃圾收集器需要专门的代码来处理存储在<span style=\"color:#f33b45;\"><code>PermGen</code></span>中的类的元数据信息。从<span style=\"color:#f33b45;\"><code>PermGen</code></span>分离类的元数据信息到<span style=\"color:#f33b45;\"><code>Metaspace</code></span>，由于<span style=\"color:#f33b45;\"><code>Metaspace</code></span>的分配具有和<span style=\"color:#f33b45;\"><code>Java Heap</code></span>相同的地址空间，因此<span style=\"color:#f33b45;\"><code>Metaspace</code></span>和<span style=\"color:#f33b45;\"><code>Java Heap</code></span>可以无缝的管理，而且简化了<span style=\"color:#f33b45;\"><code>FullGC</code></span>的过程，以至将来可以并行的对元数据信息进行垃圾收集，而没有GC暂停。</li><li>支持进一步优化，比如：G1并发类的卸载，也算为将来做准备吧</li></ul>\n<p>正如你所看到的，元空间大小的要求取决于加载的类的数量以及这种类声明的大小。 所以很容易看到<span style=\"color:#f33b45;\"><code>java.lang.OutOfMemoryError: Metaspace</code></span>主要原因：太多的类或太大的类加载到元空间。</p> \n<p><strong>示例</strong></p> \n<p>正如上文中所解释的，元空间的使用与加载到JVM中的类的数量密切相关。 下面的代码是最简单的例子：</p> \n<pre class=\"has\" name=\"code\"><code class=\"language-java hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Metaspace</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-keyword\">static</span> javassist.ClassPool cp = javassist.ClassPool.getDefault();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception</span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; ; i++) { </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            Class c = cp.makeClass(<span class=\"hljs-string\">\"eu.plumbr.demo.Generated\"</span> + i).toClass();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            System.out.println(i);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>程序运行中不停的生成新类，所有的这些类的定义将被加载到<span style=\"color:#f33b45;\"><code>Metaspace</code></span>区，直到空间被完全占用并且抛出<span style=\"color:#f33b45;\"><code>java.lang.OutOfMemoryError:Metaspace</code></span>。当使用<span style=\"color:#f33b45;\"><code>-XX：MaxMetaspaceSize = 32m</code></span>启动时，大约加载30000多个类时就会死机。</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs css\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">31023</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">31024</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-selector-tag\">Exception</span> <span class=\"hljs-selector-tag\">in</span> <span class=\"hljs-selector-tag\">thread</span> \"<span class=\"hljs-selector-tag\">main</span>\" <span class=\"hljs-selector-tag\">javassist</span><span class=\"hljs-selector-class\">.CannotCompileException</span>: <span class=\"hljs-selector-tag\">by</span> <span class=\"hljs-selector-tag\">java</span><span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.OutOfMemoryError</span>: <span class=\"hljs-selector-tag\">Metaspace</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-selector-tag\">at</span> <span class=\"hljs-selector-tag\">javassist</span><span class=\"hljs-selector-class\">.ClassPool</span><span class=\"hljs-selector-class\">.toClass</span>(<span class=\"hljs-selector-tag\">ClassPool</span><span class=\"hljs-selector-class\">.java</span><span class=\"hljs-selector-pseudo\">:1170)</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-selector-tag\">at</span> <span class=\"hljs-selector-tag\">javassist</span><span class=\"hljs-selector-class\">.ClassPool</span><span class=\"hljs-selector-class\">.toClass</span>(<span class=\"hljs-selector-tag\">ClassPool</span><span class=\"hljs-selector-class\">.java</span><span class=\"hljs-selector-pseudo\">:1113)</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-selector-tag\">at</span> <span class=\"hljs-selector-tag\">javassist</span><span class=\"hljs-selector-class\">.ClassPool</span><span class=\"hljs-selector-class\">.toClass</span>(<span class=\"hljs-selector-tag\">ClassPool</span><span class=\"hljs-selector-class\">.java</span><span class=\"hljs-selector-pseudo\">:1071)</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-selector-tag\">at</span> <span class=\"hljs-selector-tag\">javassist</span><span class=\"hljs-selector-class\">.CtClass</span><span class=\"hljs-selector-class\">.toClass</span>(<span class=\"hljs-selector-tag\">CtClass</span><span class=\"hljs-selector-class\">.java</span><span class=\"hljs-selector-pseudo\">:1275)</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-selector-tag\">at</span> <span class=\"hljs-selector-tag\">cn</span><span class=\"hljs-selector-class\">.moondev</span><span class=\"hljs-selector-class\">.book</span><span class=\"hljs-selector-class\">.Metaspace</span><span class=\"hljs-selector-class\">.main</span>(<span class=\"hljs-selector-tag\">Metaspace</span><span class=\"hljs-selector-class\">.java</span><span class=\"hljs-selector-pseudo\">:12)</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    .....</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p><strong>解决方案</strong></p> \n<p>第一个解决方案是显而易见的，既然应用程序会耗尽内存中的<span style=\"color:#f33b45;\"><code>Metaspace</code></span>区空间，那么应该增加其大小，更改启动配置增加如下参数：</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs go\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">// 告诉JVM：Metaspace允许增长到512，然后才能抛出异常</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">-XX：MaxMetaspaceSize = <span class=\"hljs-number\">512</span>m</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>另一个方法就是删除此参数来完全解除对<span style=\"color:#f33b45;\"><code>Metaspace</code></span>大小的限制（默认是没有限制的）。默认情况下，对于64位服务器端JVM，MetaspaceSize默认大小是21M（初始限制值），一旦达到这个限制值，FullGC将被触发进行类卸载，并且这个限制值将会被重置，新的限制值依赖于<span style=\"color:#f33b45;\"><code>Metaspace</code></span>的剩余容量。如果没有足够空间被释放，这个限制值将会上升，反之亦然。在技术上<code>Metaspace</code>的尺寸可以增长到交换空间，而这个时候本地内存分配将会失败（更具体的分析，可以参考：<a href=\"https://link.jianshu.com?t=http%3A%2F%2Fifeve.com%2Fjava-permgen-removed%2F\">Java PermGen 去哪里了?</a>）。</p> \n<p>你可以通过修改各种启动参数来“快速修复”这些内存溢出错误，但你需要正确区分你是否只是推迟或者隐藏了<span style=\"color:#f33b45;\"><code>java.lang.OutOfMemoryError</code></span>的症状。如果你的应用程序确实存在内存泄漏或者本来就加载了一些不合理的类，那么所有这些配置都只是推迟问题出现的时间而已，实际也不会改善任何东西。</p> \n<p><span style=\"color:#f33b45;\"><strong>5、<code>java.lang.OutOfMemoryError:Unable to create new native thread</code></strong></span></p> \n<p>一个思考线程的方法是将线程看着是执行任务的工人，如果你只有一个工人，那么他同时只能执行一项任务，但如果你有十几个工人，就可以同时完成你几个任务。就像这些工人都在物理世界，JVM中的线程完成自己的工作也是需要一些空间的，当有足够多的线程却没有那么多的空间时就会像这样：</p> \n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNzU3MjQtMjMyOGQ3MGFlNWZiZjgxYi5wbmc_aW1hZ2VNb2dyMi9hdXRvLW9yaWVudC9zdHJpcCU3Q2ltYWdlVmlldzIvMi93LzcwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p> \n<p>图片来源：Plumbr</p> \n<p>出现<span style=\"color:#f33b45;\"><code>java.lang.OutOfMemoryError:Unable to create new native thread</code></span>就意味着Java应用程序已达到其可以启动线程数量的极限了。</p> \n<p><strong>原因分析</strong></p> \n<p>当JVM向OS请求创建一个新线程时，而OS却无法创建新的native线程时就会抛出<span style=\"color:#f33b45;\"><code>Unable to create new native thread</code></span>错误。一台服务器可以创建的线程数依赖于物理配置和平台，建议运行下文中的示例代码来测试找出这些限制。总体上来说，抛出此错误会经过以下几个阶段：</p> \n<ul><li>运行在JVM内的应用程序请求创建一个新的线程</li><li>JVM向OS请求创建一个新的native线程</li><li>OS尝试创建一个新的native线程，这时需要分配内存给新的线程</li><li>OS拒绝分配内存给线程，因为32位Java进程已经耗尽内存地址空间（2-4GB内存地址已被命中）或者OS的虚拟内存已经完全耗尽</li><li><span style=\"color:#f33b45;\"><code>Unable to create new native thread</code></span>错误将被抛出</li></ul>\n<p><strong>示例</strong></p> \n<p>下面的示例不能的创建并启动新的线程。当代码运行时，很快达到OS的线程数限制，并抛出<span style=\"color:#f33b45;\"><code>Unable to create new native thread</code></span>错误。</p> \n<pre class=\"has\" name=\"code\"><code class=\"language-java hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">while</span>(<span class=\"hljs-keyword\">true</span>){</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-keyword\">new</span> Thread(<span class=\"hljs-keyword\">new</span> Runnable(){</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            <span class=\"hljs-keyword\">try</span> {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                Thread.sleep(<span class=\"hljs-number\">10000000</span>);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            } <span class=\"hljs-keyword\">catch</span>(InterruptedException e) { }        </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        }    </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }).start();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p><strong>解决方案</strong></p> \n<p>有时，你可以通过在OS级别增加线程数限制来绕过这个错误。如果你限制了JVM可在用户空间创建的线程数，那么你可以检查并增加这个限制：</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs yaml\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-string\">//</span> <span class=\"hljs-string\">macOS</span> <span class=\"hljs-number\">10.12</span><span class=\"hljs-string\">上执行</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-string\">$</span> <span class=\"hljs-string\">ulimit</span> <span class=\"hljs-string\">-u</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-number\">709</span></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>当你的应用程序产生成千上万的线程，并抛出此异常，表示你的程序已经出现了很严重的编程错误，我不觉得应该通过修改参数来解决这个问题，不管是OS级别的参数还是JVM启动参数。更可取的办法是分析你的应用是否真的需要创建如此多的线程来完成任务？是否可以使用线程池或者说线程池的数量是否合适？是否可以更合理的拆分业务来实现.....</p> \n<p><span style=\"color:#f33b45;\"><strong>6、<code>java.lang.OutOfMemoryError:Out of swap space?</code></strong></span></p> \n<p>Java应用程序在启动时会指定所需要的内存大小，可以通过<span style=\"color:#f33b45;\"><code>-Xmx</code></span>和其他类似的启动参数来指定。在JVM请求的总内存大于可用物理内存的情况下，操作系统会将内存中的数据交换到磁盘上去。</p> \n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNzU3MjQtMDQ2YzM4MzE2ZGViNTExNi5wbmc_aW1hZ2VNb2dyMi9hdXRvLW9yaWVudC9zdHJpcCU3Q2ltYWdlVmlldzIvMi93LzcwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p> \n<p>图片来源：plumbr</p> \n<p><code><span style=\"color:#f33b45;\">Out of swap space?</span></code>表示交换空间也将耗尽，并且由于缺少物理内存和交换空间，再次尝试分配内存也将失败。</p> \n<p>原因分析</p> \n<p>当应用程序向JVM native heap请求分配内存失败并且native heap也即将耗尽时，JVM会抛出<span style=\"color:#f33b45;\"><code>Out of swap space</code></span>错误。该错误消息中包含分配失败的大小（以字节为单位）和请求失败的原因。</p> \n<blockquote> \n <p>Native Heap Memory是JVM内部使用的Memory，这部分的Memory可以通过JDK提供的JNI的方式去访问，这部分Memory效率很高，但是管理需要自己去做，如果没有把握最好不要使用，以防出现内存泄露问题。JVM 使用Native Heap Memory用来优化代码载入（JTI代码生成），临时对象空间申请，以及JVM内部的一些操作。</p> \n</blockquote> \n<p>这个问题往往发生在Java进程已经开始交换的情况下，现代的GC算法已经做得足够好了，当时当面临由于交换引起的延迟问题时，GC暂停的时间往往会让大多数应用程序不能容忍。</p> \n<p><span style=\"color:#f33b45;\"><code>java.lang.OutOfMemoryError:Out of swap space?</code></span>往往是由操作系统级别的问题引起的，例如：</p> \n<ul><li>操作系统配置的交换空间不足。</li><li>系统上的另一个进程消耗所有内存资源。</li></ul>\n<p>还有可能是本地内存泄漏导致应用程序失败，比如：应用程序调用了native code连续分配内存，但却没有被释放。</p> \n<p><strong>解决方案</strong></p> \n<p>解决这个问题有几个办法，通常最简单的方法就是增加交换空间，不同平台实现的方式会有所不同，比如在Linux下可以通过如下命令实现：</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs properties\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\"># 原作者使用，由于我手里并没有Linux环境，所以并未测试</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\"># 创建并附加一个大小为640MB的新交换文件</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attr\">swapoff</span> <span class=\"hljs-string\">-a </span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attr\">dd</span> <span class=\"hljs-string\">if=/dev/zero of=swapfile bs=1024 count=655360</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attr\">mkswap</span> <span class=\"hljs-string\">swapfile</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attr\">swapon</span> <span class=\"hljs-string\">swapfile</span></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>Java GC会扫描内存中的数据，如果是对交换空间运行垃圾回收算法会使GC暂停的时间增加几个数量级，因此你应该慎重考虑使用上文增加交换空间的方法。</p> \n<p>如果你的应用程序部署在JVM需要同其他进程激烈竞争获取资源的物理机上，建议将服务隔离到单独的虚拟机中</p> \n<p>但在许多情况下，您唯一真正可行的替代方案是：</p> \n<ul><li>升级机器以包含更多内存</li><li>优化应用程序以减少其内存占用</li></ul>\n<p>当您转向优化路径时，使用内存转储分析程序来检测内存中的大分配是一个好的开始。</p> \n<p><span style=\"color:#f33b45;\">7、<code>java.lang.OutOfMemoryError:Requested array size exceeds VM limit</code></span></p> \n<p>Java对应用程序可以分配的最大数组大小有限制。不同平台限制有所不同，但通常在1到21亿个元素之间。</p> \n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNzU3MjQtZWU5ZjdiZTUzMjMxODRhMC5wbmc_aW1hZ2VNb2dyMi9hdXRvLW9yaWVudC9zdHJpcCU3Q2ltYWdlVmlldzIvMi93LzcwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p> \n<p>图片来源：plumbr</p> \n<p>当你遇到<span style=\"color:#f33b45;\"><code>Requested array size exceeds VM limit</code></span>错误时，意味着你的应用程序试图分配大于Java虚拟机可以支持的数组。</p> \n<p>原因分析</p> \n<p>该错误由JVM中的<span style=\"color:#f33b45;\"><code>native code</code></span>抛出。 JVM在为数组分配内存之前，会执行特定于平台的检查：分配的数据结构是否在此平台中是可寻址的。</p> \n<p>你很少见到这个错误是因为Java数组的索引是int类型。 Java中的最大正整数为2 ^ 31 - 1 = 2,147,483,647。 并且平台特定的限制可以非常接近这个数字，例如：我的环境上(64位macOS，运行Jdk1.8)可以初始化数组的长度高达2,147,483,645（Integer.MAX_VALUE-2）。如果再将数组的长度增加1到Integer.MAX_VALUE-1会导致熟悉的OutOfMemoryError：</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs php\"><span class=\"hljs-built_in\">Exception</span> in thread <span class=\"hljs-string\">\"main\"</span> java.lang.OutOfMemoryError: Requested <span class=\"hljs-keyword\">array</span> size exceeds VM limit\n</code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>但是，在使用OpenJDK 6的32位Linux上，在分配具有大约11亿个元素的数组时，您将遇到<span style=\"color:#f33b45;\"><code>Requested array size exceeded VM limit</code></span>的错误。 要理解你的特定环境的限制，运行下文中描述的小测试程序。</p> \n<p>示例</p> \n<pre class=\"has\" name=\"code\"><code class=\"language-java hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">3</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-keyword\">try</span> {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">int</span>[] arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[Integer.MAX_VALUE-i];</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        System.out.format(<span class=\"hljs-string\">\"Successfully initialized an array with %,d elements.\\n\"</span>, Integer.MAX_VALUE-i);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    } <span class=\"hljs-keyword\">catch</span> (Throwable t) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        t.printStackTrace();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>该示例重复四次，并在每个回合中初始化一个长原语数组。 该程序尝试初始化的数组的大小在每次迭代时增加1，最终达到Integer.MAX_VALUE。 现在，当使用Hotspot 7在64位Mac OS X上启动代码片段时，应该得到类似于以下内容的输出：</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs css\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-selector-tag\">java</span><span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.OutOfMemoryError</span>: <span class=\"hljs-selector-tag\">Java</span> <span class=\"hljs-selector-tag\">heap</span> <span class=\"hljs-selector-tag\">space</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-selector-tag\">at</span> <span class=\"hljs-selector-tag\">eu</span><span class=\"hljs-selector-class\">.plumbr</span><span class=\"hljs-selector-class\">.demo</span><span class=\"hljs-selector-class\">.ArraySize</span><span class=\"hljs-selector-class\">.main</span>(<span class=\"hljs-selector-tag\">ArraySize</span><span class=\"hljs-selector-class\">.java</span><span class=\"hljs-selector-pseudo\">:8)</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-selector-tag\">java</span><span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.OutOfMemoryError</span>: <span class=\"hljs-selector-tag\">Java</span> <span class=\"hljs-selector-tag\">heap</span> <span class=\"hljs-selector-tag\">space</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-selector-tag\">at</span> <span class=\"hljs-selector-tag\">eu</span><span class=\"hljs-selector-class\">.plumbr</span><span class=\"hljs-selector-class\">.demo</span><span class=\"hljs-selector-class\">.ArraySize</span><span class=\"hljs-selector-class\">.main</span>(<span class=\"hljs-selector-tag\">ArraySize</span><span class=\"hljs-selector-class\">.java</span><span class=\"hljs-selector-pseudo\">:8)</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-selector-tag\">java</span><span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.OutOfMemoryError</span>: <span class=\"hljs-selector-tag\">Requested</span> <span class=\"hljs-selector-tag\">array</span> <span class=\"hljs-selector-tag\">size</span> <span class=\"hljs-selector-tag\">exceeds</span> <span class=\"hljs-selector-tag\">VM</span> <span class=\"hljs-selector-tag\">limit</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-selector-tag\">at</span> <span class=\"hljs-selector-tag\">eu</span><span class=\"hljs-selector-class\">.plumbr</span><span class=\"hljs-selector-class\">.demo</span><span class=\"hljs-selector-class\">.ArraySize</span><span class=\"hljs-selector-class\">.main</span>(<span class=\"hljs-selector-tag\">ArraySize</span><span class=\"hljs-selector-class\">.java</span><span class=\"hljs-selector-pseudo\">:8)</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-selector-tag\">java</span><span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.OutOfMemoryError</span>: <span class=\"hljs-selector-tag\">Requested</span> <span class=\"hljs-selector-tag\">array</span> <span class=\"hljs-selector-tag\">size</span> <span class=\"hljs-selector-tag\">exceeds</span> <span class=\"hljs-selector-tag\">VM</span> <span class=\"hljs-selector-tag\">limit</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-selector-tag\">at</span> <span class=\"hljs-selector-tag\">eu</span><span class=\"hljs-selector-class\">.plumbr</span><span class=\"hljs-selector-class\">.demo</span><span class=\"hljs-selector-class\">.ArraySize</span><span class=\"hljs-selector-class\">.main</span>(<span class=\"hljs-selector-tag\">ArraySize</span><span class=\"hljs-selector-class\">.java</span><span class=\"hljs-selector-pseudo\">:8)</span></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>注意，在出现<span style=\"color:#f33b45;\"><code>Requested array size exceeded VM limit</code></span>之前，出现了更熟悉的<span style=\"color:#f33b45;\"><code>java.lang.OutOfMemoryError: Java heap space</code></span>。 这是因为初始化2 ^ 31-1个元素的数组需要腾出8G的内存空间，大于JVM使用的默认值。</p> \n<p><strong>解决方案</strong></p> \n<p><span style=\"color:#f33b45;\"><code>java.lang.OutOfMemoryError:Requested array size exceeds VM limit</code></span>可能会在以下任一情况下出现：</p> \n<ul><li>数组增长太大，最终大小在平台限制和<span style=\"color:#f33b45;\"><code>Integer.MAX_INT</code></span>之间</li><li>你有意分配大于<span style=\"color:#f33b45;\"><code>2 ^ 31-1</code></span>个元素的数组</li></ul>\n<p>在第一种情况下，检查你的代码库，看看你是否真的需要这么大的数组。也许你可以减少数组的大小，或者将数组分成更小的数据块，然后分批处理数据。</p> \n<p>在第二种情况下，记住Java数组是由int索引的。因此，当在平台中使用标准数据结构时，数组不能超过<span style=\"color:#f33b45;\">2 ^ 31-1</span>个元素。事实上，在编译时就会出错：<span style=\"color:#f33b45;\"><code>error：integer number too large</code></span>。</p> \n<p><span style=\"color:#f33b45;\"><strong>8、<code>Out of memory:Kill process or sacrifice child</code></strong></span></p> \n<p>为了理解这个错误，我们需要补充一点操作系统的基础知识。操作系统是建立在进程的概念之上，这些进程在内核中作业，其中有一个非常特殊的进程，名叫“内存杀手（Out of memory killer）”。当内核检测到系统内存不足时，OOM killer被激活，然后选择一个进程杀掉。哪一个进程这么倒霉呢？选择的算法和想法都很朴实：谁占用内存最多，谁就被干掉。如果你对OOM Killer感兴趣的话，建议你阅读参考资料2中的文章。</p> \n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNzU3MjQtZTdlYTYwMDE3ZTdiMmExYy5wbmc_aW1hZ2VNb2dyMi9hdXRvLW9yaWVudC9zdHJpcCU3Q2ltYWdlVmlldzIvMi93LzcwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p> \n<p>OOM Killer，图片来源：plumbr</p> \n<p>当可用虚拟虚拟内存(包括交换空间)消耗到让整个操作系统面临风险时，就会产生<span style=\"color:#f33b45;\"><code>Out of memory:Kill process or sacrifice child</code></span>错误。在这种情况下，OOM Killer会选择“流氓进程”并杀死它。</p> \n<p><strong>原因分析</strong></p> \n<p>默认情况下，Linux内核允许进程请求比系统中可用内存更多的内存，但大多数进程实际上并没有使用完他们所分配的内存。这就跟现实生活中的宽带运营商类似，他们向所有消费者出售一个100M的带宽，远远超过用户实际使用的带宽，一个10G的链路可以非常轻松的服务100个(10G/100M)用户，但实际上宽带运行商往往会把10G链路用于服务150人或者更多，以便让链路的利用率更高，毕竟空闲在那儿也没什么意义。</p> \n<p>Linux内核采用的机制跟宽带运营商差不多，一般情况下都没有问题，但当大多数应用程序都消耗完自己的内存时，麻烦就来了，因为这些应用程序的内存需求加起来超出了物理内存（包括 swap）的容量，内核（OOM killer）必须杀掉一些进程才能腾出空间保障系统正常运行。就如同上面的例子中，如果150人都占用100M的带宽，那么总的带宽肯定超过了10G这条链路能承受的范围。</p> \n<p>示例</p> \n<p>当你在Linux上运行如下代码：</p> \n<pre class=\"has\" name=\"code\"><code class=\"language-java hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span></span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    List&lt;<span class=\"hljs-keyword\">int</span>[]&gt; l = <span class=\"hljs-keyword\">new</span> java.util.ArrayList();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">10000</span>; i &lt; <span class=\"hljs-number\">100000</span>; i++) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">try</span> {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            l.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">100000000</span>]);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        } <span class=\"hljs-keyword\">catch</span> (Throwable t) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            t.printStackTrace();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>在Linux的系统日志中<span style=\"color:#f33b45;\"><code>/var/log/kern.log</code></span>会出现以下日志：</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs less\"><ol class=\"hljs-ln\" style=\"width:1067px\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-selector-tag\">Jun</span>  <span class=\"hljs-selector-tag\">4</span> <span class=\"hljs-selector-tag\">07</span><span class=\"hljs-selector-pseudo\">:41</span><span class=\"hljs-selector-pseudo\">:59</span> <span class=\"hljs-selector-tag\">plumbr</span> <span class=\"hljs-selector-tag\">kernel</span>: <span class=\"hljs-selector-attr\">[70667120.897649]</span> <span class=\"hljs-selector-tag\">Out</span> <span class=\"hljs-selector-tag\">of</span> <span class=\"hljs-selector-tag\">memory</span>: <span class=\"hljs-selector-tag\">Kill</span> <span class=\"hljs-selector-tag\">process</span> <span class=\"hljs-selector-tag\">29957</span> (java) <span class=\"hljs-selector-tag\">score</span> <span class=\"hljs-selector-tag\">366</span> <span class=\"hljs-selector-tag\">or</span> <span class=\"hljs-selector-tag\">sacrifice</span> <span class=\"hljs-selector-tag\">child</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-selector-tag\">Jun</span>  <span class=\"hljs-selector-tag\">4</span> <span class=\"hljs-selector-tag\">07</span><span class=\"hljs-selector-pseudo\">:41</span><span class=\"hljs-selector-pseudo\">:59</span> <span class=\"hljs-selector-tag\">plumbr</span> <span class=\"hljs-selector-tag\">kernel</span>: <span class=\"hljs-selector-attr\">[70667120.897701]</span> <span class=\"hljs-selector-tag\">Killed</span> <span class=\"hljs-selector-tag\">process</span> <span class=\"hljs-selector-tag\">29957</span> (java) <span class=\"hljs-selector-tag\">total-vm</span><span class=\"hljs-selector-pseudo\">:2532680kB</span>, <span class=\"hljs-selector-tag\">anon-rss</span><span class=\"hljs-selector-pseudo\">:1416508kB</span>, <span class=\"hljs-selector-tag\">file-rss</span><span class=\"hljs-selector-pseudo\">:0kB</span></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>注意：你可能需要调整交换文件和堆大小，否则你将很快见到熟悉的<span style=\"color:#f33b45;\"><code>Java heap space</code></span>异常。在原作者的测试用例中，使用<span style=\"color:#f33b45;\"><code>-Xmx2g</code></span>指定的2g堆，并具有以下交换配置：</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs properties\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\"># 注意：原作者使用，由于我手里并没有Linux环境，所以并未测试</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attr\">swapoff</span> <span class=\"hljs-string\">-a </span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attr\">dd</span> <span class=\"hljs-string\">if=/dev/zero of=swapfile bs=1024 count=655360</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attr\">mkswap</span> <span class=\"hljs-string\">swapfile</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attr\">swapon</span> <span class=\"hljs-string\">swapfile</span></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p><strong>解决方案</strong></p> \n<p>解决这个问题最有效也是最直接的方法就是升级内存，其他方法诸如：调整OOM Killer配置、水平扩展应用，将内存的负载分摊到若干小实例上..... 我们不建议的做法是增加交换空间，具体原因已经在前文说过。参考资料②中详细的介绍了怎样微调OOM Killer配置以及OOM Killer选择进程算法的实现，建议你参考阅读。</p> \n<blockquote> \n <p>本文转载自：<a href=\"https://www.jianshu.com/p/2fdee831ed03\">https://www.jianshu.com/p/2fdee831ed03</a></p> \n</blockquote> \n<p><strong><img alt=\"\" class=\"has\" height=\"40\" src=\"https://img-blog.csdnimg.cn/20190430092750603.gif\" width=\"50\">你会有不期而遇的温暖和永生不息的希望。</strong></p> \n<p><strong><img alt=\"\" class=\"has\" height=\"42\" src=\"https://img-blog.csdnimg.cn/20190430092811818.jpg\" width=\"47\"></strong><em>喜欢就点个赞关注一下呗&nbsp;~~</em></p> \n<p>&nbsp;</p> \n<p><strong>一个从装环境开始的学习记录公众号，欢迎大家关注：</strong></p> \n<p><img alt=\"\" height=\"258\" src=\"https://img-blog.csdnimg.cn/20200618140202867.jpg\" width=\"258\"></p>\n                </div><div data-report-view=\"{&quot;mod&quot;:&quot;1585297308_001&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/qq_37552993/article/details/89702860&quot;,&quot;extend1&quot;:&quot;pc&quot;,&quot;ab&quot;:&quot;new&quot;}\"><div></div></div>\n        </div>"
  },
  {
    "category": "jvm",
    "qes": "JVM工具入门",
    "ans": "<div id=\"cnblogs_post_body\" class=\"blogpost-body\"><a name=\"_labelTop\"></a><div id=\"navCategory\" style=\"color:#152e97;\"><p style=\"font-size:18px;\"><b>目录</b></p><ul><li><a href=\"#_label0\">一、基础了解</a></li><li><a href=\"#_label1\">二、基础工具</a><ul><li><a href=\"#_label1_0\">2.1、jps</a></li><li><a href=\"#_label1_1\">&nbsp;2.2、jstat</a></li><li><a href=\"#_label1_2\">&nbsp;2.3、jinfo</a></li><li><a href=\"#_label1_3\">2.4、jmap</a></li><li><a href=\"#_label1_4\">&nbsp;2.5、jhat</a></li><li><a href=\"#_label1_5\">2.6、jstack</a></li></ul></li><li><a href=\"#_label2\">三、可视化工具</a><ul><li><a href=\"#_label2_0\">3.1、JConsole</a></li><li><a href=\"#_label2_1\">3.2、VisualVM</a></li><li><a href=\"#_label2_2\">&nbsp;3.3、JMC</a></li></ul></li><li><a href=\"#_label3\">四、其他工具-MAT</a></li></ul></div><p>&nbsp;</p><hr style=\"height:1px;border:none;border-top:1px dashed #0066CC;\">\n    <p>为什么要写一个jvm的工具入门呢，一是自己也不会，二是因为不会所以想学一下，还有就是这个确实很重要，对学习jvm有很多的用处，对定位问题有很大的便利，以前毕业那会我记得有个笔试，知道JAVA_HOME/bin目录的工具吗，例举下3个以上，并说说有什么用，可以怎么使用，，，，我只能说呵呵了，写代码哪里要注意这么多哈</p>\n<div style=\"text-align: right;\"><a href=\"#_labelTop\" style=\"color:#f68a33\">回到顶部</a><a name=\"_label0\"></a></div><h2>一、基础了解</h2>\n<p>我们一般安装java，首先都会来一个java命令（现阶段java8和11用的人比较多，我这里还是8）</p>\n<div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div>\n<pre>D:\\Data\\lugh1&gt;<span style=\"color: rgba(0, 0, 0, 1)\">java\n用法: java [</span>-<span style=\"color: rgba(0, 0, 0, 1)\">options] class [args...]\n           (执行类)\n   或  java [</span>-options] -<span style=\"color: rgba(0, 0, 0, 1)\">jar jarfile [args...]\n           (执行 jar 文件)\n其中选项包括:\n    </span>-d32          使用 <span style=\"color: rgba(128, 0, 128, 1)\">32</span><span style=\"color: rgba(0, 0, 0, 1)\"> 位数据模型 (如果可用)\n    </span>-d64          使用 <span style=\"color: rgba(128, 0, 128, 1)\">64</span><span style=\"color: rgba(0, 0, 0, 1)\"> 位数据模型 (如果可用)\n    </span>-server       选择 <span style=\"color: rgba(128, 0, 0, 1)\">\"</span><span style=\"color: rgba(128, 0, 0, 1)\">server</span><span style=\"color: rgba(128, 0, 0, 1)\">\"</span><span style=\"color: rgba(0, 0, 0, 1)\"> VM\n                  默认 VM 是 server.\n\n    </span>-<span style=\"color: rgba(0, 0, 255, 1)\">cp</span> &lt;目录和 <span style=\"color: rgba(0, 0, 255, 1)\">zip</span>/jar 文件的类搜索路径&gt;\n    -classpath &lt;目录和 <span style=\"color: rgba(0, 0, 255, 1)\">zip</span>/jar 文件的类搜索路径&gt;<span style=\"color: rgba(0, 0, 0, 1)\">\n                  用 ; 分隔的目录, JAR 档案\n                  和 ZIP 档案列表, 用于搜索类文件。\n    </span>-D&lt;名称&gt;=&lt;值&gt;<span style=\"color: rgba(0, 0, 0, 1)\">\n                  设置系统属性\n    </span>-verbose:[class|gc|<span style=\"color: rgba(0, 0, 0, 1)\">jni]\n                  启用详细输出\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">version      输出产品版本并退出\n    </span>-version:&lt;值&gt;<span style=\"color: rgba(0, 0, 0, 1)\">\n                  警告: 此功能已过时, 将在\n                  未来发行版中删除。\n                  需要指定的版本才能运行\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">showversion  输出产品版本并继续\n    </span>-jre-restrict-search | -no-jre-restrict-<span style=\"color: rgba(0, 0, 0, 1)\">search\n                  警告: 此功能已过时, 将在\n                  未来发行版中删除。\n                  在版本搜索中包括</span>/<span style=\"color: rgba(0, 0, 0, 1)\">排除用户专用 JRE\n    </span>-? -<span style=\"color: rgba(0, 0, 0, 1)\">help      输出此帮助消息\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">X            输出非标准选项的帮助\n    </span>-ea[:&lt;packagename&gt;...|:&lt;classname&gt;<span style=\"color: rgba(0, 0, 0, 1)\">]\n    </span>-enableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;<span style=\"color: rgba(0, 0, 0, 1)\">]\n                  按指定的粒度启用断言\n    </span>-da[:&lt;packagename&gt;...|:&lt;classname&gt;<span style=\"color: rgba(0, 0, 0, 1)\">]\n    </span>-disableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;<span style=\"color: rgba(0, 0, 0, 1)\">]\n                  禁用具有指定粒度的断言\n    </span>-esa | -<span style=\"color: rgba(0, 0, 0, 1)\">enablesystemassertions\n                  启用系统断言\n    </span>-dsa | -<span style=\"color: rgba(0, 0, 0, 1)\">disablesystemassertions\n                  禁用系统断言\n    </span>-agentlib:&lt;libname&gt;[=&lt;选项&gt;<span style=\"color: rgba(0, 0, 0, 1)\">]\n                  加载本机代理库 </span>&lt;libname&gt;, 例如 -<span style=\"color: rgba(0, 0, 0, 1)\">agentlib:hprof\n                  另请参阅 </span>-agentlib:jdwp=help 和 -agentlib:hprof=<span style=\"color: rgba(0, 0, 0, 1)\">help\n    </span>-agentpath:&lt;pathname&gt;[=&lt;选项&gt;<span style=\"color: rgba(0, 0, 0, 1)\">]\n                  按完整路径名加载本机代理库\n    </span>-javaagent:&lt;jarpath&gt;[=&lt;选项&gt;<span style=\"color: rgba(0, 0, 0, 1)\">]\n                  加载 Java 编程语言代理, 请参阅 java.lang.instrument\n    </span>-splash:&lt;imagepath&gt;<span style=\"color: rgba(0, 0, 0, 1)\">\n                  使用指定的图像显示启动屏幕</span></pre>\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div>\n<p>参数分为三类，分别是：</p>\n<p><strong>标准参数（很稳定的）&nbsp;</strong></p>\n<p>-help</p>\n<p>&nbsp;-version</p>\n<p><strong>-X参数 （非标准参数，不能保证被所有的JVM实现都支持）</strong></p>\n<p>&nbsp; -Xint</p>\n<p>&nbsp; -Xcomp</p>\n<p><strong>-XX参数（使用率较高）</strong></p>\n<p>&nbsp; -XX:newSize</p>\n<p>&nbsp; -XX:+UseSerialGC</p>\n<p>反正以前我是不知道-X，-XX，+UseSerialGC中的+号是什么，或许现在知道，好像也比较容易忘记，因为也没经常使用呀</p>\n<p>来试一下java -X</p>\n<div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div>\n<pre>D:\\Data\\lugh1&gt;java -<span style=\"color: rgba(0, 0, 0, 1)\">X\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">Xmixed           混合模式执行 (默认)\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">Xint             仅解释模式执行\n    </span>-Xbootclasspath:&lt;用 ; 分隔的目录和 <span style=\"color: rgba(0, 0, 255, 1)\">zip</span>/jar 文件&gt;<span style=\"color: rgba(0, 0, 0, 1)\">\n                      设置搜索路径以引导类和资源\n    </span>-Xbootclasspath/a:&lt;用 ; 分隔的目录和 <span style=\"color: rgba(0, 0, 255, 1)\">zip</span>/jar 文件&gt;<span style=\"color: rgba(0, 0, 0, 1)\">\n                      附加在引导类路径末尾\n    </span>-Xbootclasspath/p:&lt;用 ; 分隔的目录和 <span style=\"color: rgba(0, 0, 255, 1)\">zip</span>/jar 文件&gt;<span style=\"color: rgba(0, 0, 0, 1)\">\n                      置于引导类路径之前\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">Xdiag            显示附加诊断消息\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">Xnoclassgc       禁用类垃圾收集\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">Xincgc           启用增量垃圾收集\n    </span>-Xloggc:&lt;<span style=\"color: rgba(0, 0, 255, 1)\">file</span>&gt;<span style=\"color: rgba(0, 0, 0, 1)\">    将 GC 状态记录在文件中 (带时间戳)\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">Xbatch           禁用后台编译\n    </span>-Xms&lt;size&gt;<span style=\"color: rgba(0, 0, 0, 1)\">        设置初始 Java 堆大小\n    </span>-Xmx&lt;size&gt;<span style=\"color: rgba(0, 0, 0, 1)\">        设置最大 Java 堆大小\n    </span>-Xss&lt;size&gt;<span style=\"color: rgba(0, 0, 0, 1)\">        设置 Java 线程堆栈大小\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">Xprof            输出 cpu 配置文件数据\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">Xfuture          启用最严格的检查, 预期将来的默认值\n    </span>-Xrs              减少 Java/<span style=\"color: rgba(0, 0, 0, 1)\">VM 对操作系统信号的使用 (请参阅文档)\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">Xcheck:jni       对 JNI 函数执行其他检查\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">Xshare:off       不尝试使用共享类数据\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">Xshare:auto      在可能的情况下使用共享类数据 (默认)\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">Xshare:on        要求使用共享类数据, 否则将失败。\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">XshowSettings    显示所有设置并继续\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">XshowSettings:all\n                      显示所有设置并继续\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">XshowSettings:vm 显示所有与 vm 相关的设置并继续\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">XshowSettings:properties\n                      显示所有属性设置并继续\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">XshowSettings:locale\n                      显示所有与区域设置相关的设置并继续</span></pre>\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div>\n<p>-Xms&lt;size&gt; 设置初始 Java 堆大小<br>-Xmx&lt;size&gt; 设置最大 Java 堆大小<br>-Xss&lt;size&gt; 设置 Java 线程堆栈大小</p>\n<p><span><span><span><span>是不是觉得上面几个参数很熟悉，就是日常调整堆和栈大小的参数呀，很好记吧，比如java ‐Xms2048m ‐Xmx2048m&nbsp; class_name</span></span></span></span></p>\n<p>在解释模式(interpreted mode)下，-Xint标记会强制JVM执行所有的字节码，当然这会降低运行速度，通常低10倍或更多</p>\n<p>-Xcomp参数与它（-Xint）正好相反，JVM在第一次使用时会把所有的字节码编译成本地代码，从而带来最大程度的优化。然而，很多应用在使用-Xcomp也会有一些性能损失，当然这比使用-Xint损失的少，原因是-xcomp没有让JVM启用JIT编译器的全部功能。JIT编译器可以对是否需要编译做判断，如果所有代码都进行编译的话，对于一些只执行一次的代码就没有意义了<br>-Xmixed是混合模式，将解释模式与编译模式进行混合使用，由jvm自己决定，这是jvm默认的模式，也是推荐使用的模式</p>\n<p>&nbsp;</p>\n<p>接下来了解下<strong>-XX参数</strong>：</p>\n<p>-XX参数的使用有2种方式，一种是boolean类型，一种是非boolean类型（好像有点废话）</p>\n<ul>\n<li>boolean类型</li>\n\n</ul>\n<div class=\"cnblogs_code\">\n<pre>格式：-XX:[+-<span style=\"color: rgba(0, 0, 0, 1)\">]\n如：</span>-XX:+DisableExplicitGC 表示禁用手动调用gc操作，也就是说调用System.gc()无效，+表示启用，-表示禁止吧</pre>\n</div>\n<p>非boolean类型</p>\n<div class=\"cnblogs_code\">\n<pre>格式：-<span style=\"color: rgba(0, 0, 0, 1)\">XX:\n如：</span>-XX:NewRatio=<span style=\"color: rgba(128, 0, 128, 1)\">1</span> 表示新生代和老年代的比值</pre>\n</div>\n<p>那么多参数怎么记得呢，可以使用java -XX:+PrintFlagsFinal查看所有参数呀</p>\n<div class=\"cnblogs_code\"><img src=\"https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" id=\"code_img_closed_635c5c40-349c-47b9-92c9-7455cc487585\" class=\"code_img_closed\" style=\"display: none;\"><img src=\"https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" id=\"code_img_opened_635c5c40-349c-47b9-92c9-7455cc487585\" class=\"code_img_opened\" style=\"\">\n<div id=\"cnblogs_code_open_635c5c40-349c-47b9-92c9-7455cc487585\" class=\"cnblogs_code_hide\" style=\"display: block;\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div>\n<pre>D:\\MyData\\lugh1&gt;java -XX:+<span style=\"color: rgba(0, 0, 0, 1)\">PrintFlagsFinal\n[Global flags]\n     intx ActiveProcessorCount                      </span>= -<span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx AdaptiveSizeDecrementScaleFactor          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">4</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx AdaptiveSizeMajorGCDecayTimeScale         </span>= <span style=\"color: rgba(128, 0, 128, 1)\">10</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx AdaptiveSizePausePolicy                   </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx AdaptiveSizePolicyCollectionCostMargin    </span>= <span style=\"color: rgba(128, 0, 128, 1)\">50</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx AdaptiveSizePolicyInitializingSteps       </span>= <span style=\"color: rgba(128, 0, 128, 1)\">20</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx AdaptiveSizePolicyOutputInterval          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx AdaptiveSizePolicyWeight                  </span>= <span style=\"color: rgba(128, 0, 128, 1)\">10</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx AdaptiveSizeThroughPutPolicy              </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx AdaptiveTimeWeight                        </span>= <span style=\"color: rgba(128, 0, 128, 1)\">25</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> AdjustConcurrency                         = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> AggressiveHeap                            = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> AggressiveOpts                            = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     intx AliasLevel                                </span>= <span style=\"color: rgba(128, 0, 128, 1)\">3</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> AlignVector                               = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {C2 product}\n     intx AllocateInstancePrefetchLines             </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx AllocatePrefetchDistance                  </span>= <span style=\"color: rgba(128, 0, 128, 1)\">192</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {product}\n     intx AllocatePrefetchInstr                     </span>= <span style=\"color: rgba(128, 0, 128, 1)\">3</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx AllocatePrefetchLines                     </span>= <span style=\"color: rgba(128, 0, 128, 1)\">4</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx AllocatePrefetchStepSize                  </span>= <span style=\"color: rgba(128, 0, 128, 1)\">64</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx AllocatePrefetchStyle                     </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> AllowJNIEnvProxy                          = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> AllowNonVirtualCalls                      = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> AllowParallelDefineClass                  = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> AllowUserSignalHandlers                   = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> AlwaysActAsServerClassMachine             = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> AlwaysCompileLoopMethods                  = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> AlwaysLockClassLoader                     = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> AlwaysPreTouch                            = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> AlwaysRestoreFPU                          = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> AlwaysTenure                              = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> AssertOnSuspendWaitFailure                = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> AssumeMP                                  = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     intx AutoBoxCacheMax                           </span>= <span style=\"color: rgba(128, 0, 128, 1)\">128</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {C2 product}\n    uintx AutoGCSelectPauseMillis                   </span>= <span style=\"color: rgba(128, 0, 128, 1)\">5000</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     intx BCEATraceLevel                            </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx BackEdgeThreshold                         </span>= <span style=\"color: rgba(128, 0, 128, 1)\">100000</span><span style=\"color: rgba(0, 0, 0, 1)\">                              {pd product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> BackgroundCompilation                     = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {pd product}\n    uintx BaseFootPrintEstimate                     </span>= <span style=\"color: rgba(128, 0, 128, 1)\">268435456</span><span style=\"color: rgba(0, 0, 0, 1)\">                           {product}\n     intx BiasedLockingBulkRebiasThreshold          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">20</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx BiasedLockingBulkRevokeThreshold          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">40</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx BiasedLockingDecayTime                    </span>= <span style=\"color: rgba(128, 0, 128, 1)\">25000</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     intx BiasedLockingStartupDelay                 </span>= <span style=\"color: rgba(128, 0, 128, 1)\">4000</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> BindGCTaskThreadsToCPUs                   = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> BlockLayoutByFrequency                    = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     intx BlockLayoutMinDiamondPercentage           </span>= <span style=\"color: rgba(128, 0, 128, 1)\">20</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> BlockLayoutRotateLoops                    = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> BranchOnRegister                          = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> BytecodeVerificationLocal                 = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> BytecodeVerificationRemote                = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> C1OptimizeVirtualCallProfiling            = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C1 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> C1ProfileBranches                         = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C1 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> C1ProfileCalls                            = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C1 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> C1ProfileCheckcasts                       = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C1 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> C1ProfileInlinedCalls                     = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C1 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> C1ProfileVirtualCalls                     = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C1 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> C1UpdateMethodData                        = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C1 product}\n     intx CICompilerCount                          :</span>= <span style=\"color: rgba(128, 0, 128, 1)\">3</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CICompilerCountPerCPU                     = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CITime                                    = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSAbortSemantics                         = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n    uintx CMSAbortablePrecleanMinWorkPerIteration   </span>= <span style=\"color: rgba(128, 0, 128, 1)\">100</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {product}\n     intx CMSAbortablePrecleanWaitMillis            </span>= <span style=\"color: rgba(128, 0, 128, 1)\">100</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {manageable}\n    uintx CMSBitMapYieldQuantum                     </span>= <span style=\"color: rgba(128, 0, 128, 1)\">10485760</span><span style=\"color: rgba(0, 0, 0, 1)\">                            {product}\n    uintx CMSBootstrapOccupancy                     </span>= <span style=\"color: rgba(128, 0, 128, 1)\">50</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSClassUnloadingEnabled                  = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n    uintx CMSClassUnloadingMaxInterval              </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSCleanOnEnter                           = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSCompactWhenClearAllSoftRefs            = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n    uintx CMSConcMarkMultiple                       </span>= <span style=\"color: rgba(128, 0, 128, 1)\">32</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSConcurrentMTEnabled                    = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n    uintx CMSCoordinatorYieldSleepCount             </span>= <span style=\"color: rgba(128, 0, 128, 1)\">10</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSDumpAtPromotionFailure                 = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSEdenChunksRecordAlways                 = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n    uintx CMSExpAvgFactor                           </span>= <span style=\"color: rgba(128, 0, 128, 1)\">50</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSExtrapolateSweep                       = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n    uintx CMSFullGCsBeforeCompaction                </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx CMSIncrementalDutyCycle                   </span>= <span style=\"color: rgba(128, 0, 128, 1)\">10</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx CMSIncrementalDutyCycleMin                </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSIncrementalMode                        = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n    uintx CMSIncrementalOffset                      </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSIncrementalPacing                      = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n    uintx CMSIncrementalSafetyFactor                </span>= <span style=\"color: rgba(128, 0, 128, 1)\">10</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx CMSIndexedFreeListReplenish               </span>= <span style=\"color: rgba(128, 0, 128, 1)\">4</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx CMSInitiatingOccupancyFraction            </span>= -<span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx CMSIsTooFullPercentage                    </span>= <span style=\"color: rgba(128, 0, 128, 1)\">98</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n   </span><span style=\"color: rgba(0, 0, 255, 1)\">double</span> CMSLargeCoalSurplusPercent                = <span style=\"color: rgba(128, 0, 128, 1)\">0.950000</span><span style=\"color: rgba(0, 0, 0, 1)\">                            {product}\n   </span><span style=\"color: rgba(0, 0, 255, 1)\">double</span> CMSLargeSplitSurplusPercent               = <span style=\"color: rgba(128, 0, 128, 1)\">1.000000</span><span style=\"color: rgba(0, 0, 0, 1)\">                            {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSLoopWarn                               = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n    uintx CMSMaxAbortablePrecleanLoops              </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx CMSMaxAbortablePrecleanTime               </span>= <span style=\"color: rgba(128, 0, 128, 1)\">5000</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n    uintx CMSOldPLABMax                             </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1024</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n    uintx CMSOldPLABMin                             </span>= <span style=\"color: rgba(128, 0, 128, 1)\">16</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx CMSOldPLABNumRefills                      </span>= <span style=\"color: rgba(128, 0, 128, 1)\">4</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx CMSOldPLABReactivityFactor                </span>= <span style=\"color: rgba(128, 0, 128, 1)\">2</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSOldPLABResizeQuicker                   = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n    uintx CMSOldPLABToleranceFactor                 </span>= <span style=\"color: rgba(128, 0, 128, 1)\">4</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSPLABRecordAlways                       = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n    uintx CMSParPromoteBlocksToClaim                </span>= <span style=\"color: rgba(128, 0, 128, 1)\">16</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSParallelInitialMarkEnabled             = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSParallelRemarkEnabled                  = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSParallelSurvivorRemarkEnabled          = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n    uintx CMSPrecleanDenominator                    </span>= <span style=\"color: rgba(128, 0, 128, 1)\">3</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx CMSPrecleanIter                           </span>= <span style=\"color: rgba(128, 0, 128, 1)\">3</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx CMSPrecleanNumerator                      </span>= <span style=\"color: rgba(128, 0, 128, 1)\">2</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSPrecleanRefLists1                      = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSPrecleanRefLists2                      = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSPrecleanSurvivors1                     = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSPrecleanSurvivors2                     = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n    uintx CMSPrecleanThreshold                      </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1000</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSPrecleaningEnabled                     = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSPrintChunksInDump                      = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSPrintEdenSurvivorChunks                = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSPrintObjectsInDump                     = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n    uintx CMSRemarkVerifyVariant                    </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSReplenishIntermediate                  = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n    uintx CMSRescanMultiple                         </span>= <span style=\"color: rgba(128, 0, 128, 1)\">32</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx CMSSamplingGrain                          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">16384</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSScavengeBeforeRemark                   = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n    uintx CMSScheduleRemarkEdenPenetration          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">50</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx CMSScheduleRemarkEdenSizeThreshold        </span>= <span style=\"color: rgba(128, 0, 128, 1)\">2097152</span><span style=\"color: rgba(0, 0, 0, 1)\">                             {product}\n    uintx CMSScheduleRemarkSamplingRatio            </span>= <span style=\"color: rgba(128, 0, 128, 1)\">5</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n   </span><span style=\"color: rgba(0, 0, 255, 1)\">double</span> CMSSmallCoalSurplusPercent                = <span style=\"color: rgba(128, 0, 128, 1)\">1.050000</span><span style=\"color: rgba(0, 0, 0, 1)\">                            {product}\n   </span><span style=\"color: rgba(0, 0, 255, 1)\">double</span> CMSSmallSplitSurplusPercent               = <span style=\"color: rgba(128, 0, 128, 1)\">1.100000</span><span style=\"color: rgba(0, 0, 0, 1)\">                            {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSSplitIndexedFreeListBlocks             = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     intx CMSTriggerInterval                        </span>= -<span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {manageable}\n    uintx CMSTriggerRatio                           </span>= <span style=\"color: rgba(128, 0, 128, 1)\">80</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx CMSWaitDuration                           </span>= <span style=\"color: rgba(128, 0, 128, 1)\">2000</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {manageable}\n    uintx CMSWorkQueueDrainThreshold                </span>= <span style=\"color: rgba(128, 0, 128, 1)\">10</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CMSYield                                  = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n    uintx CMSYieldSleepCount                        </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx CMSYoungGenPerWorker                      </span>= <span style=\"color: rgba(128, 0, 128, 1)\">67108864</span><span style=\"color: rgba(0, 0, 0, 1)\">                            {pd product}\n    uintx CMS_FLSPadding                            </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx CMS_FLSWeight                             </span>= <span style=\"color: rgba(128, 0, 128, 1)\">75</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx CMS_SweepPadding                          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx CMS_SweepTimerThresholdMillis             </span>= <span style=\"color: rgba(128, 0, 128, 1)\">10</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx CMS_SweepWeight                           </span>= <span style=\"color: rgba(128, 0, 128, 1)\">75</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CheckEndorsedAndExtDirs                   = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CheckJNICalls                             = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ClassUnloading                            = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ClassUnloadingWithConcurrentMark          = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     intx ClearFPUAtPark                            </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ClipInlining                              = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n    uintx CodeCacheExpansionSize                    </span>= <span style=\"color: rgba(128, 0, 128, 1)\">65536</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {pd product}\n    uintx CodeCacheMinimumFreeSpace                 </span>= <span style=\"color: rgba(128, 0, 128, 1)\">512000</span><span style=\"color: rgba(0, 0, 0, 1)\">                              {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CollectGen0First                          = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CompactFields                             = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     intx CompilationPolicyChoice                   </span>= <span style=\"color: rgba(128, 0, 128, 1)\">3</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\nccstrlist CompileCommand                            </span>=<span style=\"color: rgba(0, 0, 0, 1)\">                                     {product}\n    ccstr CompileCommandFile                        </span>=<span style=\"color: rgba(0, 0, 0, 1)\">                                     {product}\nccstrlist CompileOnly                               </span>=<span style=\"color: rgba(0, 0, 0, 1)\">                                     {product}\n     intx CompileThreshold                          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">10000</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {pd product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CompilerThreadHintNoPreempt               = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     intx CompilerThreadPriority                    </span>= -<span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx CompilerThreadStackSize                   </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {pd product}\n    uintx CompressedClassSpaceSize                  </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1073741824</span><span style=\"color: rgba(0, 0, 0, 1)\">                          {product}\n    uintx ConcGCThreads                             </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx ConditionalMoveLimit                      </span>= <span style=\"color: rgba(128, 0, 128, 1)\">3</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {C2 pd product}\n     intx ContendedPaddingWidth                     </span>= <span style=\"color: rgba(128, 0, 128, 1)\">128</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ConvertSleepToYield                       = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {pd product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ConvertYieldToSleep                       = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CrashOnOutOfMemoryError                   = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CreateMinidumpOnCrash                     = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> CriticalJNINatives                        = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> DTraceAllocProbes                         = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> DTraceMethodProbes                        = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> DTraceMonitorProbes                       = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> Debugging                                 = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n    uintx DefaultMaxRAMFraction                     </span>= <span style=\"color: rgba(128, 0, 128, 1)\">4</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx DefaultThreadPriority                     </span>= -<span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx DeferPollingPageLoopCount                 </span>= -<span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx DeferThrSuspendLoopCount                  </span>= <span style=\"color: rgba(128, 0, 128, 1)\">4000</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> DeoptimizeRandom                          = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> DisableAttachMechanism                    = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> DisableExplicitGC                         = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> DisplayVMOutputToStderr                   = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> DisplayVMOutputToStdout                   = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> DoEscapeAnalysis                          = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> DontCompileHugeMethods                    = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> DontYieldALot                             = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {pd product}\n    ccstr DumpLoadedClassList                       </span>=<span style=\"color: rgba(0, 0, 0, 1)\">                                     {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> DumpReplayDataOnError                     = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> DumpSharedSpaces                          = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> EagerXrunInit                             = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     intx EliminateAllocationArraySizeLimit         </span>= <span style=\"color: rgba(128, 0, 128, 1)\">64</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> EliminateAllocations                      = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> EliminateAutoBox                          = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> EliminateLocks                            = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> EliminateNestedLocks                      = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     intx EmitSync                                  </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> EnableContended                           = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> EnableResourceManagementTLABCache         = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> EnableSharedLookupCache                   = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> EnableTracing                             = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n    uintx ErgoHeapSizeLimit                         </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    ccstr ErrorFile                                 </span>=<span style=\"color: rgba(0, 0, 0, 1)\">                                     {product}\n    ccstr ErrorReportServer                         </span>=<span style=\"color: rgba(0, 0, 0, 1)\">                                     {product}\n   </span><span style=\"color: rgba(0, 0, 255, 1)\">double</span> EscapeAnalysisTimeout                     = <span style=\"color: rgba(128, 0, 128, 1)\">20.000000</span><span style=\"color: rgba(0, 0, 0, 1)\">                           {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> EstimateArgEscape                         = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ExitOnOutOfMemoryError                    = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ExplicitGCInvokesConcurrent               = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ExplicitGCInvokesConcurrentAndUnloadsClasses  = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ExtendedDTraceProbes                      = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n    ccstr ExtraSharedClassListFile                  </span>=<span style=\"color: rgba(0, 0, 0, 1)\">                                     {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> FLSAlwaysCoalesceLarge                    = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n    uintx FLSCoalescePolicy                         </span>= <span style=\"color: rgba(128, 0, 128, 1)\">2</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n   </span><span style=\"color: rgba(0, 0, 255, 1)\">double</span> FLSLargestBlockCoalesceProximity          = <span style=\"color: rgba(128, 0, 128, 1)\">0.990000</span><span style=\"color: rgba(0, 0, 0, 1)\">                            {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> FailOverToOldVerifier                     = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> FastTLABRefill                            = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     intx FenceInstruction                          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {ARCH product}\n     intx FieldsAllocationStyle                     </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> FilterSpuriousWakeups                     = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n    ccstr FlightRecorderOptions                     </span>=<span style=\"color: rgba(0, 0, 0, 1)\">                                     {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ForceNUMA                                 = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ForceTimeHighResolution                   = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     intx FreqInlineSize                            </span>= <span style=\"color: rgba(128, 0, 128, 1)\">325</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {pd product}\n   </span><span style=\"color: rgba(0, 0, 255, 1)\">double</span> G1ConcMarkStepDurationMillis              = <span style=\"color: rgba(128, 0, 128, 1)\">10.000000</span><span style=\"color: rgba(0, 0, 0, 1)\">                           {product}\n    uintx G1ConcRSHotCardLimit                      </span>= <span style=\"color: rgba(128, 0, 128, 1)\">4</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx G1ConcRSLogCacheSize                      </span>= <span style=\"color: rgba(128, 0, 128, 1)\">10</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx G1ConcRefinementGreenZone                 </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx G1ConcRefinementRedZone                   </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx G1ConcRefinementServiceIntervalMillis     </span>= <span style=\"color: rgba(128, 0, 128, 1)\">300</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {product}\n    uintx G1ConcRefinementThreads                   </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx G1ConcRefinementThresholdStep             </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx G1ConcRefinementYellowZone                </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx G1ConfidencePercent                       </span>= <span style=\"color: rgba(128, 0, 128, 1)\">50</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx G1HeapRegionSize                          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx G1HeapWastePercent                        </span>= <span style=\"color: rgba(128, 0, 128, 1)\">5</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx G1MixedGCCountTarget                      </span>= <span style=\"color: rgba(128, 0, 128, 1)\">8</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx G1RSetRegionEntries                       </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx G1RSetScanBlockSize                       </span>= <span style=\"color: rgba(128, 0, 128, 1)\">64</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx G1RSetSparseRegionEntries                 </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx G1RSetUpdatingPauseTimePercent            </span>= <span style=\"color: rgba(128, 0, 128, 1)\">10</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx G1RefProcDrainInterval                    </span>= <span style=\"color: rgba(128, 0, 128, 1)\">10</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx G1ReservePercent                          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">10</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx G1SATBBufferEnqueueingThresholdPercent    </span>= <span style=\"color: rgba(128, 0, 128, 1)\">60</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx G1SATBBufferSize                          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1024</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     intx G1UpdateBufferSize                        </span>= <span style=\"color: rgba(128, 0, 128, 1)\">256</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> G1UseAdaptiveConcRefinement               = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n    uintx GCDrainStackTargetSize                    </span>= <span style=\"color: rgba(128, 0, 128, 1)\">64</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx GCHeapFreeLimit                           </span>= <span style=\"color: rgba(128, 0, 128, 1)\">2</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx GCLockerEdenExpansionPercent              </span>= <span style=\"color: rgba(128, 0, 128, 1)\">5</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> GCLockerInvokesConcurrent                 = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n    uintx GCLogFileSize                             </span>= <span style=\"color: rgba(128, 0, 128, 1)\">8192</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n    uintx GCPauseIntervalMillis                     </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx GCTaskTimeStampEntries                    </span>= <span style=\"color: rgba(128, 0, 128, 1)\">200</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {product}\n    uintx GCTimeLimit                               </span>= <span style=\"color: rgba(128, 0, 128, 1)\">98</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx GCTimeRatio                               </span>= <span style=\"color: rgba(128, 0, 128, 1)\">99</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx HeapBaseMinAddress                        </span>= <span style=\"color: rgba(128, 0, 128, 1)\">2147483648</span><span style=\"color: rgba(0, 0, 0, 1)\">                          {pd product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> HeapDumpAfterFullGC                       = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {manageable}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> HeapDumpBeforeFullGC                      = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {manageable}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> HeapDumpOnOutOfMemoryError                = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {manageable}\n    ccstr HeapDumpPath                              </span>=<span style=\"color: rgba(0, 0, 0, 1)\">                                     {manageable}\n    uintx HeapFirstMaximumCompactionCount           </span>= <span style=\"color: rgba(128, 0, 128, 1)\">3</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx HeapMaximumCompactionInterval             </span>= <span style=\"color: rgba(128, 0, 128, 1)\">20</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx HeapSizePerGCThread                       </span>= <span style=\"color: rgba(128, 0, 128, 1)\">87241520</span><span style=\"color: rgba(0, 0, 0, 1)\">                            {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> IgnoreEmptyClassPaths                     = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> IgnoreUnrecognizedVMOptions               = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n    uintx IncreaseFirstTierCompileThresholdAt       </span>= <span style=\"color: rgba(128, 0, 128, 1)\">50</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> IncrementalInline                         = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n    uintx InitialBootClassLoaderMetaspaceSize       </span>= <span style=\"color: rgba(128, 0, 128, 1)\">4194304</span><span style=\"color: rgba(0, 0, 0, 1)\">                             {product}\n    uintx InitialCodeCacheSize                      </span>= <span style=\"color: rgba(128, 0, 128, 1)\">2555904</span><span style=\"color: rgba(0, 0, 0, 1)\">                             {pd product}\n    uintx InitialHeapSize                          :</span>= <span style=\"color: rgba(128, 0, 128, 1)\">132120576</span><span style=\"color: rgba(0, 0, 0, 1)\">                           {product}\n    uintx InitialRAMFraction                        </span>= <span style=\"color: rgba(128, 0, 128, 1)\">64</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n   </span><span style=\"color: rgba(0, 0, 255, 1)\">double</span> InitialRAMPercentage                      = <span style=\"color: rgba(128, 0, 128, 1)\">1.562500</span><span style=\"color: rgba(0, 0, 0, 1)\">                            {product}\n    uintx InitialSurvivorRatio                      </span>= <span style=\"color: rgba(128, 0, 128, 1)\">8</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx InitialTenuringThreshold                  </span>= <span style=\"color: rgba(128, 0, 128, 1)\">7</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx InitiatingHeapOccupancyPercent            </span>= <span style=\"color: rgba(128, 0, 128, 1)\">45</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> Inline                                    = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n    ccstr InlineDataFile                            </span>=<span style=\"color: rgba(0, 0, 0, 1)\">                                     {product}\n     intx InlineSmallCode                           </span>= <span style=\"color: rgba(128, 0, 128, 1)\">2000</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {pd product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> InlineSynchronizedMethods                 = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C1 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> InsertMemBarAfterArraycopy                = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     intx InteriorEntryAlignment                    </span>= <span style=\"color: rgba(128, 0, 128, 1)\">16</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {C2 pd product}\n     intx InterpreterProfilePercentage              </span>= <span style=\"color: rgba(128, 0, 128, 1)\">33</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> JNIDetachReleasesMonitors                 = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> JavaMonitorsInStackTrace                  = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     intx JavaPriority10_To_OSPriority              </span>= -<span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx JavaPriority1_To_OSPriority               </span>= -<span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx JavaPriority2_To_OSPriority               </span>= -<span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx JavaPriority3_To_OSPriority               </span>= -<span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx JavaPriority4_To_OSPriority               </span>= -<span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx JavaPriority5_To_OSPriority               </span>= -<span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx JavaPriority6_To_OSPriority               </span>= -<span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx JavaPriority7_To_OSPriority               </span>= -<span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx JavaPriority8_To_OSPriority               </span>= -<span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx JavaPriority9_To_OSPriority               </span>= -<span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> LIRFillDelaySlots                         = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {C1 pd product}\n    uintx LargePageHeapSizeThreshold                </span>= <span style=\"color: rgba(128, 0, 128, 1)\">134217728</span><span style=\"color: rgba(0, 0, 0, 1)\">                           {product}\n    uintx LargePageSizeInBytes                      </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> LazyBootClassLoader                       = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     intx LiveNodeCountInliningCutoff               </span>= <span style=\"color: rgba(128, 0, 128, 1)\">40000</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> LogCommercialFeatures                     = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     intx LoopMaxUnroll                             </span>= <span style=\"color: rgba(128, 0, 128, 1)\">16</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {C2 product}\n     intx LoopOptsCount                             </span>= <span style=\"color: rgba(128, 0, 128, 1)\">43</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {C2 product}\n     intx LoopUnrollLimit                           </span>= <span style=\"color: rgba(128, 0, 128, 1)\">60</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {C2 pd product}\n     intx LoopUnrollMin                             </span>= <span style=\"color: rgba(128, 0, 128, 1)\">4</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> LoopUnswitching                           = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ManagementServer                          = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n    uintx MarkStackSize                             </span>= <span style=\"color: rgba(128, 0, 128, 1)\">4194304</span><span style=\"color: rgba(0, 0, 0, 1)\">                             {product}\n    uintx MarkStackSizeMax                          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">536870912</span><span style=\"color: rgba(0, 0, 0, 1)\">                           {product}\n    uintx MarkSweepAlwaysCompactCount               </span>= <span style=\"color: rgba(128, 0, 128, 1)\">4</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx MarkSweepDeadRatio                        </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx MaxBCEAEstimateLevel                      </span>= <span style=\"color: rgba(128, 0, 128, 1)\">5</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx MaxBCEAEstimateSize                       </span>= <span style=\"color: rgba(128, 0, 128, 1)\">150</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {product}\n    uintx MaxDirectMemorySize                       </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> MaxFDLimit                                = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n    uintx MaxGCMinorPauseMillis                     </span>= <span style=\"color: rgba(128, 0, 128, 1)\">4294967295</span><span style=\"color: rgba(0, 0, 0, 1)\">                          {product}\n    uintx MaxGCPauseMillis                          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">4294967295</span><span style=\"color: rgba(0, 0, 0, 1)\">                          {product}\n    uintx MaxHeapFreeRatio                          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">100</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {manageable}\n    uintx MaxHeapSize                              :</span>= <span style=\"color: rgba(128, 0, 128, 1)\">2111832064</span><span style=\"color: rgba(0, 0, 0, 1)\">                          {product}\n     intx MaxInlineLevel                            </span>= <span style=\"color: rgba(128, 0, 128, 1)\">9</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx MaxInlineSize                             </span>= <span style=\"color: rgba(128, 0, 128, 1)\">35</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx MaxJNILocalCapacity                       </span>= <span style=\"color: rgba(128, 0, 128, 1)\">65536</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     intx MaxJavaStackTraceDepth                    </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1024</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     intx MaxJumpTableSize                          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">65000</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {C2 product}\n     intx MaxJumpTableSparseness                    </span>= <span style=\"color: rgba(128, 0, 128, 1)\">5</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {C2 product}\n     intx MaxLabelRootDepth                         </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1100</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     intx MaxLoopPad                                </span>= <span style=\"color: rgba(128, 0, 128, 1)\">11</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {C2 product}\n    uintx MaxMetaspaceExpansion                     </span>= <span style=\"color: rgba(128, 0, 128, 1)\">5451776</span><span style=\"color: rgba(0, 0, 0, 1)\">                             {product}\n    uintx MaxMetaspaceFreeRatio                     </span>= <span style=\"color: rgba(128, 0, 128, 1)\">70</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx MaxMetaspaceSize                          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">4294901760</span><span style=\"color: rgba(0, 0, 0, 1)\">                          {product}\n    uintx MaxNewSize                               :</span>= <span style=\"color: rgba(128, 0, 128, 1)\">703594496</span><span style=\"color: rgba(0, 0, 0, 1)\">                           {product}\n     intx MaxNodeLimit                              </span>= <span style=\"color: rgba(128, 0, 128, 1)\">75000</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {C2 product}\n uint64_t MaxRAM                                    </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {pd product}\n    uintx MaxRAMFraction                            </span>= <span style=\"color: rgba(128, 0, 128, 1)\">4</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n   </span><span style=\"color: rgba(0, 0, 255, 1)\">double</span> MaxRAMPercentage                          = <span style=\"color: rgba(128, 0, 128, 1)\">25.000000</span><span style=\"color: rgba(0, 0, 0, 1)\">                           {product}\n     intx MaxRecursiveInlineLevel                   </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx MaxTenuringThreshold                      </span>= <span style=\"color: rgba(128, 0, 128, 1)\">15</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx MaxTrivialSize                            </span>= <span style=\"color: rgba(128, 0, 128, 1)\">6</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx MaxVectorSize                             </span>= <span style=\"color: rgba(128, 0, 128, 1)\">32</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {C2 product}\n    uintx MetaspaceSize                             </span>= <span style=\"color: rgba(128, 0, 128, 1)\">21807104</span><span style=\"color: rgba(0, 0, 0, 1)\">                            {pd product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> MethodFlushing                            = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n    uintx MinHeapDeltaBytes                        :</span>= <span style=\"color: rgba(128, 0, 128, 1)\">524288</span><span style=\"color: rgba(0, 0, 0, 1)\">                              {product}\n    uintx MinHeapFreeRatio                          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {manageable}\n     intx MinInliningThreshold                      </span>= <span style=\"color: rgba(128, 0, 128, 1)\">250</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {product}\n     intx MinJumpTableSize                          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">10</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {C2 pd product}\n    uintx MinMetaspaceExpansion                     </span>= <span style=\"color: rgba(128, 0, 128, 1)\">339968</span><span style=\"color: rgba(0, 0, 0, 1)\">                              {product}\n    uintx MinMetaspaceFreeRatio                     </span>= <span style=\"color: rgba(128, 0, 128, 1)\">40</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx MinRAMFraction                            </span>= <span style=\"color: rgba(128, 0, 128, 1)\">2</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n   </span><span style=\"color: rgba(0, 0, 255, 1)\">double</span> MinRAMPercentage                          = <span style=\"color: rgba(128, 0, 128, 1)\">50.000000</span><span style=\"color: rgba(0, 0, 0, 1)\">                           {product}\n    uintx MinSurvivorRatio                          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">3</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx MinTLABSize                               </span>= <span style=\"color: rgba(128, 0, 128, 1)\">2048</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     intx MonitorBound                              </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> MonitorInUseLists                         = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     intx MultiArrayExpandLimit                     </span>= <span style=\"color: rgba(128, 0, 128, 1)\">6</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> MustCallLoadClassInternal                 = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n    uintx NUMAChunkResizeWeight                     </span>= <span style=\"color: rgba(128, 0, 128, 1)\">20</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx NUMAInterleaveGranularity                 </span>= <span style=\"color: rgba(128, 0, 128, 1)\">2097152</span><span style=\"color: rgba(0, 0, 0, 1)\">                             {product}\n    uintx NUMAPageScanRate                          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">256</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {product}\n    uintx NUMASpaceResizeRate                       </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1073741824</span><span style=\"color: rgba(0, 0, 0, 1)\">                          {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> NUMAStats                                 = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n    ccstr NativeMemoryTracking                      </span>=<span style=\"color: rgba(0, 0, 0, 1)\"> off                                 {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> NeedsDeoptSuspend                         = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {pd product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> NeverActAsServerClassMachine              = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {pd product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> NeverTenure                               = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n    uintx NewRatio                                  </span>= <span style=\"color: rgba(128, 0, 128, 1)\">2</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx NewSize                                  :</span>= <span style=\"color: rgba(128, 0, 128, 1)\">44040192</span><span style=\"color: rgba(0, 0, 0, 1)\">                            {product}\n    uintx NewSizeThreadIncrease                     </span>= <span style=\"color: rgba(128, 0, 128, 1)\">5320</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {pd product}\n     intx NmethodSweepActivity                      </span>= <span style=\"color: rgba(128, 0, 128, 1)\">10</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx NmethodSweepCheckInterval                 </span>= <span style=\"color: rgba(128, 0, 128, 1)\">5</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx NmethodSweepFraction                      </span>= <span style=\"color: rgba(128, 0, 128, 1)\">16</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx NodeLimitFudgeFactor                      </span>= <span style=\"color: rgba(128, 0, 128, 1)\">2000</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n    uintx NumberOfGCLogFiles                        </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx NumberOfLoopInstrToAlign                  </span>= <span style=\"color: rgba(128, 0, 128, 1)\">4</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {C2 product}\n     intx ObjectAlignmentInBytes                    </span>= <span style=\"color: rgba(128, 0, 128, 1)\">8</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {lp64_product}\n    uintx OldPLABSize                               </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1024</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n    uintx OldPLABWeight                             </span>= <span style=\"color: rgba(128, 0, 128, 1)\">50</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx OldSize                                  :</span>= <span style=\"color: rgba(128, 0, 128, 1)\">88080384</span><span style=\"color: rgba(0, 0, 0, 1)\">                            {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> OmitStackTraceInFastThrow                 = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\nccstrlist OnError                                   </span>=<span style=\"color: rgba(0, 0, 0, 1)\">                                     {product}\nccstrlist OnOutOfMemoryError                        </span>=<span style=\"color: rgba(0, 0, 0, 1)\">                                     {product}\n     intx OnStackReplacePercentage                  </span>= <span style=\"color: rgba(128, 0, 128, 1)\">140</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {pd product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> OptimizeFill                              = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> OptimizePtrCompare                        = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> OptimizeStringConcat                      = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> OptoBundling                              = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {C2 pd product}\n     intx OptoLoopAlignment                         </span>= <span style=\"color: rgba(128, 0, 128, 1)\">16</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {pd product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> OptoScheduling                            = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {C2 pd product}\n    uintx PLABWeight                                </span>= <span style=\"color: rgba(128, 0, 128, 1)\">75</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PSChunkLargeArrays                        = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     intx ParGCArrayScanChunk                       </span>= <span style=\"color: rgba(128, 0, 128, 1)\">50</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx ParGCDesiredObjsFromOverflowList          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">20</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ParGCTrimOverflow                         = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ParGCUseLocalOverflow                     = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n    uintx ParallelGCBufferWastePct                  </span>= <span style=\"color: rgba(128, 0, 128, 1)\">10</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx ParallelGCThreads                         </span>= <span style=\"color: rgba(128, 0, 128, 1)\">4</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ParallelGCVerbose                         = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n    uintx ParallelOldDeadWoodLimiterMean            </span>= <span style=\"color: rgba(128, 0, 128, 1)\">50</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx ParallelOldDeadWoodLimiterStdDev          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">80</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ParallelRefProcBalancingEnabled           = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ParallelRefProcEnabled                    = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PartialPeelAtUnsignedTests                = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PartialPeelLoop                           = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     intx PartialPeelNewPhiDelta                    </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {C2 product}\n    uintx PausePadding                              </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx PerBytecodeRecompilationCutoff            </span>= <span style=\"color: rgba(128, 0, 128, 1)\">200</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {product}\n     intx PerBytecodeTrapLimit                      </span>= <span style=\"color: rgba(128, 0, 128, 1)\">4</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx PerMethodRecompilationCutoff              </span>= <span style=\"color: rgba(128, 0, 128, 1)\">400</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {product}\n     intx PerMethodTrapLimit                        </span>= <span style=\"color: rgba(128, 0, 128, 1)\">100</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PerfAllowAtExitRegistration               = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PerfBypassFileSystemCheck                 = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     intx PerfDataMemorySize                        </span>= <span style=\"color: rgba(128, 0, 128, 1)\">32768</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     intx PerfDataSamplingInterval                  </span>= <span style=\"color: rgba(128, 0, 128, 1)\">50</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    ccstr PerfDataSaveFile                          </span>=<span style=\"color: rgba(0, 0, 0, 1)\">                                     {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PerfDataSaveToFile                        = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PerfDisableSharedMem                      = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     intx PerfMaxStringConstLength                  </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1024</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     intx PreInflateSpin                            </span>= <span style=\"color: rgba(128, 0, 128, 1)\">10</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {pd product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PreferInterpreterNativeStubs              = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {pd product}\n     intx PrefetchCopyIntervalInBytes               </span>= <span style=\"color: rgba(128, 0, 128, 1)\">576</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {product}\n     intx PrefetchFieldsAhead                       </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx PrefetchScanIntervalInBytes               </span>= <span style=\"color: rgba(128, 0, 128, 1)\">576</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PreserveAllAnnotations                    = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PreserveFramePointer                      = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {pd product}\n    uintx PretenureSizeThreshold                    </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintAdaptiveSizePolicy                   = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintCMSInitiationStatistics              = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     intx PrintCMSStatistics                        </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintClassHistogram                       = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {manageable}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintClassHistogramAfterFullGC            = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {manageable}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintClassHistogramBeforeFullGC           = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {manageable}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintCodeCache                            = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintCodeCacheOnCompilation               = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintCommandLineFlags                     = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintCompilation                          = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintConcurrentLocks                      = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {manageable}\n     intx PrintFLSCensus                            </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx PrintFLSStatistics                        </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintFlagsFinal                          := <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintFlagsInitial                         = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintGC                                   = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {manageable}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintGCApplicationConcurrentTime          = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintGCApplicationStoppedTime             = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintGCCause                              = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintGCDateStamps                         = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {manageable}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintGCDetails                            = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {manageable}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintGCID                                 = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {manageable}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintGCTaskTimeStamps                     = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintGCTimeStamps                         = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {manageable}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintHeapAtGC                             = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product rw}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintHeapAtGCExtended                     = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product rw}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintHeapAtSIGBREAK                       = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintJNIGCStalls                          = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintJNIResolving                         = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintOldPLAB                              = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintOopAddress                           = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintPLAB                                 = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintParallelOldGCPhaseTimes              = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintPromotionFailure                     = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintReferenceGC                          = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintSafepointStatistics                  = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     intx PrintSafepointStatisticsCount             </span>= <span style=\"color: rgba(128, 0, 128, 1)\">300</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {product}\n     intx PrintSafepointStatisticsTimeout           </span>= -<span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintSharedArchiveAndExit                 = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintSharedDictionary                     = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintSharedSpaces                         = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintStringDeduplicationStatistics        = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintStringTableStatistics                = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintTLAB                                 = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintTenuringDistribution                 = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintTieredEvents                         = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintVMOptions                            = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintVMQWaitTime                          = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> PrintWarnings                             = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n    uintx ProcessDistributionStride                 </span>= <span style=\"color: rgba(128, 0, 128, 1)\">4</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ProfileInterpreter                        = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {pd product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ProfileIntervals                          = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     intx ProfileIntervalsTicks                     </span>= <span style=\"color: rgba(128, 0, 128, 1)\">100</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {product}\n     intx ProfileMaturityPercentage                 </span>= <span style=\"color: rgba(128, 0, 128, 1)\">20</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ProfileVM                                 = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ProfilerPrintByteCodeStatistics           = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ProfilerRecordPC                          = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n    uintx PromotedPadding                           </span>= <span style=\"color: rgba(128, 0, 128, 1)\">3</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx QueuedAllocationWarningCount              </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx RTMRetryCount                             </span>= <span style=\"color: rgba(128, 0, 128, 1)\">5</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {ARCH product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> RangeCheckElimination                     = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     intx ReadPrefetchInstr                         </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {ARCH product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ReassociateInvariants                     = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ReduceBulkZeroing                         = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ReduceFieldZeroing                        = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ReduceInitialCardMarks                    = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ReduceSignalUsage                         = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     intx RefDiscoveryPolicy                        </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ReflectionWrapResolutionErrors            = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> RegisterFinalizersAtInit                  = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> RelaxAccessControlCheck                   = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n    ccstr ReplayDataFile                            </span>=<span style=\"color: rgba(0, 0, 0, 1)\">                                     {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> RequireSharedSpaces                       = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n    uintx ReservedCodeCacheSize                     </span>= <span style=\"color: rgba(128, 0, 128, 1)\">251658240</span><span style=\"color: rgba(0, 0, 0, 1)\">                           {pd product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ResizeOldPLAB                             = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ResizePLAB                                = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ResizeTLAB                                = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {pd product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> RestoreMXCSROnJNICalls                    = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> RestrictContended                         = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> RewriteBytecodes                          = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {pd product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> RewriteFrequentPairs                      = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {pd product}\n     intx SafepointPollOffset                       </span>= <span style=\"color: rgba(128, 0, 128, 1)\">256</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {C1 pd product}\n     intx SafepointSpinBeforeYield                  </span>= <span style=\"color: rgba(128, 0, 128, 1)\">2000</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> SafepointTimeout                          = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     intx SafepointTimeoutDelay                     </span>= <span style=\"color: rgba(128, 0, 128, 1)\">10000</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ScavengeBeforeFullGC                      = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     intx SelfDestructTimer                         </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx SharedBaseAddress                         </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    ccstr SharedClassListFile                       </span>=<span style=\"color: rgba(0, 0, 0, 1)\">                                     {product}\n    uintx SharedMiscCodeSize                        </span>= <span style=\"color: rgba(128, 0, 128, 1)\">122880</span><span style=\"color: rgba(0, 0, 0, 1)\">                              {product}\n    uintx SharedMiscDataSize                        </span>= <span style=\"color: rgba(128, 0, 128, 1)\">4194304</span><span style=\"color: rgba(0, 0, 0, 1)\">                             {product}\n    uintx SharedReadOnlySize                        </span>= <span style=\"color: rgba(128, 0, 128, 1)\">16777216</span><span style=\"color: rgba(0, 0, 0, 1)\">                            {product}\n    uintx SharedReadWriteSize                       </span>= <span style=\"color: rgba(128, 0, 128, 1)\">16777216</span><span style=\"color: rgba(0, 0, 0, 1)\">                            {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ShowMessageBoxOnError                     = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     intx SoftRefLRUPolicyMSPerMB                   </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1000</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> SpecialEncodeISOArray                     = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> SplitIfBlocks                             = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     intx StackRedPages                             </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {pd product}\n     intx StackShadowPages                          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">6</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {pd product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> StackTraceInThrowable                     = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     intx StackYellowPages                          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">3</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {pd product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> StartAttachListener                       = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     intx StarvationMonitorInterval                 </span>= <span style=\"color: rgba(128, 0, 128, 1)\">200</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> StressLdcRewrite                          = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n    uintx StringDeduplicationAgeThreshold           </span>= <span style=\"color: rgba(128, 0, 128, 1)\">3</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx StringTableSize                           </span>= <span style=\"color: rgba(128, 0, 128, 1)\">60013</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> SuppressFatalErrorMessage                 = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n    uintx SurvivorPadding                           </span>= <span style=\"color: rgba(128, 0, 128, 1)\">3</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx SurvivorRatio                             </span>= <span style=\"color: rgba(128, 0, 128, 1)\">8</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx SuspendRetryCount                         </span>= <span style=\"color: rgba(128, 0, 128, 1)\">50</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx SuspendRetryDelay                         </span>= <span style=\"color: rgba(128, 0, 128, 1)\">5</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx SyncFlags                                 </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    ccstr SyncKnobs                                 </span>=<span style=\"color: rgba(0, 0, 0, 1)\">                                     {product}\n     intx SyncVerbose                               </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx TLABAllocationWeight                      </span>= <span style=\"color: rgba(128, 0, 128, 1)\">35</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx TLABRefillWasteFraction                   </span>= <span style=\"color: rgba(128, 0, 128, 1)\">64</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx TLABSize                                  </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> TLABStats                                 = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n    uintx TLABWasteIncrement                        </span>= <span style=\"color: rgba(128, 0, 128, 1)\">4</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx TLABWasteTargetPercent                    </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx TargetPLABWastePct                        </span>= <span style=\"color: rgba(128, 0, 128, 1)\">10</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx TargetSurvivorRatio                       </span>= <span style=\"color: rgba(128, 0, 128, 1)\">50</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx TenuredGenerationSizeIncrement            </span>= <span style=\"color: rgba(128, 0, 128, 1)\">20</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx TenuredGenerationSizeSupplement           </span>= <span style=\"color: rgba(128, 0, 128, 1)\">80</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx TenuredGenerationSizeSupplementDecay      </span>= <span style=\"color: rgba(128, 0, 128, 1)\">2</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx ThreadPriorityPolicy                      </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ThreadPriorityVerbose                     = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n    uintx ThreadSafetyMargin                        </span>= <span style=\"color: rgba(128, 0, 128, 1)\">52428800</span><span style=\"color: rgba(0, 0, 0, 1)\">                            {product}\n     intx ThreadStackSize                           </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {pd product}\n    uintx ThresholdTolerance                        </span>= <span style=\"color: rgba(128, 0, 128, 1)\">10</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx Tier0BackedgeNotifyFreqLog                </span>= <span style=\"color: rgba(128, 0, 128, 1)\">10</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx Tier0InvokeNotifyFreqLog                  </span>= <span style=\"color: rgba(128, 0, 128, 1)\">7</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx Tier0ProfilingStartPercentage             </span>= <span style=\"color: rgba(128, 0, 128, 1)\">200</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {product}\n     intx Tier23InlineeNotifyFreqLog                </span>= <span style=\"color: rgba(128, 0, 128, 1)\">20</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx Tier2BackEdgeThreshold                    </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx Tier2BackedgeNotifyFreqLog                </span>= <span style=\"color: rgba(128, 0, 128, 1)\">14</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx Tier2CompileThreshold                     </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx Tier2InvokeNotifyFreqLog                  </span>= <span style=\"color: rgba(128, 0, 128, 1)\">11</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx Tier3BackEdgeThreshold                    </span>= <span style=\"color: rgba(128, 0, 128, 1)\">60000</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     intx Tier3BackedgeNotifyFreqLog                </span>= <span style=\"color: rgba(128, 0, 128, 1)\">13</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx Tier3CompileThreshold                     </span>= <span style=\"color: rgba(128, 0, 128, 1)\">2000</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     intx Tier3DelayOff                             </span>= <span style=\"color: rgba(128, 0, 128, 1)\">2</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx Tier3DelayOn                              </span>= <span style=\"color: rgba(128, 0, 128, 1)\">5</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx Tier3InvocationThreshold                  </span>= <span style=\"color: rgba(128, 0, 128, 1)\">200</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {product}\n     intx Tier3InvokeNotifyFreqLog                  </span>= <span style=\"color: rgba(128, 0, 128, 1)\">10</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx Tier3LoadFeedback                         </span>= <span style=\"color: rgba(128, 0, 128, 1)\">5</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx Tier3MinInvocationThreshold               </span>= <span style=\"color: rgba(128, 0, 128, 1)\">100</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {product}\n     intx Tier4BackEdgeThreshold                    </span>= <span style=\"color: rgba(128, 0, 128, 1)\">40000</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     intx Tier4CompileThreshold                     </span>= <span style=\"color: rgba(128, 0, 128, 1)\">15000</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     intx Tier4InvocationThreshold                  </span>= <span style=\"color: rgba(128, 0, 128, 1)\">5000</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     intx Tier4LoadFeedback                         </span>= <span style=\"color: rgba(128, 0, 128, 1)\">3</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx Tier4MinInvocationThreshold               </span>= <span style=\"color: rgba(128, 0, 128, 1)\">600</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> TieredCompilation                         = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {pd product}\n     intx TieredCompileTaskTimeout                  </span>= <span style=\"color: rgba(128, 0, 128, 1)\">50</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx TieredRateUpdateMaxTime                   </span>= <span style=\"color: rgba(128, 0, 128, 1)\">25</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx TieredRateUpdateMinTime                   </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx TieredStopAtLevel                         </span>= <span style=\"color: rgba(128, 0, 128, 1)\">4</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> TimeLinearScan                            = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {C1 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> TraceBiasedLocking                        = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> TraceClassLoading                         = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product rw}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> TraceClassLoadingPreorder                 = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> TraceClassPaths                           = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> TraceClassResolution                      = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> TraceClassUnloading                       = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product rw}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> TraceDynamicGCThreads                     = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> TraceGen0Time                             = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> TraceGen1Time                             = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n    ccstr TraceJVMTI                                </span>=<span style=\"color: rgba(0, 0, 0, 1)\">                                     {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> TraceLoaderConstraints                    = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product rw}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> TraceMetadataHumongousAllocation          = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> TraceMonitorInflation                     = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> TraceParallelOldGCTasks                   = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     intx TraceRedefineClasses                      </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> TraceSafepointCleanupTime                 = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> TraceSharedLookupCache                    = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> TraceSuspendWaitFailures                  = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     intx TrackedInitializationLimit                </span>= <span style=\"color: rgba(128, 0, 128, 1)\">50</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> TransmitErrorReport                       = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> TrapBasedNullChecks                       = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {pd product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> TrapBasedRangeChecks                      = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {C2 pd product}\n     intx TypeProfileArgsLimit                      </span>= <span style=\"color: rgba(128, 0, 128, 1)\">2</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx TypeProfileLevel                          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">111</span><span style=\"color: rgba(0, 0, 0, 1)\">                                 {pd product}\n     intx TypeProfileMajorReceiverPercent           </span>= <span style=\"color: rgba(128, 0, 128, 1)\">90</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {C2 product}\n     intx TypeProfileParmsLimit                     </span>= <span style=\"color: rgba(128, 0, 128, 1)\">2</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx TypeProfileWidth                          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">2</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     intx UnguardOnExecutionViolation               </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UnlinkSymbolsALot                         = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> Use486InstrsOnly                          = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {ARCH product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseAES                                    = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseAESIntrinsics                          = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     intx UseAVX                                    </span>= <span style=\"color: rgba(128, 0, 128, 1)\">2</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {ARCH product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseAdaptiveGCBoundary                     = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseAdaptiveGenerationSizePolicyAtMajorCollection  = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseAdaptiveGenerationSizePolicyAtMinorCollection  = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseAdaptiveNUMAChunkSizing                = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseAdaptiveSizeDecayMajorGCCost           = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseAdaptiveSizePolicy                     = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseAdaptiveSizePolicyFootprintGoal        = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseAdaptiveSizePolicyWithSystemGC         = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseAddressNop                             = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {ARCH product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseAltSigs                                = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseAutoGCSelectPolicy                     = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseBMI1Instructions                       = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {ARCH product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseBMI2Instructions                       = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {ARCH product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseBiasedLocking                          = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseBimorphicInlining                      = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseBoundThreads                           = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseCLMUL                                  = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {ARCH product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseCMSBestFit                             = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseCMSCollectionPassing                   = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseCMSCompactAtFullCollection             = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseCMSInitiatingOccupancyOnly             = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseCRC32Intrinsics                        = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseCodeCacheFlushing                      = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseCompiler                               = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseCompilerSafepoints                     = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseCompressedClassPointers               := <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {lp64_product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseCompressedOops                        := <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {lp64_product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseConcMarkSweepGC                        = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseCondCardMark                           = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseCountLeadingZerosInstruction           = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {ARCH product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseCountTrailingZerosInstruction          = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {ARCH product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseCountedLoopSafepoints                  = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseCounterDecay                           = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseDivMod                                 = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseDynamicNumberOfGCThreads               = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseFPUForSpilling                         = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseFastAccessorMethods                    = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseFastEmptyMethods                       = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseFastJNIAccessors                       = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseFastStosb                              = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {ARCH product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseG1GC                                   = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseGCLogFileRotation                      = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseGCOverheadLimit                        = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseGCTaskAffinity                         = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseHeavyMonitors                          = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseInlineCaches                           = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseInterpreter                            = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseJumpTables                             = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseLWPSynchronization                     = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseLargePages                             = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {pd product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseLargePagesInMetaspace                  = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseLargePagesIndividualAllocation        := <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {pd product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseLockedTracing                          = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseLoopCounter                            = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseLoopInvariantCodeMotion                = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C1 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseLoopPredicate                          = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseMathExactIntrinsics                    = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseMaximumCompactionOnSystemGC            = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseMembar                                 = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {pd product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseMontgomeryMultiplyIntrinsic            = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseMontgomerySquareIntrinsic              = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseMulAddIntrinsic                        = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseMultiplyToLenIntrinsic                 = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseNUMA                                   = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseNUMAInterleaving                       = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseNewLongLShift                          = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {ARCH product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseOSErrorReporting                       = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {pd product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseOldInlining                            = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseOnStackReplacement                     = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {pd product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseOnlyInlinedBimorphic                   = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseOptoBiasInlining                       = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UsePSAdaptiveSurvivorSizePolicy           = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseParNewGC                               = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseParallelGC                            := <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseParallelOldGC                          = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UsePerfData                               = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UsePopCountInstruction                    = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseRDPCForConstantTableBase               = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseRTMDeopt                               = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {ARCH product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseRTMLocking                             = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {ARCH product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseSHA                                    = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseSHA1Intrinsics                         = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseSHA256Intrinsics                       = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseSHA512Intrinsics                       = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     intx UseSSE                                    </span>= <span style=\"color: rgba(128, 0, 128, 1)\">4</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseSSE42Intrinsics                        = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseSerialGC                               = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseSharedSpaces                           = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseSignalChaining                         = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseSquareToLenIntrinsic                   = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseStoreImmI16                            = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {ARCH product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseStringDeduplication                    = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseSuperWord                              = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseTLAB                                   = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {pd product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseThreadPriorities                       = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {pd product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseTypeProfile                            = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseTypeSpeculation                        = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseUTCFileTimestamp                       = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseUnalignedLoadStores                    = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {ARCH product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseVMInterruptibleIO                      = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseXMMForArrayCopy                        = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseXmmI2D                                 = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {ARCH product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseXmmI2F                                 = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {ARCH product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseXmmLoadAndClearUpper                   = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {ARCH product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> UseXmmRegToRegMoveAll                     = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {ARCH product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> VMThreadHintNoPreempt                     = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     intx VMThreadPriority                          </span>= -<span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n     intx VMThreadStackSize                         </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {pd product}\n     intx ValueMapInitialSize                       </span>= <span style=\"color: rgba(128, 0, 128, 1)\">11</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {C1 product}\n     intx ValueMapMaxLoopSize                       </span>= <span style=\"color: rgba(128, 0, 128, 1)\">8</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {C1 product}\n     intx ValueSearchLimit                          </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1000</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {C2 product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> VerifyMergedCPBytecodes                   = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> VerifySharedSpaces                        = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     intx WorkAroundNPTLTimedWaitHang               </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx YoungGenerationSizeIncrement              </span>= <span style=\"color: rgba(128, 0, 128, 1)\">20</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx YoungGenerationSizeSupplement             </span>= <span style=\"color: rgba(128, 0, 128, 1)\">80</span><span style=\"color: rgba(0, 0, 0, 1)\">                                  {product}\n    uintx YoungGenerationSizeSupplementDecay        </span>= <span style=\"color: rgba(128, 0, 128, 1)\">8</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n    uintx YoungPLABSize                             </span>= <span style=\"color: rgba(128, 0, 128, 1)\">4096</span><span style=\"color: rgba(0, 0, 0, 1)\">                                {product}\n     </span><span style=\"color: rgba(0, 0, 255, 1)\">bool</span> ZeroTLAB                                  = <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">                               {product}\n     intx hashCode                                  </span>= <span style=\"color: rgba(128, 0, 128, 1)\">5</span><span style=\"color: rgba(0, 0, 0, 1)\">                                   {product}\n用法: java [</span>-<span style=\"color: rgba(0, 0, 0, 1)\">options] class [args...]\n           (执行类)\n   或  java [</span>-options] -<span style=\"color: rgba(0, 0, 0, 1)\">jar jarfile [args...]\n           (执行 jar 文件)\n其中选项包括:\n    </span>-d32          使用 <span style=\"color: rgba(128, 0, 128, 1)\">32</span><span style=\"color: rgba(0, 0, 0, 1)\"> 位数据模型 (如果可用)\n    </span>-d64          使用 <span style=\"color: rgba(128, 0, 128, 1)\">64</span><span style=\"color: rgba(0, 0, 0, 1)\"> 位数据模型 (如果可用)\n    </span>-server       选择 <span style=\"color: rgba(128, 0, 0, 1)\">\"</span><span style=\"color: rgba(128, 0, 0, 1)\">server</span><span style=\"color: rgba(128, 0, 0, 1)\">\"</span><span style=\"color: rgba(0, 0, 0, 1)\"> VM\n                  默认 VM 是 server.\n\n    </span>-<span style=\"color: rgba(0, 0, 255, 1)\">cp</span> &lt;目录和 <span style=\"color: rgba(0, 0, 255, 1)\">zip</span>/jar 文件的类搜索路径&gt;\n    -classpath &lt;目录和 <span style=\"color: rgba(0, 0, 255, 1)\">zip</span>/jar 文件的类搜索路径&gt;<span style=\"color: rgba(0, 0, 0, 1)\">\n                  用 ; 分隔的目录, JAR 档案\n                  和 ZIP 档案列表, 用于搜索类文件。\n    </span>-D&lt;名称&gt;=&lt;值&gt;<span style=\"color: rgba(0, 0, 0, 1)\">\n                  设置系统属性\n    </span>-verbose:[class|gc|<span style=\"color: rgba(0, 0, 0, 1)\">jni]\n                  启用详细输出\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">version      输出产品版本并退出\n    </span>-version:&lt;值&gt;<span style=\"color: rgba(0, 0, 0, 1)\">\n                  警告: 此功能已过时, 将在\n                  未来发行版中删除。\n                  需要指定的版本才能运行\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">showversion  输出产品版本并继续\n    </span>-jre-restrict-search | -no-jre-restrict-<span style=\"color: rgba(0, 0, 0, 1)\">search\n                  警告: 此功能已过时, 将在\n                  未来发行版中删除。\n                  在版本搜索中包括</span>/<span style=\"color: rgba(0, 0, 0, 1)\">排除用户专用 JRE\n    </span>-? -<span style=\"color: rgba(0, 0, 0, 1)\">help      输出此帮助消息\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">X            输出非标准选项的帮助\n    </span>-ea[:&lt;packagename&gt;...|:&lt;classname&gt;<span style=\"color: rgba(0, 0, 0, 1)\">]\n    </span>-enableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;<span style=\"color: rgba(0, 0, 0, 1)\">]\n                  按指定的粒度启用断言\n    </span>-da[:&lt;packagename&gt;...|:&lt;classname&gt;<span style=\"color: rgba(0, 0, 0, 1)\">]\n    </span>-disableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;<span style=\"color: rgba(0, 0, 0, 1)\">]\n                  禁用具有指定粒度的断言\n    </span>-esa | -<span style=\"color: rgba(0, 0, 0, 1)\">enablesystemassertions\n                  启用系统断言\n    </span>-dsa | -<span style=\"color: rgba(0, 0, 0, 1)\">disablesystemassertions\n                  禁用系统断言\n    </span>-agentlib:&lt;libname&gt;[=&lt;选项&gt;<span style=\"color: rgba(0, 0, 0, 1)\">]\n                  加载本机代理库 </span>&lt;libname&gt;, 例如 -<span style=\"color: rgba(0, 0, 0, 1)\">agentlib:hprof\n                  另请参阅 </span>-agentlib:jdwp=help 和 -agentlib:hprof=<span style=\"color: rgba(0, 0, 0, 1)\">help\n    </span>-agentpath:&lt;pathname&gt;[=&lt;选项&gt;<span style=\"color: rgba(0, 0, 0, 1)\">]\n                  按完整路径名加载本机代理库\n    </span>-javaagent:&lt;jarpath&gt;[=&lt;选项&gt;<span style=\"color: rgba(0, 0, 0, 1)\">]\n                  加载 Java 编程语言代理, 请参阅 java.lang.instrument\n    </span>-splash:&lt;imagepath&gt;<span style=\"color: rgba(0, 0, 0, 1)\">\n                  使用指定的图像显示启动屏幕\n有关详细信息, 请参阅 http:</span><span style=\"color: rgba(0, 128, 0, 1)\">//</span><span style=\"color: rgba(0, 128, 0, 1)\">www.oracle.com/technetwork/java/javase/documentation/index.html。</span></pre>\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div>\n<span class=\"cnblogs_code_collapse\" style=\"display: none;\">View Code</span></div>\n<p>上面的参数中有等号（=和:=），分别代表的是默认值，和被修改的值啦</p>\n<p>好了，基础够基础了吧，以后这些加（+）减（-）等于（=或:=）看的懂了</p>\n<div style=\"text-align: right;\"><a href=\"#_labelTop\" style=\"color:#f68a33\">回到顶部</a><a name=\"_label1\"></a></div><h2>二、基础工具</h2>\n<p>$JAVA_HOME/bin目录下真的有很多的工具，这里不截图啦，直接上用的比较的工具好啦</p>\n<a name=\"_label1_0\"></a><h3>2.1、jps</h3>\n<p>这个工具真的很实用，而且很简单呢，功能linux的ps命令类似：可以列出正在运行的虚拟机进程，并显示虚拟机执行主类（Main Class，main()函数所在的类）名称以及这些进程的本地虚拟机唯一ID（LVMID，Local Virtual Machine Identifier）</p>\n<div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div>\n<pre>[root@hadoop apache-tomcat-<span style=\"color: rgba(128, 0, 128, 1)\">8.5</span>.<span style=\"color: rgba(128, 0, 128, 1)\">57</span>]# jps -<span style=\"color: rgba(0, 0, 0, 1)\">help\nusage: jps [</span>-<span style=\"color: rgba(0, 0, 0, 1)\">help]\n       jps [</span>-q] [-mlvV] [&lt;hostid&gt;<span style=\"color: rgba(0, 0, 0, 1)\">]\n\nDefinitions:\n    </span>&lt;hostid&gt;:      &lt;<span style=\"color: rgba(0, 0, 255, 1)\">hostname</span>&gt;[:&lt;port&gt;]</pre>\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div>\n<div class=\"cnblogs_code\">\n<pre>-<span style=\"color: rgba(0, 0, 0, 1)\">l : 输出主类全名或jar路径\n</span>-<span style=\"color: rgba(0, 0, 0, 1)\">q : 只输出LVMID\n</span>-<span style=\"color: rgba(0, 0, 0, 1)\">m : 输出JVM启动时传递给main()的参数\n</span>-v : 输出JVM启动时显示指定的JVM参数</pre>\n</div>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200914202554212-967701421.png\" alt=\"\" width=\"1050\" height=\"122\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<a name=\"_label1_1\"></a><h3>&nbsp;2.2、jstat</h3>\n<p>jstat（JVM Statistics Monitoring Tool）是用于监视虚拟机各种运行状态信息的命令行工具。它可以显示本地或者远程[插图]虚拟机进程中的类加载、内存、垃圾收集、即时编译等运行时数据。</p>\n<div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div>\n<pre>[root@hadoop apache-tomcat-<span style=\"color: rgba(128, 0, 128, 1)\">8.5</span>.<span style=\"color: rgba(128, 0, 128, 1)\">57</span>]# jstat -<span style=\"color: rgba(0, 0, 0, 1)\">help\nUsage: jstat </span>-help|-<span style=\"color: rgba(0, 0, 0, 1)\">options\n       jstat </span>-&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;<strong>vmid</strong>&gt; [&lt;interval&gt; [&lt;count&gt;<span style=\"color: rgba(0, 0, 0, 1)\">]]\n\nDefinitions:\n  </span>&lt;option&gt;      An option reported by the -<span style=\"color: rgba(0, 0, 0, 1)\">options option\n  </span>&lt;vmid&gt;<span style=\"color: rgba(0, 0, 0, 1)\">        Virtual Machine Identifier. A vmid takes the following form:\n                     </span>&lt;lvmid&gt;[@&lt;<span style=\"color: rgba(0, 0, 255, 1)\">hostname</span>&gt;[:&lt;port&gt;<span style=\"color: rgba(0, 0, 0, 1)\">]]\n                Where </span>&lt;lvmid&gt; is the local vm identifier <span style=\"color: rgba(0, 0, 255, 1)\">for</span><span style=\"color: rgba(0, 0, 0, 1)\"> the target\n                Java virtual machine, typically a process </span><span style=\"color: rgba(0, 0, 255, 1)\">id</span>; &lt;<span style=\"color: rgba(0, 0, 255, 1)\">hostname</span>&gt;<span style=\"color: rgba(0, 0, 0, 1)\"> is\n                the name of the host running the target Java virtual machine;\n                and </span>&lt;port&gt; is the port number <span style=\"color: rgba(0, 0, 255, 1)\">for</span><span style=\"color: rgba(0, 0, 0, 1)\"> the rmiregistry on the\n                target host. See the jvmstat documentation </span><span style=\"color: rgba(0, 0, 255, 1)\">for</span> a <span style=\"color: rgba(0, 0, 255, 1)\">more</span><span style=\"color: rgba(0, 0, 0, 1)\"> complete\n                description of the Virtual Machine Identifier.\n  </span>&lt;lines&gt;<span style=\"color: rgba(0, 0, 0, 1)\">       Number of samples between header lines.\n  </span>&lt;interval&gt;<span style=\"color: rgba(0, 0, 0, 1)\">    Sampling interval. The following forms are allowed:\n                    </span>&lt;n&gt;[<span style=\"color: rgba(128, 0, 0, 1)\">\"</span><span style=\"color: rgba(128, 0, 0, 1)\">ms</span><span style=\"color: rgba(128, 0, 0, 1)\">\"</span>|<span style=\"color: rgba(128, 0, 0, 1)\">\"</span><span style=\"color: rgba(128, 0, 0, 1)\">s</span><span style=\"color: rgba(128, 0, 0, 1)\">\"</span><span style=\"color: rgba(0, 0, 0, 1)\">]\n                Where </span>&lt;n&gt;<span style=\"color: rgba(0, 0, 0, 1)\"> is an integer and the suffix specifies the units as\n                milliseconds(</span><span style=\"color: rgba(128, 0, 0, 1)\">\"</span><span style=\"color: rgba(128, 0, 0, 1)\">ms</span><span style=\"color: rgba(128, 0, 0, 1)\">\"</span>) or seconds(<span style=\"color: rgba(128, 0, 0, 1)\">\"</span><span style=\"color: rgba(128, 0, 0, 1)\">s</span><span style=\"color: rgba(128, 0, 0, 1)\">\"</span>). The default units are <span style=\"color: rgba(128, 0, 0, 1)\">\"</span><span style=\"color: rgba(128, 0, 0, 1)\">ms</span><span style=\"color: rgba(128, 0, 0, 1)\">\"</span><span style=\"color: rgba(0, 0, 0, 1)\">.\n  </span>&lt;count&gt;<span style=\"color: rgba(0, 0, 0, 1)\">       Number of samples to take before terminating.\n  </span>-J&lt;flag&gt;      Pass &lt;flag&gt; directly to the runtime system.</pre>\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div>\n<p>jstat -options #查看下支持的选项，如下</p>\n<div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div>\n<pre>[root@hadoop apache-tomcat-<span style=\"color: rgba(128, 0, 128, 1)\">8.5</span>.<span style=\"color: rgba(128, 0, 128, 1)\">57</span>]# jstat -<span style=\"color: rgba(0, 0, 0, 1)\">options\n</span>-<span style=\"color: rgba(0, 0, 0, 1)\">class  #类加载器\n</span>-<span style=\"color: rgba(0, 0, 0, 1)\">compiler #JIT\n</span>-<span style=\"color: rgba(0, 0, 0, 1)\">gc  #GC堆状态\n</span>-<span style=\"color: rgba(0, 0, 0, 1)\">gccapacity #各个区的大小\n</span>-<span style=\"color: rgba(0, 0, 0, 1)\">gccause #最近一次GC的统计和原因\n</span>-<span style=\"color: rgba(0, 0, 0, 1)\">gcmetacapacity #元空间大小\n</span>-<span style=\"color: rgba(0, 0, 0, 1)\">gcnew #新区统计\n</span>-<span style=\"color: rgba(0, 0, 0, 1)\">gcnewcapacity #新区大小\n</span>-<span style=\"color: rgba(0, 0, 0, 1)\">gcold #老区统计\n</span>-<span style=\"color: rgba(0, 0, 0, 1)\">gcoldcapacity #老区大小\n</span>-<span style=\"color: rgba(0, 0, 0, 1)\">gcutil #GC汇总统计\n</span>-printcompilation #HotSpot编译统计</pre>\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div>\n<div class=\"cnblogs_code\">\n<pre>Options #选项，我们一般使用 -<span style=\"color: rgba(0, 0, 0, 1)\">gcutil 查看gc情况 \nvmid    #VM的进程号，即当前运行的java进程号，可以理解我java程序的pid\ninterval #间隔时间，单位为秒或者毫秒\ncount   #打印次数，如果缺省则打印无数次</span></pre>\n</div>\n<p>对于命令格式中的VMID与LVMID需要特别说明一下：如果是本地虚拟机进程，VMID与LVMID是一致的；如果是远程虚拟机进程，那VMID的格式应当是</p>\n<div class=\"cnblogs_code\">\n<pre>[protocol:][<span style=\"color: rgba(0, 128, 0, 1)\">//</span><span style=\"color: rgba(0, 128, 0, 1)\">]lvmid[@hostname][:port]/servername]</span></pre>\n</div>\n<p>开始操作：</p>\n<p>jstat -class 1645&nbsp; #类加载的统计</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200914205011867-2119645436.png\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: rgba(0, 0, 0, 1)\">Loaded：加载class的数量\nBytes：所占用空间大小\nUnloaded：未加载数量\nBytes：未加载占用空间\nTime：时间</span></pre>\n</div>\n<p>jstat -gc 1645&nbsp; 1 3 #统计3次，每隔一秒，对gc进行统计</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200914205142819-553820165.png\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div>\n<pre><span style=\"color: rgba(0, 0, 0, 1)\">S0C：第一个Survivor区的大小（KB）\nS1C：第二个Survivor区的大小（KB）\nS0U：第一个Survivor区的使用大小（KB）\nS1U：第二个Survivor区的使用大小（KB）\nEC：Eden区的大小（KB）\nEU：Eden区的使用大小（KB）\nOC：Old区大小（KB）\nOU：Old使用大小（KB）\nMC：方法区大小（KB），java8方法区的实现是元数据空间，java7的方法区实现是永久代\nMU：方法区使用大小（KB）\nCCSC：压缩类空间大小（KB）\nCCSU：压缩类空间使用大小（KB）\nYGC：年轻代垃圾回收次数\nYGCT：年轻代垃圾回收消耗时间\nFGC：老年代垃圾回收次数\nFGCT：老年代垃圾回收消耗时间\nGCT：垃圾回收消耗总时间</span></pre>\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div>\n<p>jstat -compiler 1645 #对编译进行统计</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200914205406061-1023425018.png\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div>\n<pre><span style=\"color: rgba(0, 0, 0, 1)\">Compiled：编译数量。\nFailed：失败数量\nInvalid：不可用数量\nTime：时间\nFailedType：失败类型\nFailedMethod：失败的方法</span></pre>\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div>\n<a name=\"_label1_2\"></a><h3>&nbsp;2.3、jinfo</h3>\n<p>jinfo（Configuration Info for Java）的作用是实时查看和调整虚拟机各项参数</p>\n<div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div>\n<pre>[root@hadoop ~]# jinfo -<span style=\"color: rgba(0, 0, 0, 1)\">help\nUsage:\n    jinfo [option] </span>&lt;pid&gt;<span style=\"color: rgba(0, 0, 0, 1)\">\n        (to connect to running process)\n    jinfo [option] </span>&lt;executable &lt;core&gt;<span style=\"color: rgba(0, 0, 0, 1)\">\n        (to connect to a core </span><span style=\"color: rgba(0, 0, 255, 1)\">file</span><span style=\"color: rgba(0, 0, 0, 1)\">)\n    jinfo [option] [server_id@]</span>&lt;remote server IP or <span style=\"color: rgba(0, 0, 255, 1)\">hostname</span>&gt;<span style=\"color: rgba(0, 0, 0, 1)\">\n        (to connect to remote debug server)\n\nwhere </span>&lt;option&gt;<span style=\"color: rgba(0, 0, 0, 1)\"> is one of:\n    </span>-flag &lt;name&gt;<span style=\"color: rgba(0, 0, 0, 1)\">         to print the value of the named VM flag #打印单个jvm的参数\n    </span>-flag [+|-]&lt;name&gt;<span style=\"color: rgba(0, 0, 0, 1)\">    to enable or disable the named VM flag #运行期修改一部分运行期可写的虚拟机参数值\n    </span>-flag &lt;name&gt;=&lt;value&gt;<span style=\"color: rgba(0, 0, 0, 1)\"> to set the named VM flag to the given value #运行期修改一部分运行期可写的虚拟机参数值\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">flags               to print VM flags #打印该进程的相关的参数\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">sysprops            to print Java system properties #把虚拟机进程的System.getProperties()的内容打印出来\n    </span>&lt;no option&gt;<span style=\"color: rgba(0, 0, 0, 1)\">          to print both of the above\n    </span>-h | -help           to print this help message</pre>\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div>\n<p>jinfo -flags&nbsp; 1645</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200915164123584-268990265.png\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;jinfo -flag InitialHeapSize&nbsp; 1645</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200915164152649-894970289.png\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;jinfo -flag InitialHeapSize&nbsp; 1645</p>\n<div class=\"cnblogs_code\"><img src=\"https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" id=\"code_img_closed_45d64dae-07a5-4164-90f9-1a30666d9d4c\" class=\"code_img_closed\"><img src=\"https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" id=\"code_img_opened_45d64dae-07a5-4164-90f9-1a30666d9d4c\" class=\"code_img_opened\" style=\"display: none\">\n<div id=\"cnblogs_code_open_45d64dae-07a5-4164-90f9-1a30666d9d4c\" class=\"cnblogs_code_hide\">\n<pre>[root@hadoop ~]# jinfo -sysprops  <span style=\"color: rgba(128, 0, 128, 1)\">1645</span><span style=\"color: rgba(0, 0, 0, 1)\">\nAttaching to process ID </span><span style=\"color: rgba(128, 0, 128, 1)\">1645</span>, please <span style=\"color: rgba(0, 0, 255, 1)\">wait</span><span style=\"color: rgba(0, 0, 0, 1)\">...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is </span><span style=\"color: rgba(128, 0, 128, 1)\">25.181</span>-<span style=\"color: rgba(0, 0, 0, 1)\">b13\njava.runtime.name </span>=<span style=\"color: rgba(0, 0, 0, 1)\"> Java(TM) SE Runtime Environment\njava.vm.version </span>= <span style=\"color: rgba(128, 0, 128, 1)\">25.181</span>-<span style=\"color: rgba(0, 0, 0, 1)\">b13\nsun.boot.library.path </span>= /home/hadoop/jdk/jre/lib/<span style=\"color: rgba(0, 0, 0, 1)\">amd64\njava.protocol.handler.pkgs </span>=<span style=\"color: rgba(0, 0, 0, 1)\"> org.apache.catalina.webresources\nshared.loader </span>=<span style=\"color: rgba(0, 0, 0, 1)\">\njava.vendor.url </span>= http:<span style=\"color: rgba(0, 128, 0, 1)\">//</span><span style=\"color: rgba(0, 128, 0, 1)\">java.oracle.com/</span>\njava.vm.vendor =<span style=\"color: rgba(0, 0, 0, 1)\"> Oracle Corporation\npath.separator </span>=<span style=\"color: rgba(0, 0, 0, 1)\"> :\n</span><span style=\"color: rgba(0, 0, 255, 1)\">file</span>.encoding.pkg =<span style=\"color: rgba(0, 0, 0, 1)\"> sun.io\njava.vm.name </span>= Java HotSpot(TM) <span style=\"color: rgba(128, 0, 128, 1)\">64</span>-<span style=\"color: rgba(0, 0, 0, 1)\">Bit Server VM\njava.util.logging.config.</span><span style=\"color: rgba(0, 0, 255, 1)\">file</span> = /root/apache-tomcat-<span style=\"color: rgba(128, 0, 128, 1)\">8.5</span>.<span style=\"color: rgba(128, 0, 128, 1)\">57</span>/conf/<span style=\"color: rgba(0, 0, 0, 1)\">logging.properties\ntomcat.util.buf.StringCache.</span><span style=\"color: rgba(0, 0, 255, 1)\">byte</span>.enabled = <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">\nsun.os.</span><span style=\"color: rgba(0, 0, 255, 1)\">patch</span>.level =<span style=\"color: rgba(0, 0, 0, 1)\"> unknown\nsun.java.launcher </span>=<span style=\"color: rgba(0, 0, 0, 1)\"> SUN_STANDARD\nuser.country </span>=<span style=\"color: rgba(0, 0, 0, 1)\"> US\ntomcat.util.scan.StandardJarScanFilter.jarsToScan </span>= log4j-taglib*.jar,log4j-web*.jar,log4javascript*.jar,slf4j-taglib*<span style=\"color: rgba(0, 0, 0, 1)\">.jar\nuser.</span><span style=\"color: rgba(0, 0, 255, 1)\">dir</span> = /root/apache-tomcat-<span style=\"color: rgba(128, 0, 128, 1)\">8.5</span>.<span style=\"color: rgba(128, 0, 128, 1)\">57</span><span style=\"color: rgba(0, 0, 0, 1)\">\njava.vm.specification.name </span>=<span style=\"color: rgba(0, 0, 0, 1)\"> Java Virtual Machine Specification\njava.runtime.version </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1.8</span>.0_181-<span style=\"color: rgba(0, 0, 0, 1)\">b13\njava.awt.graphicsenv </span>=<span style=\"color: rgba(0, 0, 0, 1)\"> sun.awt.X11GraphicsEnvironment\nos.arch </span>=<span style=\"color: rgba(0, 0, 0, 1)\"> amd64\njava.endorsed.dirs </span>= /home/hadoop/jdk/jre/lib/<span style=\"color: rgba(0, 0, 0, 1)\">endorsed\nline.separator </span>=<span style=\"color: rgba(0, 0, 0, 1)\">\n\njava.io.tmpdir </span>= /root/apache-tomcat-<span style=\"color: rgba(128, 0, 128, 1)\">8.5</span>.<span style=\"color: rgba(128, 0, 128, 1)\">57</span>/<span style=\"color: rgba(0, 0, 0, 1)\">temp\njava.vm.specification.vendor </span>=<span style=\"color: rgba(0, 0, 0, 1)\"> Oracle Corporation\njava.util.logging.manager </span>=<span style=\"color: rgba(0, 0, 0, 1)\"> org.apache.juli.ClassLoaderLogManager\njava.naming.factory.url.pkgs </span>=<span style=\"color: rgba(0, 0, 0, 1)\"> org.apache.naming\nos.name </span>=<span style=\"color: rgba(0, 0, 0, 1)\"> Linux\norg.apache.catalina.security.SecurityListener.UMASK </span>= <span style=\"color: rgba(128, 0, 128, 1)\">0027</span><span style=\"color: rgba(0, 0, 0, 1)\">\nsun.jnu.encoding </span>= UTF-<span style=\"color: rgba(128, 0, 128, 1)\">8</span><span style=\"color: rgba(0, 0, 0, 1)\">\nignore.endorsed.dirs </span>=<span style=\"color: rgba(0, 0, 0, 1)\">\njava.library.path </span>= /usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/<span style=\"color: rgba(0, 0, 0, 1)\">lib\njava.class.version </span>= <span style=\"color: rgba(128, 0, 128, 1)\">52.0</span><span style=\"color: rgba(0, 0, 0, 1)\">\njava.specification.name </span>=<span style=\"color: rgba(0, 0, 0, 1)\"> Java Platform API Specification\nsun.management.compiler </span>= HotSpot <span style=\"color: rgba(128, 0, 128, 1)\">64</span>-<span style=\"color: rgba(0, 0, 0, 1)\">Bit Tiered Compilers\nos.version </span>= <span style=\"color: rgba(128, 0, 128, 1)\">2.6</span>.<span style=\"color: rgba(128, 0, 128, 1)\">32</span>-<span style=\"color: rgba(128, 0, 128, 1)\">754.24</span>.<span style=\"color: rgba(128, 0, 128, 1)\">3</span><span style=\"color: rgba(0, 0, 0, 1)\">.el6.x86_64\njava.util.concurrent.ForkJoinPool.common.threadFactory </span>=<span style=\"color: rgba(0, 0, 0, 1)\"> org.apache.catalina.startup.SafeForkJoinWorkerThreadFactory\nuser.home </span>= /<span style=\"color: rgba(0, 0, 0, 1)\">root\nuser.timezone </span>= Asia/<span style=\"color: rgba(0, 0, 0, 1)\">Chongqing\ncatalina.useNaming </span>= <span style=\"color: rgba(0, 0, 255, 1)\">true</span><span style=\"color: rgba(0, 0, 0, 1)\">\njava.awt.printerjob </span>=<span style=\"color: rgba(0, 0, 0, 1)\"> sun.print.PSPrinterJob\n</span><span style=\"color: rgba(0, 0, 255, 1)\">file</span>.encoding = UTF-<span style=\"color: rgba(128, 0, 128, 1)\">8</span><span style=\"color: rgba(0, 0, 0, 1)\">\njava.specification.version </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1.8</span><span style=\"color: rgba(0, 0, 0, 1)\">\ntomcat.util.scan.StandardJarScanFilter.jarsToSkip </span>= annotations-api.jar,ant-junit*.jar,ant-launcher.jar,ant.jar,asm-*.jar,aspectj*.jar,bootstrap.jar,catalina-ant.jar,catalina-ha.jar,catalina-jmx-remote.jar,catalina-storeconfig.jar,catalina-tribes.jar,catalina-ws.jar,catalina.jar,cglib-*.jar,cobertura-*.jar,commons-beanutils*.jar,commons-codec*.jar,commons-collections*.jar,commons-daemon.jar,commons-dbcp*.jar,commons-digester*.jar,commons-fileupload*.jar,commons-httpclient*.jar,commons-io*.jar,commons-lang*.jar,commons-logging*.jar,commons-math*.jar,commons-pool*.jar,dom4j-*.jar,easymock-*.jar,ecj-*.jar,el-api.jar,geronimo-spec-jaxrpc*.jar,h2*.jar,hamcrest-*.jar,hibernate*.jar,httpclient*.jar,icu4j-*.jar,jasper-el.jar,jasper.jar,jaspic-api.jar,jaxb-*.jar,jaxen-*.jar,jdom-*.jar,jetty-*.jar,jmx-tools.jar,jmx.jar,jsp-api.jar,jstl.jar,jta*.jar,junit-*.jar,junit.jar,log4j*.jar,mail*.jar,objenesis-*.jar,oraclepki.jar,oro-*.jar,servlet-api-*.jar,servlet-api.jar,slf4j*.jar,taglibs-standard-spec-*.jar,tagsoup-*.jar,tomcat-api.jar,tomcat-coyote.jar,tomcat-dbcp.jar,tomcat-i18n-*.jar,tomcat-jdbc.jar,tomcat-jni.jar,tomcat-juli-adapters.jar,tomcat-juli.jar,tomcat-util-scan.jar,tomcat-util.jar,tomcat-websocket.jar,tools.jar,websocket-api.jar,wsdl4j*.jar,xercesImpl.jar,xml-apis.jar,xmlParserAPIs-*.jar,xmlParserAPIs.jar,xom-*<span style=\"color: rgba(0, 0, 0, 1)\">.jar\ncatalina.home </span>= /root/apache-tomcat-<span style=\"color: rgba(128, 0, 128, 1)\">8.5</span>.<span style=\"color: rgba(128, 0, 128, 1)\">57</span><span style=\"color: rgba(0, 0, 0, 1)\">\nuser.name </span>=<span style=\"color: rgba(0, 0, 0, 1)\"> root\njava.class.path </span>= /root/apache-tomcat-<span style=\"color: rgba(128, 0, 128, 1)\">8.5</span>.<span style=\"color: rgba(128, 0, 128, 1)\">57</span>/bin/bootstrap.jar:/root/apache-tomcat-<span style=\"color: rgba(128, 0, 128, 1)\">8.5</span>.<span style=\"color: rgba(128, 0, 128, 1)\">57</span>/bin/tomcat-<span style=\"color: rgba(0, 0, 0, 1)\">juli.jar\njava.naming.factory.initial </span>=<span style=\"color: rgba(0, 0, 0, 1)\"> org.apache.naming.java.javaURLContextFactory\npackage.definition </span>=<span style=\"color: rgba(0, 0, 0, 1)\"> sun.,java.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.naming.,org.apache.tomcat.\njava.vm.specification.version </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1.8</span><span style=\"color: rgba(0, 0, 0, 1)\">\nsun.arch.data.model </span>= <span style=\"color: rgba(128, 0, 128, 1)\">64</span><span style=\"color: rgba(0, 0, 0, 1)\">\nsun.java.command </span>=<span style=\"color: rgba(0, 0, 0, 1)\"> org.apache.catalina.startup.Bootstrap start\njava.home </span>= /home/hadoop/jdk/<span style=\"color: rgba(0, 0, 0, 1)\">jre\nuser.language </span>=<span style=\"color: rgba(0, 0, 0, 1)\"> en\njava.specification.vendor </span>=<span style=\"color: rgba(0, 0, 0, 1)\"> Oracle Corporation\nawt.toolkit </span>=<span style=\"color: rgba(0, 0, 0, 1)\"> sun.awt.X11.XToolkit\njava.vm.</span><span style=\"color: rgba(0, 0, 255, 1)\">info</span> =<span style=\"color: rgba(0, 0, 0, 1)\"> mixed mode\njava.version </span>= <span style=\"color: rgba(128, 0, 128, 1)\">1.8</span><span style=\"color: rgba(0, 0, 0, 1)\">.0_181\njava.ext.dirs </span>= /home/hadoop/jdk/jre/lib/ext:/usr/java/packages/lib/<span style=\"color: rgba(0, 0, 0, 1)\">ext\nsun.boot.class.path </span>= /home/hadoop/jdk/jre/lib/resources.jar:/home/hadoop/jdk/jre/lib/rt.jar:/home/hadoop/jdk/jre/lib/sunrsasign.jar:/home/hadoop/jdk/jre/lib/jsse.jar:/home/hadoop/jdk/jre/lib/jce.jar:/home/hadoop/jdk/jre/lib/charsets.jar:/home/hadoop/jdk/jre/lib/jfr.jar:/home/hadoop/jdk/jre/<span style=\"color: rgba(0, 0, 0, 1)\">classes\nserver.loader </span>=<span style=\"color: rgba(0, 0, 0, 1)\">\njava.vendor </span>=<span style=\"color: rgba(0, 0, 0, 1)\"> Oracle Corporation\ncatalina.base </span>= /root/apache-tomcat-<span style=\"color: rgba(128, 0, 128, 1)\">8.5</span>.<span style=\"color: rgba(128, 0, 128, 1)\">57</span><span style=\"color: rgba(0, 0, 0, 1)\">\njdk.tls.ephemeralDHKeySize </span>= <span style=\"color: rgba(128, 0, 128, 1)\">2048</span>\n<span style=\"color: rgba(0, 0, 255, 1)\">file</span>.separator = /<span style=\"color: rgba(0, 0, 0, 1)\">\njava.vendor.url.bug </span>= http:<span style=\"color: rgba(0, 128, 0, 1)\">//</span><span style=\"color: rgba(0, 128, 0, 1)\">bugreport.sun.com/bugreport/</span>\ncommon.loader = <span style=\"color: rgba(128, 0, 0, 1)\">\"</span><span style=\"color: rgba(128, 0, 0, 1)\">${catalina.base}/lib</span><span style=\"color: rgba(128, 0, 0, 1)\">\"</span>,<span style=\"color: rgba(128, 0, 0, 1)\">\"</span><span style=\"color: rgba(128, 0, 0, 1)\">${catalina.base}/lib/*.jar</span><span style=\"color: rgba(128, 0, 0, 1)\">\"</span>,<span style=\"color: rgba(128, 0, 0, 1)\">\"</span><span style=\"color: rgba(128, 0, 0, 1)\">${catalina.home}/lib</span><span style=\"color: rgba(128, 0, 0, 1)\">\"</span>,<span style=\"color: rgba(128, 0, 0, 1)\">\"</span><span style=\"color: rgba(128, 0, 0, 1)\">${catalina.home}/lib/*.jar</span><span style=\"color: rgba(128, 0, 0, 1)\">\"</span><span style=\"color: rgba(0, 0, 0, 1)\">\nsun.io.unicode.encoding </span>=<span style=\"color: rgba(0, 0, 0, 1)\"> UnicodeLittle\nsun.cpu.endian </span>=<span style=\"color: rgba(0, 0, 0, 1)\"> little\npackage.access </span>=<span style=\"color: rgba(0, 0, 0, 1)\"> sun.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.tomcat.\nsun.cpu.isalist </span>=</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<a name=\"_label1_3\"></a><h3>2.4、jmap</h3>\n<p>jmap（Memory Map for Java）命令用于生成堆转储快照（一般称为heapdump或dump文件），还可以使用“暴力”方式：-XX：+HeapDumpOnOutOfMemoryError参数，可以让虚拟机在内存溢出异常出现之后自动生成堆转储快照文件</p>\n<p>jmap的作用并不仅仅是为了获取堆转储快照，它还可以查询finalize执行队列、Java堆和方法区的详细信息，如空间使用率、当前用的是哪种收集器等</p>\n<div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div>\n<pre>[root@hadoop ~]# jmap -<span style=\"color: rgba(0, 0, 0, 1)\">help\nUsage:\n    jmap [option] </span>&lt;pid&gt;<span style=\"color: rgba(0, 0, 0, 1)\">\n        (to connect to running process)\n    jmap [option] </span>&lt;executable &lt;core&gt;<span style=\"color: rgba(0, 0, 0, 1)\">\n        (to connect to a core </span><span style=\"color: rgba(0, 0, 255, 1)\">file</span><span style=\"color: rgba(0, 0, 0, 1)\">)\n    jmap [option] [server_id@]</span>&lt;remote server IP or <span style=\"color: rgba(0, 0, 255, 1)\">hostname</span>&gt;<span style=\"color: rgba(0, 0, 0, 1)\">\n        (to connect to remote debug server)\n\nwhere </span>&lt;option&gt;<span style=\"color: rgba(0, 0, 0, 1)\"> is one of:\n    </span>&lt;none&gt;               to print same <span style=\"color: rgba(0, 0, 255, 1)\">info</span><span style=\"color: rgba(0, 0, 0, 1)\"> as Solaris pmap\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">heap                to print java heap summary #统计堆\n    </span>-histo[:live]        to print histogram of java <span style=\"color: rgba(0, 0, 255, 1)\">object</span> heap; <span style=\"color: rgba(0, 0, 255, 1)\">if</span> the <span style=\"color: rgba(128, 0, 0, 1)\">\"</span><span style=\"color: rgba(128, 0, 0, 1)\">live</span><span style=\"color: rgba(128, 0, 0, 1)\">\"</span><span style=\"color: rgba(0, 0, 0, 1)\">\n                         suboption is specified, only count live objects\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">clstats             to print class loader statistics\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">finalizerinfo       to print information on objects awaiting finalization\n    </span>-dump:&lt;dump-options&gt; to dump java heap <span style=\"color: rgba(0, 0, 255, 1)\">in</span><span style=\"color: rgba(0, 0, 0, 1)\"> hprof binary format #dump出java堆的二进制文件\n                         dump</span>-<span style=\"color: rgba(0, 0, 0, 1)\">options:\n                           live         dump only live objects; </span><span style=\"color: rgba(0, 0, 255, 1)\">if</span><span style=\"color: rgba(0, 0, 0, 1)\"> not specified,\n                                        all objects </span><span style=\"color: rgba(0, 0, 255, 1)\">in</span><span style=\"color: rgba(0, 0, 0, 1)\"> the heap are dumped.\n                           format</span>=<span style=\"color: rgba(0, 0, 0, 1)\">b     binary format\n                           </span><span style=\"color: rgba(0, 0, 255, 1)\">file</span>=&lt;<span style=\"color: rgba(0, 0, 255, 1)\">file</span>&gt;  dump heap to &lt;<span style=\"color: rgba(0, 0, 255, 1)\">file</span>&gt;<span style=\"color: rgba(0, 0, 0, 1)\">\n                         Example: jmap </span>-dump:live,format=b,<span style=\"color: rgba(0, 0, 255, 1)\">file</span>=heap.bin &lt;pid&gt;\n    -F                   force. Use with -dump:&lt;dump-options&gt; &lt;pid&gt; or -<span style=\"color: rgba(0, 0, 0, 1)\">histo\n                         to force a heap dump or histogram when </span>&lt;pid&gt;<span style=\"color: rgba(0, 0, 0, 1)\"> does not\n                         respond. The </span><span style=\"color: rgba(128, 0, 0, 1)\">\"</span><span style=\"color: rgba(128, 0, 0, 1)\">live</span><span style=\"color: rgba(128, 0, 0, 1)\">\"</span><span style=\"color: rgba(0, 0, 0, 1)\"> suboption is not supported\n                         </span><span style=\"color: rgba(0, 0, 255, 1)\">in</span><span style=\"color: rgba(0, 0, 0, 1)\"> this mode.\n    </span>-h | -<span style=\"color: rgba(0, 0, 0, 1)\">help           to print this help message\n    </span>-J&lt;flag&gt;             to pass &lt;flag&gt; directly to the runtime system</pre>\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div>\n<div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div>\n<pre>-<span style=\"color: rgba(0, 0, 0, 1)\">heap #打印jvm heap的情况，比如参数，分代，回收器等\n</span>-<span style=\"color: rgba(0, 0, 0, 1)\">histo #打印jvm heap的直方图。其输出信息包括类名，对象数量，对象占用大小。  \n</span>-<span style=\"color: rgba(0, 0, 0, 1)\">histo:live #同上，但是只答应存活对象的情况   \n</span>-dump #生成堆转储快照,格式为-dump:[live,]format=b,<span style=\"color: rgba(0, 0, 255, 1)\">file</span>=&lt;filename&gt;<span style=\"color: rgba(0, 0, 0, 1)\">,其中自参数说明是否只dump出存活对象\n</span>-finalizerinfo #显示在F-<span style=\"color: rgba(0, 0, 0, 1)\">Queue中等待的finalizer线程执行finalize方法的对象 \n</span>-<span style=\"color: rgba(0, 0, 0, 1)\">clstats #打印类的加载信息\n</span>-F #强制生成dump文件</pre>\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div>\n<p>jmap -heap 1645</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200915170200194-856897221.png\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;jmap -histo 1645 | more&nbsp; &nbsp;#查看内存中的对象和数量</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200915170836708-591541695.png\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;上图中的对象说明：</p>\n<div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div>\n<pre>B <span style=\"color: rgba(0, 0, 255, 1)\">byte</span><span style=\"color: rgba(0, 0, 0, 1)\">\nC </span><span style=\"color: rgba(0, 0, 255, 1)\">char</span><span style=\"color: rgba(0, 0, 0, 1)\">\nD </span><span style=\"color: rgba(0, 0, 255, 1)\">double</span><span style=\"color: rgba(0, 0, 0, 1)\">\nF </span><span style=\"color: rgba(0, 0, 255, 1)\">float</span><span style=\"color: rgba(0, 0, 0, 1)\">\nI </span><span style=\"color: rgba(0, 0, 255, 1)\">int</span><span style=\"color: rgba(0, 0, 0, 1)\">\nJ </span><span style=\"color: rgba(0, 0, 255, 1)\">long</span><span style=\"color: rgba(0, 0, 0, 1)\">\nZ boolean\n[ 数组，如[I表示int[]\n[L</span>+类名 其他对象</pre>\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div>\n<pre>jmap -dump:format=b,file=/root/dump.bin 1645  #将内存的使用情况dump到文件中</pre>\n<div class=\"cnblogs_code\">\n<pre>[root@hadoop bin]# jmap -dump:format=b,<span style=\"color: rgba(0, 0, 255, 1)\">file</span>=/root/dump.bin <span style=\"color: rgba(128, 0, 128, 1)\">1645</span><span style=\"color: rgba(0, 0, 0, 1)\">\nDumping heap to </span>/root/<span style=\"color: rgba(0, 0, 0, 1)\">dump.bin ...\nHeap dump </span><span style=\"color: rgba(0, 0, 255, 1)\">file</span> created</pre>\n</div>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200915172951253-1372093756.png\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<a name=\"_label1_4\"></a><h3>&nbsp;2.5、jhat</h3>\n<p>JDK提供jhat（JVM Heap Analysis Tool）命令与jmap搭配使用，来分析jmap生成的堆转储快照。jhat内置了一个微型的HTTP/Web服务器，生成堆转储快照的分析结果后，可以在浏览器中查看（实际情况使用的不多）</p>\n<div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div>\n<pre>[root@hadoop ~]# jhat -<span style=\"color: rgba(0, 0, 0, 1)\">help\nUsage:  jhat [</span>-stack &lt;<span style=\"color: rgba(0, 0, 255, 1)\">bool</span>&gt;] [-refs &lt;<span style=\"color: rgba(0, 0, 255, 1)\">bool</span>&gt;] [-port &lt;port&gt;] [-baseline &lt;<span style=\"color: rgba(0, 0, 255, 1)\">file</span>&gt;] [-debug &lt;<span style=\"color: rgba(0, 0, 255, 1)\">int</span>&gt;] [-version] [-h|-help] &lt;<span style=\"color: rgba(0, 0, 255, 1)\">file</span>&gt;\n\n        -J&lt;flag&gt;          Pass &lt;flag&gt;<span style=\"color: rgba(0, 0, 0, 1)\"> directly to the runtime system. For\n                          example, </span>-J-<span style=\"color: rgba(0, 0, 0, 1)\">mx512m to use a maximum heap size of 512MB\n        </span>-stack <span style=\"color: rgba(0, 0, 255, 1)\">false</span>:     Turn off tracking <span style=\"color: rgba(0, 0, 255, 1)\">object</span><span style=\"color: rgba(0, 0, 0, 1)\"> allocation call stack.\n        </span>-refs <span style=\"color: rgba(0, 0, 255, 1)\">false</span><span style=\"color: rgba(0, 0, 0, 1)\">:      Turn off tracking of references to objects\n        </span>-port &lt;port&gt;:     Set the port <span style=\"color: rgba(0, 0, 255, 1)\">for</span> the HTTP server.  Defaults to <span style=\"color: rgba(128, 0, 128, 1)\">7000</span>\n        -exclude &lt;<span style=\"color: rgba(0, 0, 255, 1)\">file</span>&gt;:  Specify a <span style=\"color: rgba(0, 0, 255, 1)\">file</span><span style=\"color: rgba(0, 0, 0, 1)\"> that lists data members that should\n                          be excluded from the reachableFrom query.\n        </span>-baseline &lt;<span style=\"color: rgba(0, 0, 255, 1)\">file</span>&gt;: Specify a baseline <span style=\"color: rgba(0, 0, 255, 1)\">object</span> dump.  Objects <span style=\"color: rgba(0, 0, 255, 1)\">in</span><span style=\"color: rgba(0, 0, 0, 1)\">\n                          both heap dumps with the same ID and same class will\n                          be marked as not being </span><span style=\"color: rgba(128, 0, 0, 1)\">\"</span><span style=\"color: rgba(128, 0, 0, 1)\">new</span><span style=\"color: rgba(128, 0, 0, 1)\">\"</span><span style=\"color: rgba(0, 0, 0, 1)\">.\n        </span>-debug &lt;<span style=\"color: rgba(0, 0, 255, 1)\">int</span>&gt;<span style=\"color: rgba(0, 0, 0, 1)\">:     Set debug level.\n                            </span><span style=\"color: rgba(128, 0, 128, 1)\">0</span><span style=\"color: rgba(0, 0, 0, 1)\">:  No debug output\n                            </span><span style=\"color: rgba(128, 0, 128, 1)\">1</span>:  Debug hprof <span style=\"color: rgba(0, 0, 255, 1)\">file</span><span style=\"color: rgba(0, 0, 0, 1)\"> parsing\n                            </span><span style=\"color: rgba(128, 0, 128, 1)\">2</span>:  Debug hprof <span style=\"color: rgba(0, 0, 255, 1)\">file</span><span style=\"color: rgba(0, 0, 0, 1)\"> parsing, no server\n        </span>-<span style=\"color: rgba(0, 0, 0, 1)\">version          Report version number\n        </span>-h|-<span style=\"color: rgba(0, 0, 0, 1)\">help          Print this help and exit\n        </span>&lt;<span style=\"color: rgba(0, 0, 255, 1)\">file</span>&gt;            The <span style=\"color: rgba(0, 0, 255, 1)\">file</span><span style=\"color: rgba(0, 0, 0, 1)\"> to read\n\nFor a dump </span><span style=\"color: rgba(0, 0, 255, 1)\">file</span><span style=\"color: rgba(0, 0, 0, 1)\"> that contains multiple heap dumps,\nyou may specify </span><span style=\"color: rgba(0, 0, 255, 1)\">which</span> dump <span style=\"color: rgba(0, 0, 255, 1)\">in</span> the <span style=\"color: rgba(0, 0, 255, 1)\">file</span><span style=\"color: rgba(0, 0, 0, 1)\">\nby appending </span><span style=\"color: rgba(128, 0, 0, 1)\">\"</span><span style=\"color: rgba(128, 0, 0, 1)\">#&lt;number&gt;</span><span style=\"color: rgba(128, 0, 0, 1)\">\"</span> to the <span style=\"color: rgba(0, 0, 255, 1)\">file</span> name, i.e. <span style=\"color: rgba(128, 0, 0, 1)\">\"</span><span style=\"color: rgba(128, 0, 0, 1)\">foo.hprof#3</span><span style=\"color: rgba(128, 0, 0, 1)\">\"</span><span style=\"color: rgba(0, 0, 0, 1)\">.\n\nAll boolean options default to </span><span style=\"color: rgba(128, 0, 0, 1)\">\"</span><span style=\"color: rgba(128, 0, 0, 1)\">true</span><span style=\"color: rgba(128, 0, 0, 1)\">\"</span></pre>\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div>\n<p>jhat -port 9999 dump.bin&nbsp;</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200915173804663-1000472988.png\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;登录自己的地址：<a href=\"http://192.168.88.137:9999/\">http://192.168.88.137:9999/</a></p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200915173940203-1483764658.png\" alt=\"\" width=\"1545\" height=\"384\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;这个网址拉到最下面有一个查询功能：</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200915174154308-674190098.png\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;<img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200915174255480-1554625974.png\" alt=\"\" width=\"1565\" height=\"506\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;如上的每一个结果都可以点进去去查看</p>\n<a name=\"_label1_5\"></a><h3>2.6、jstack</h3>\n<p>jstack（Stack Trace for Java）命令用于生成虚拟机当前时刻的线程快照（一般称为threaddump或者javacore文件）。线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的目的通常是定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间挂起等，都是导致线程长时间停顿的常见原因</p>\n<div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div>\n<pre>[root@hadoop ~]# jstack -<span style=\"color: rgba(0, 0, 0, 1)\">help\nUsage:\n    jstack [</span>-l] &lt;pid&gt;<span style=\"color: rgba(0, 0, 0, 1)\">\n        (to connect to running process)\n    jstack </span>-F [-m] [-l] &lt;pid&gt;<span style=\"color: rgba(0, 0, 0, 1)\">\n        (to connect to a hung process)\n    jstack [</span>-m] [-l] &lt;executable&gt; &lt;core&gt;<span style=\"color: rgba(0, 0, 0, 1)\">\n        (to connect to a core </span><span style=\"color: rgba(0, 0, 255, 1)\">file</span><span style=\"color: rgba(0, 0, 0, 1)\">)\n    jstack [</span>-m] [-l] [server_id@]&lt;remote server IP or <span style=\"color: rgba(0, 0, 255, 1)\">hostname</span>&gt;<span style=\"color: rgba(0, 0, 0, 1)\">\n        (to connect to a remote debug server)\n\nOptions:\n    </span>-F  to force a thread dump. Use when jstack &lt;pid&gt;<span style=\"color: rgba(0, 0, 0, 1)\"> does not respond (process is hung)\n    </span>-<span style=\"color: rgba(0, 0, 0, 1)\">m  to print both java and native frames (mixed mode)\n    </span>-l  <span style=\"color: rgba(0, 0, 255, 1)\">long</span><span style=\"color: rgba(0, 0, 0, 1)\"> listing. Prints additional information about locks\n    </span>-h or -help to print this help message</pre>\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div>\n<div class=\"cnblogs_code\">\n<pre>-<span style=\"color: rgba(0, 0, 0, 1)\">F : 当正常输出请求不被响应时，强制输出线程堆栈\n</span>-<span style=\"color: rgba(0, 0, 0, 1)\">l : 除堆栈外，显示关于锁的附加信息\n</span>-m : 如果调用到本地方法的话，可以显示C/C++的堆栈</pre>\n</div>\n<p>jstack 1645 | more&nbsp; #查看该线程的快照信息</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200915175240263-619689073.png\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;如上的状态信息可以参考：<a class=\"entrylistItemTitle\" href=\"https://www.cnblogs.com/zsql/p/11144688.html\">java多线程与并发（基础篇）</a></p>\n<div style=\"text-align: right;\"><a href=\"#_labelTop\" style=\"color:#f68a33\">回到顶部</a><a name=\"_label2\"></a></div><h2>三、可视化工具</h2>\n<a name=\"_label2_0\"></a><h3>3.1、JConsole</h3>\n<p>JConsole（Java Monitoring and Management Console）是一款基于JMX（Java Manage-ment Extensions）的可视化监视、管理工具。它的主要功能是通过JMX的MBean（Managed Bean）对系统进行信息收集和参数动态调整</p>\n<p>一、本地连接</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200915191522351-1358078084.png\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<p>&nbsp;</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200915191734514-165436540.png\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<p>&nbsp;</p>\n<p>&nbsp;可以看出来可以对内存，线程等进行监控。</p>\n<p>二、远程监控</p>\n<p>这里我们使用tomcat做实验，首先要修改catalina.sh文件，添加如下内容：参考<a href=\"https://blog.csdn.net/shamoshuizu/article/details/70598268\">https://blog.csdn.net/shamoshuizu/article/details/70598268</a></p>\n<div class=\"cnblogs_code\">\n<pre>JAVA_OPTS=<span style=\"color: rgba(128, 0, 0, 1)\">\"</span><span style=\"color: rgba(128, 0, 0, 1)\">-Djava.rmi.server.hostname=192.168.88.137 -Dcom.sun.management.jmxremote.port=8099 -Dcom.sun.management.jmxremote.rmi.port=8099 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false</span><span style=\"color: rgba(128, 0, 0, 1)\">\"</span></pre>\n</div>\n<p>然后重启tomcat，接下来连接远程</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200915192048430-1761629770.png\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<p>&nbsp;</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200915192159530-192737083.png\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<p>&nbsp;</p>\n<p>这个工具使用起来并不难，只要自己要有jvm的基础啦，不然看不懂，展示出来了也是白干活。</p>\n<a name=\"_label2_1\"></a><h3>3.2、VisualVM</h3>\n<p>VisualVM（All-in-One Java Troubleshooting Tool）是功能最强大的运行监视和故障处理程序之一，能够监控线程，内存情况，查看方法的CPU时间和内存中的对象，已被GC的对象，反向查看分配的堆栈，使用起来也很简单</p>\n<p>&nbsp;双击jvisualvm.exe软件，打开该工具</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200915192940163-281987126.png\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<p>&nbsp;</p>\n<p>同JConsole 一样可以本地和远程，直接打开本地进程</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200915193147065-1433455118.png\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<p>&nbsp;</p>\n<p>&nbsp;基本pid，jvm参数，主机等一览无余，还有监控页面包括cpu，堆，类，线程等监控，还可以执行垃圾回收，和dump线程呢</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200915193509851-1892204812.png\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<p>&nbsp;</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200915193638353-722446083.png\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<p>&nbsp;</p>\n<p>&nbsp;试试远程的，同JConsole&nbsp;的设置方式对tomcate进行设置</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200915193750915-285051266.png\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<p>&nbsp;</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200915193823766-745373434.png\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>其实工具是什么呢，就是为了方便获取信息嘛，能不能看懂，能不能还得看自己的水平够不够，能不能够发现问题，能不能解决问题了。</p>\n<a name=\"_label2_2\"></a><h3>&nbsp;3.3、JMC</h3>\n<p>&nbsp;Java Mission Control：可持续在线的监控工具</p>\n<p>JMC与虚拟机之间同样采取JMX协议进行通信，JMC一方面作为JMX控制台，显示来自虚拟机MBean提供的数据；另一方面作为JFR的分析工具，展示来自JFR的数据</p>\n<p>&nbsp;用起来也很简单，双击jmc.exe打开工具，默认情况下会扫描出本地的进程，然后可以点击：<strong>文件-&gt;连接</strong>，来创建新的连接：</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200915200451038-1083100847.png\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<p>&nbsp;</p>\n<p>然后根据下图操作，遇到情况下一步，下一步就好，就有如下的图了：</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200915200754911-774909187.png\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<p>&nbsp;</p>\n<p>&nbsp;该工具持续监控了很多东西：</p>\n<p>一般信息：关于虚拟机、操作系统和记录的一般信息。<br>内存：关于内存管理和垃圾收集的信息。<br>代码：关于方法、异常错误、编译和类加载的信息。<br>线程：关于应用程序中线程和锁的信息。<br>I/O：关于文件和套接字输入、输出的信息。<br>系统：关于正在运行Java虚拟机的系统、进程和环境变量的信息。<br>事件：关于记录中的事件类型的信息，可以根据线程或堆栈跟踪，按照日志或图形的格式查看。</p>\n<div style=\"text-align: right;\"><a href=\"#_labelTop\" style=\"color:#f68a33\">回到顶部</a><a name=\"_label3\"></a></div><h2>四、其他工具-MAT</h2>\n<p>MAT(Memory Analyzer Tool)，一个基于Eclipse的内存分析工具，是一个快速、功能丰富的JAVA heap分析工具，它可以帮助我们查找内存泄漏和减少内存消耗。使用内存分析工具从众多的对象中进行分析，快速的计算出在内存中对象的占用大小，看看是谁阻止了垃圾收集器的回收工作，并可以通过报表直观的查看到可能造成这种结果的对象</p>\n<p>官网：<a href=\"https://www.eclipse.org/mat/\">https://www.eclipse.org/mat/</a></p>\n<p>下载地址：<a href=\"https://www.eclipse.org/mat/downloads.php\">https://www.eclipse.org/mat/downloads.php</a></p>\n<p>下载后，解压，双击MemoryAnalyzer.exe打开程序，然后<strong>点击文件-&gt;打开dump出的文件，</strong>就出现了如下的图</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200915202308019-988734498.png\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<p>&nbsp;</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200915202639661-169815908.png\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<p>&nbsp;</p>\n<p>&nbsp;下图可以看到基本的内存可能出问题的地方：</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200915202942569-111453151.png\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<p>&nbsp;</p>\n<p>&nbsp;<img src=\"https://img2020.cnblogs.com/blog/1271254/202009/1271254-20200915203042466-1816023470.png\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto\"></p>\n<p>&nbsp;</p>\n<p>这篇文章纯粹是一个工具的使用简单说明，没有太多的技术含量，但是我觉得工欲善其事必先利其器，所以用好一些工具对自己能力的提升，效率的提升有莫大的帮助，工具这些东西只有用到的时候才会查找，但是也要大概了解下怎么用吧，比如什么工具可以用来干嘛呢，我写这个的目的就是用来以后自己当做工具文档来查看下，技术用时方恨少，所以平时多积累些也不是一件坏事呢，好吧，好好努力撒。</p>\n<p>&nbsp;</p>\n</div>"
  },
  {
    "category": "jvm",
    "qes": "什么情况下会发生栈内存溢出。",
    "ans": "<blockquote>\n<ul>\n<li>栈是线程私有的，他的生命周期与线程相同，每个方法在执行的时候都会创建一个栈帧，用来存储局部变量表，操作数栈，动态链接，方法出口等信息。局部变量表又包含基本数据类型，对象引用类型<br>\n如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverflowError异常，方法递归调用产生这种结果。<br>\n如果Java虚拟机栈可以动态扩展，并且扩展的动作已经尝试过，但是无法申请到足够的内存去完成扩展，或者在新建立线程的时候没有足够的内存去创建对应的虚拟机栈，那么Java虚拟机将抛出一个OutOfMemory 异常。(线程启动过多)<br>\n参数 -Xss 去调整JVM栈的大小</li>\n</ul>\n</blockquote>"
  },
  {
    "category": "jvm",
    "qes": "详解JVM内存模型。",
    "ans": "<blockquote>\n<ul>\n<li>\n<h4>程序计数器(线程私有)</h4>\n</li>\n</ul>\n<p>程序计数器是一块很小的内存空间，它是线程私有的，可以认作为当前线程的行号指示器。<br>\n我们知道对于一个处理器(如果是多核cpu那就是一核)，在一个确定的时刻都只会执行一条线程中的指令，一条线程中有多个指令，为了线程切换可以恢复到正确执行位置，每个线程都需有独立的一个程序计数器，不同线程之间的程序计数器互不影响，独立存储。<br>\n注意：如果线程执行的是个java方法，那么计数器记录虚拟机字节码指令的地址。如果为native【底层方法】，那么计数器为空。<strong>这块内存区域是虚拟机规范中唯一没有OutOfMemoryError的区域</strong>。</p>\n<ul>\n<li>\n<h4>Java栈（虚拟机栈 线程私有）</h4>\n</li>\n</ul>\n<p>同计数器也为线程私有，生命周期与相同，就是我们平时说的栈，栈描述的是Java<br>\n方法执行的内存模型。每个方法被执行的时候都会创建一个栈帧用于存储局部变量表，操作栈，动态链接，方法出口等信息。每一个方法被调用的过程就对应一个栈帧在虚拟机栈中从入栈到出栈的过程。</p>\n<ul>\n<li>\n<h4>堆(线程共享)</h4>\n</li>\n</ul>\n<p>对于大多数应用来说，堆是java虚拟机管理内存最大的一块内存区域，因为堆存放的对象是线程共享的，所以多线程的时候也需要同步机制。创建的对象和数组都保存在 Java 堆内存中，也是垃圾收集器进行垃圾收集的最重要的内存区域。由于现代 VM 采用分代收集算法, 因此 Java 堆从 GC 的角度还可以<br>\n细分为: 新生代( Eden 区 、 From Survivor 区 和 To Survivor 区 )和老年代。</p>\n<ul>\n<li>\n<h4>本地方法区(私有)</h4>\n</li>\n</ul>\n<p>方法区同堆一样，是所有线程共享的内存区域，为了区分堆，又被称为非堆.<br>\n用于存储已被虚拟机加载的类信息、常量、静态变量，如static修饰的变量加载类的时候就被加载到方法区中。</p>\n</blockquote>"
  },
  {
    "category": "jvm",
    "qes": "int i = 1 存放在哪里",
    "ans": "<blockquote>\n<p>全局变量i，他是存放在java堆中。因为它不是静态的变量，不会独立于类的实例而存在，而该类实例化之后，放在堆中，当然也包含了它的属性i。<br>\n如果在方法中定义了int i = 0;则在局部变量表创建了两个对象：引用i和0。 这两个对象都是线程私有（安全）的。 比如定义了int[] is = new int[10]. 定义了两个对象，一个是is引用，放在局部变量表中，一个是长度为10的数组，放在堆中，这个数组，只能通过is来访问，方法结束后出栈，is被销毁，根据java的根搜索算法，判断数组不可达，就将它销毁了。<br>\n成员变量 int a = 1; a 存放在方法区，1存放在堆内存，a指向该内存<br>\n局部变量 int a = 1;a 存放在方法区， 1存放在栈内存，a指向该变量</p>\n</blockquote>"
  },
  {
    "category": "jvm",
    "qes": "死锁产生原因如何防止死锁",
    "ans": "<div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"htmledit_views\">\n                    <h1 style=\"margin:15px auto\"><a name=\"t0\"></a><a name=\"t0\"></a><span style=\"font-size:18px\">一、死锁的定义</span></h1> \n<span style=\"font-size:12px\">多线程以及多进程改善了系统资源的利用率并提高了系统 的处理能力。然而，并发执行也带来了新的问题——死锁。所谓死锁是指多个线程因竞争资源而造成的一种僵局（互相等待），若无外力作用，这些进程都将无法向前推进。<br> <br> 下面我们通过一些实例来说明死锁现象。<br> <br> 先看生活中的一个实例，2个人一起吃饭但是只有一双筷子，2人轮流吃（同时拥有2只筷子才能吃）。某一个时候，一个拿了左筷子，一人拿了右筷子，2个人都同时占用一个资源，等待另一个资源，这个时候甲在等待乙吃完并释放它占有的筷子，同理，乙也在等待甲吃完并释放它占有的筷子，这样就陷入了一个死循环，谁也无法继续吃饭。。。<br> 在计算机系统中也存在类似的情况。例如，某计算机系统中只有一台打印机和一台输入 设备，进程P1正占用输入设备，同时又提出使用打印机的请求，但此时打印机正被进程P2 所占用，而P2在未释放打印机之前，又提出请求使用正被P1占用着的输入设备。这样两个进程相互无休止地等待下去，均无法继续执行，此时两个进程陷入死锁状态。</span> \n<h1 style=\"margin:15px auto\"><a name=\"t1\"></a><a name=\"t1\"></a><span style=\"font-size:18px\">二、死锁产生的原因</span></h1> \n<h4 style=\"margin:10px auto\"><span style=\"font-size:12px\">1) 系统资源的竞争</span></h4> \n<span style=\"font-size:12px\">通常系统中拥有的不可剥夺资源，其数量不足以满足多个进程运行的需要，使得进程在 运行过程中，会因争夺资源而陷入僵局，如磁带机、打印机等。只有对不可剥夺资源的竞争 才可能产生死锁，对可剥夺资源的竞争是不会引起死锁的。</span> \n<h4 style=\"margin:10px auto\"><span style=\"font-size:12px\">2) 进程推进顺序非法</span></h4> \n<span style=\"font-size:12px\">进程在运行过程中，请求和释放资源的顺序不当，也同样会导致死锁。例如，并发进程 P1、P2分别保持了资源R1、R2，而进程P1申请资源R2，进程P2申请资源R1时，两者都 会因为所需资源被占用而阻塞。<br> <br> 信号量使用不当也会造成死锁。进程间彼此相互等待对方发来的消息，结果也会使得这 些进程间无法继续向前推进。例如，进程A等待进程B发的消息，进程B又在等待进程A 发的消息，<strong>可以看出进程A和B不是因为竞争同一资源，而是在等待对方的资源导致死锁。</strong></span> \n<h4 style=\"margin:10px auto\"><span style=\"font-size:12px\">3) 死锁产生的必要条件</span></h4> \n<span style=\"font-size:12px\">产生死锁必须同时满足以下四个条件，只要其中任一条件不成立，死锁就不会发生。</span> \n<ul style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; padding-left:20px\"><li><strong><span style=\"font-size:12px\">互斥条件：进程要求对所分配的资源（如打印机）进行排他性控制，即在一段时间内某 资源仅为一个进程所占有。此时若有其他进程请求该资源，则请求进程只能等待。</span></strong></li><li><strong><span style=\"font-size:12px\">不剥夺条件：进程所获得的资源在未使用完毕之前，不能被其他进程强行夺走，即只能 由获得该资源的进程自己来释放（只能是主动释放)。</span></strong></li><li><strong><span style=\"font-size:12px\">请求和保持条件：进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源 已被其他进程占有，此时请求进程被阻塞，但对自己已获得的资源保持不放。</span></strong></li><li><strong><span style=\"font-size:12px\">循环等待条件：存在一种进程资源的循环等待链，链中每一个进程已获得的资源同时被 链中下一个进程所请求。即存在一个处于等待状态的进程集合{Pl, P2, ..., pn}，其中Pi等 待的资源被P(i+1)占有（i=0, 1, ..., n-1)，Pn等待的资源被P0占有，如图2-15所示。</span></strong></li></ul> \n<span style=\"font-size:12px\"><br> 直观上看，循环等待条件似乎和死锁的定义一样，其实不然。按死锁定义构成等待环所 要求的条件更严，它要求Pi等待的资源必须由P(i+1)来满足，而循环等待条件则无此限制。 例如，系统中有两台输出设备，P0占有一台，PK占有另一台，且K不属于集合{0, 1, ..., n}。<br> <br> Pn等待一台输出设备，它可以从P0获得，也可能从PK获得。因此，虽然Pn、P0和其他 一些进程形成了循环等待圈，但PK不在圈内，若PK释放了输出设备，则可打破循环等待, 如图2-16所示。因此循环等待只是死锁的必要条件。<br> <br> </span> \n<div>\n <span style=\"font-size:12px\"><img alt=\"\" src=\"http://c.biancheng.net/cpp/uploads/allimg/140630/1-140630152010348.jpg\" style=\"border:none; max-width:728px!important; width:500px; height:215px\"></span>\n</div> \n<span style=\"font-size:12px\"><br> </span> \n<p><span style=\"font-size:12px\">资源分配图含圈而系统又不一定有死锁的原因是同类资源数大于1。但若系统中每类资 源都只有一个资源，则资源分配图含圈就变成了系统出现死锁的充分必要条件。</span></p> \n<p><span style=\"font-size:12px\"><strong><br> </strong></span></p> \n<p><span style=\"font-size:12px\"><strong>产生死锁的一个例子</strong></span></p> \n<p><span style=\"font-size:12px\"></span></p>\n<pre><code class=\"language-java hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">/** </span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">* 一个简单的死锁类 </span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">* 当DeadLock类的对象flag==1时（td1），先锁定o1,睡眠500毫秒 </span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">* 而td1在睡眠的时候另一个flag==0的对象（td2）线程启动，先锁定o2,睡眠500毫秒 </span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">* td1睡眠结束后需要锁定o2才能继续执行，而此时o2已被td2锁定； </span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">* td2睡眠结束后需要锁定o1才能继续执行，而此时o1已被td1锁定； </span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">* td1、td2相互等待，都需要得到对方锁定的资源才能继续执行，从而死锁。 </span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">*/</span>  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DeadLock</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Runnable</span> </span>{  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> flag = <span class=\"hljs-number\">1</span>;  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-comment\">//静态对象是类的所有对象共享的  </span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Object o1 = <span class=\"hljs-keyword\">new</span> Object(), o2 = <span class=\"hljs-keyword\">new</span> Object();  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"13\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-meta\">@Override</span>  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"14\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>{  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"15\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        System.out.println(<span class=\"hljs-string\">\"flag=\"</span> + flag);  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"16\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">if</span> (flag == <span class=\"hljs-number\">1</span>) {  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"17\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            <span class=\"hljs-keyword\">synchronized</span> (o1) {  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"18\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                <span class=\"hljs-keyword\">try</span> {  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"19\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                    Thread.sleep(<span class=\"hljs-number\">500</span>);  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"20\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                } <span class=\"hljs-keyword\">catch</span> (Exception e) {  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"21\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                    e.printStackTrace();  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"22\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                }  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"23\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                <span class=\"hljs-keyword\">synchronized</span> (o2) {  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"24\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                    System.out.println(<span class=\"hljs-string\">\"1\"</span>);  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"25\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                }  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"26\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            }  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"27\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        }  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"28\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">if</span> (flag == <span class=\"hljs-number\">0</span>) {  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"29\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            <span class=\"hljs-keyword\">synchronized</span> (o2) {  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"30\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                <span class=\"hljs-keyword\">try</span> {  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"31\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                    Thread.sleep(<span class=\"hljs-number\">500</span>);  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"32\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                } <span class=\"hljs-keyword\">catch</span> (Exception e) {  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"33\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                    e.printStackTrace();  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"34\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                }  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"35\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                <span class=\"hljs-keyword\">synchronized</span> (o1) {  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"36\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                    System.out.println(<span class=\"hljs-string\">\"0\"</span>);  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"37\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                }  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"38\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            }  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"39\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        }  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"40\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"41\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"42\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"43\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">          </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"44\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        DeadLock td1 = <span class=\"hljs-keyword\">new</span> DeadLock();  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"45\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        DeadLock td2 = <span class=\"hljs-keyword\">new</span> DeadLock();  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"46\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        td1.flag = <span class=\"hljs-number\">1</span>;  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"47\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        td2.flag = <span class=\"hljs-number\">0</span>;  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"48\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-comment\">//td1,td2都处于可执行状态，但JVM线程调度先执行哪个线程是不确定的。  </span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"49\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-comment\">//td2的run()可能在td1的run()之前运行  </span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"50\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">new</span> Thread(td1).start();  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"51\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">new</span> Thread(td2).start();  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"52\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"53\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"54\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}  </div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<br> \n<br> \n<p></p> \n<p><span style=\"font-size:12px\"></span></p> \n<h1 style=\"margin:15px auto\"><a name=\"t2\"></a><a name=\"t2\"></a><span style=\"font-size:18px\">三、如何避免死锁</span></h1> \n<div> \n <p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px\"> <span style=\"font-size:12px\">在有些情况下死锁是可以避免的。三种用于避免死锁的技术：</span></p> \n <ol style=\"margin:0px 0px 1em 19px; padding:0px\"><li style=\"padding:0px 0px 5px; margin:0px\"><span style=\"outline:none; font-size:12px\">加锁顺序（线程按照一定的顺序加锁）</span></li><li style=\"padding:0px 0px 5px; margin:0px\"><span style=\"outline:none; font-size:12px\">加锁时限（线程尝试获取锁的时候加上一定的时限，超过时限则放弃对该锁的请求，并释放自己占有的锁）</span></li><li style=\"padding:0px 0px 5px; margin:0px\"><span style=\"outline:none; font-size:12px\">死锁检测</span></li></ol> \n <p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px\"> <span style=\"font-size:12px\"><span id=\"more-3819\"></span></span></p> \n <h4 id=\"ordering\" style=\"margin:0px 0px 10px\"><span style=\"font-size:12px\">加锁顺序</span></h4> \n <p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px\"> <span style=\"font-size:12px\">当多个线程需要相同的一些锁，但是按照不同的顺序加锁，死锁就很容易发生。</span></p> \n <p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px\"> <span style=\"font-size:12px\">如果能确保所有的线程都是按照相同的顺序获得锁，那么死锁就不会发生。看下面这个例子：</span></p> \n <pre style=\"border:1px solid rgb(204,204,204); padding:10px 20px; margin-top:0px; margin-bottom:1em; overflow:auto\"><span style=\"font-size:12px\">Thread 1:\n  lock A \n  lock B\n\nThread 2:\n   wait for A\n   lock C (when A locked)\n\nThread 3:\n   wait for A\n   wait for B\n   wait for C</span></pre> \n <p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px\"> <span style=\"font-size:12px\">如果一个线程（比如线程3）需要一些锁，那么它必须按照确定的顺序获取锁。它只有获得了从顺序上排在前面的锁之后，才能获取后面的锁。</span></p> \n <p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px\"> <span style=\"font-size:12px\">例如，线程2和线程3只有在获取了锁A之后才能尝试获取锁C(译者注：获取锁A是获取锁C的必要条件)。因为线程1已经拥有了锁A，所以线程2和3需要一直等到锁A被释放。然后在它们尝试对B或C加锁之前，必须成功地对A加了锁。</span></p> \n <p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px\"> <span style=\"font-size:12px\">按照顺序加锁是一种有效的死锁预防机制。但是，这种方式需要你事先知道所有可能会用到的锁(译者注：并对这些锁做适当的排序)，但总有些时候是无法预知的。</span></p> \n <h4 id=\"timeout\" style=\"margin:0px 0px 10px\"><span style=\"font-size:12px\">加锁时限</span></h4> \n <p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px\"> <span style=\"font-size:12px\">另外一个可以避免死锁的方法是在尝试获取锁的时候加一个超时时间，这也就意味着在尝试获取锁的过程中若超过了这个时限该线程则放弃对该锁请求。若一个线程没有在给定的时限内成功获得所有需要的锁，则会进行回退并释放所有已经获得的锁，然后等待一段随机的时间再重试。这段随机的等待时间让其它线程有机会尝试获取相同的这些锁，并且让该应用在没有获得锁的时候可以继续运行(译者注：加锁超时后可以先继续运行干点其它事情，再回头来重复之前加锁的逻辑)。</span></p> \n <p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px\"> <span style=\"font-size:12px\">以下是一个例子，展示了两个线程以不同的顺序尝试获取相同的两个锁，在发生超时后回退并重试的场景：</span></p> \n <pre style=\"border:1px solid rgb(204,204,204); padding:10px 20px; margin-top:0px; margin-bottom:1em; overflow:auto\"><span style=\"font-size:12px\">Thread 1 locks A\nThread 2 locks B\n\nThread 1 attempts to lock B but is blocked\nThread 2 attempts to lock A but is blocked\n\nThread 1's lock attempt on B times out\nThread 1 backs up and releases A as well\nThread 1 waits randomly (e.g. 257 millis) before retrying.\n\nThread 2's lock attempt on A times out\nThread 2 backs up and releases B as well\nThread 2 waits randomly (e.g. 43 millis) before retrying.</span></pre> \n <p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px\"> <span style=\"font-size:12px\">在上面的例子中，线程2比线程1早200毫秒进行重试加锁，因此它可以先成功地获取到两个锁。这时，线程1尝试获取锁A并且处于等待状态。当线程2结束时，线程1也可以顺利的获得这两个锁（除非线程2或者其它线程在线程1成功获得两个锁之前又获得其中的一些锁）。</span></p> \n <p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px\"> <span style=\"font-size:12px\">需要注意的是，由于存在锁的超时，所以我们不能认为这种场景就一定是出现了死锁。也可能是因为获得了锁的线程（导致其它线程超时）需要很长的时间去完成它的任务。</span></p> \n <p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px\"> <span style=\"font-size:12px\">此外，如果有非常多的线程同一时间去竞争同一批资源，就算有超时和回退机制，还是可能会导致这些线程重复地尝试但却始终得不到锁。如果只有两个线程，并且重试的超时时间设定为0到500毫秒之间，这种现象可能不会发生，但是如果是10个或20个线程情况就不同了。因为这些线程等待相等的重试时间的概率就高的多（或者非常接近以至于会出现问题）。<br> (译者注：超时和重试机制是为了避免在同一时间出现的竞争，但是当线程很多时，其中两个或多个线程的超时时间一样或者接近的可能性就会很大，因此就算出现竞争而导致超时后，由于超时时间一样，它们又会同时开始重试，导致新一轮的竞争，带来了新的问题。)</span></p> \n <p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px\"> <span style=\"font-size:12px\">这种机制存在一个问题，在Java中不能对synchronized同步块设置超时时间。你需要创建一个自定义锁，或使用Java5中java.util.concurrent包下的工具。写一个自定义锁类不复杂，但超出了本文的内容。后续的Java并发系列会涵盖自定义锁的内容。</span></p> \n <h4 id=\"detection\" style=\"margin:0px 0px 10px\"><span style=\"font-size:12px\">死锁检测</span></h4> \n <p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px\"> <span style=\"font-size:12px\">死锁检测是一个更好的死锁预防机制，它主要是针对那些不可能实现按序加锁并且锁超时也不可行的场景。</span></p> \n <p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px\"> <span style=\"font-size:12px\">每当一个线程获得了锁，会在线程和锁相关的数据结构中（map、graph等等）将其记下。除此之外，每当有线程请求锁，也需要记录在这个数据结构中。</span></p> \n <p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px\"> <span style=\"font-size:12px\">当一个线程请求锁失败时，这个线程可以遍历锁的关系图看看是否有死锁发生。例如，线程A请求锁7，但是锁7这个时候被线程B持有，这时线程A就可以检查一下线程B是否已经请求了线程A当前所持有的锁。如果线程B确实有这样的请求，那么就是发生了死锁（线程A拥有锁1，请求锁7；线程B拥有锁7，请求锁1）。</span></p> \n <p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px\"> <span style=\"font-size:12px\">当然，死锁一般要比两个线程互相持有对方的锁这种情况要复杂的多。线程A等待线程B，线程B等待线程C，线程C等待线程D，线程D又在等待线程A。线程A为了检测死锁，它需要递进地检测所有被B请求的锁。从线程B所请求的锁开始，线程A找到了线程C，然后又找到了线程D，发现线程D请求的锁被线程A自己持有着。这是它就知道发生了死锁。</span></p> \n <p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px\"> <span style=\"font-size:12px\">下面是一幅关于四个线程（A,B,C和D）之间锁占有和请求的关系图。像这样的数据结构就可以被用来检测死锁。</span></p> \n <p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px\"> <a target=\"_blank\" href=\"http://ifeve.com/?attachment_id=3873\" style=\"outline:none\" rel=\"noopener noreferrer\"><span style=\"font-size:12px\"><img class=\"aligncenter size-full wp-image-3873\" alt=\"\" src=\"http://ifeve.com/wp-content/uploads/2013/03/deadlock-detection-graph.png\" width=\"225\" height=\"355\" style=\"border:none; margin:15px auto; height:auto; max-width:100%; width:auto; display:block\"></span></a></p> \n <p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px\"> <span style=\"font-size:12px\">那么当检测出死锁时，这些线程该做些什么呢？</span></p> \n <p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px\"> <span style=\"font-size:12px\">一个可行的做法是释放所有锁，回退，并且等待一段随机的时间后重试。这个和简单的加锁超时类似，不一样的是只有死锁已经发生了才回退，而不会是因为加锁的请求超时了。虽然有回退和等待，但是如果有大量的线程竞争同一批锁，它们还是会重复地死锁（编者注：原因同超时类似，不能从根本上减轻竞争）。</span></p> \n <p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px\"> <span style=\"font-size:12px\">一个更好的方案是给这些线程设置优先级，让一个（或几个）线程回退，剩下的线程就像没发生死锁一样继续保持着它们需要的锁。如果赋予这些线程的优先级是固定不变的，同一批线程总是会拥有更高的优先级。为避免这个问题，可以在死锁发生的时候设置随机的优先级。</span></p> \n <br> \n</div> \n<p></p>\n                </div><div><div></div></div>\n        </div>"
  },
  {
    "category": "jvm",
    "qes": "死锁产生原因如何防止死锁",
    "ans": "<blockquote>\n<p><strong>Java发生死锁的根本原因是：</strong><br>\n死锁是因为多线程访问共享资源，由于访问的顺序不当所造成的，在申请锁时发生了交叉闭环申请。即线程在获得了锁A并且没有释放的情况下去申请锁B，这时，另一个线程已经获得了锁B，在释放锁B之前又要先获得锁A，因此闭环发生，陷入死锁循环。<br>\n<strong>防止死锁:</strong><br>\n1)尽量使用tryLock(long timeout, TimeUnit unit)的方法(ReentrantLock、ReentrantReadWriteLock)，设置超时时间，超时可以退出防止死锁。<br>\n2)尽量使用java.util.concurrent(jdk 1.5以上)包的并发类代替手写控制并发，比较常用的是ConcurrentHashMap、ConcurrentLinkedQueue、AtomicBoolean等等，实际应用中java.util.concurrent.atomic十分有用，简单方便且效率比使用Lock更高<br>\n3)尽量降低锁的使用粒度，尽量不要几个功能用同一把锁<br>\n4)尽量减少同步的代码块</p>\n</blockquote>"
  },
  {
    "category": "jvm",
    "qes": "线程安全和线程不安全的集合",
    "ans": "<div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"htmledit_views\">\n                    <p>集合大概有4种类型：List &nbsp; Set &nbsp; Queue &nbsp;Map</p> \n<p><span style=\"color:rgb(255,0,0); font-family:微软雅黑; font-size:14px\">其中Vector、HashTable、Properties是线程安全的。其中ArrayList、LinkedList、HashSet、TreeSet、HashMap、TreeMap等都是线程不安全的。（线程不安全是指：当多个线程访问同一个集合或Map时，如果有超过一个线程修改了ArrayList集合，则程序必须手动保证该集合的同步性。）</span><br> </p> \n<p><span style=\"font-family:微软雅黑\"><span style=\"font-size:14px\">当多个并发同时对非线程安全的集合进行增删改的时候会破坏这些集合的数据完整性</span></span></p> \n<p><span style=\"font-family:微软雅黑\"><span style=\"font-size:14px\"></span></span></p> \n<div style=\"margin:0px; padding:0px; color:rgb(69,69,69); font-family:微软雅黑; font-size:14px; line-height:21px\">\n  Collections提供的类方法把这些集合包装成线程安全的集合。Collections提供了如下几个静态方法。\n</div> \n<div style=\"margin:0px; padding:0px; color:rgb(69,69,69); font-family:微软雅黑; font-size:14px; line-height:21px\"> \n <ul style=\"margin:0px; padding:0px; list-style-position:initial; background-color:inherit\"><li style=\"margin:0px 0px 0px 40px; padding:0px; list-style:disc; background-color:inherit\"> &lt;T&gt; Collection&lt;T&gt; synchronizedCollection(Collection&lt;T&gt; c): 返回指定collection 对应的线程安全的collection。</li><li style=\"margin:0px 0px 0px 40px; padding:0px; list-style:disc; background-color:inherit\"> static &lt;T&gt; List&lt;T&gt; synchronizedList(List&lt;T&gt; list): 返回指定List对象对应的线程安全的List 对象。</li><li style=\"margin:0px 0px 0px 40px; padding:0px; list-style:disc; background-color:inherit\"> static &lt;K, V&gt; Map&lt;K, V&gt; synchronizedMap(Map&lt;K, V&gt; m): 返回指定Map对象对应的线程安全的Map对象。</li><li style=\"margin:0px 0px 0px 40px; padding:0px; list-style:disc; background-color:inherit\"> static &lt;T&gt; Set&lt;T&gt; synchronizedSet(Set&lt;T&gt; s): 返回指定Set对象对应的线程安全的Set对象。</li><li style=\"margin:0px 0px 0px 40px; padding:0px; list-style:disc; background-color:inherit\"> static &lt;K, V&gt; SortedMap&lt;K, V&gt; synchronizedSortedMap(SortedMap&lt;K, V&gt; m): 返回指定SortedMap对象对应的线程安全的SortedMap对象。</li><li style=\"margin:0px 0px 0px 40px; padding:0px; list-style:disc; background-color:inherit\"> static &lt;T&gt; SortedSet&lt;T&gt; synchronizedSortedSet(SortedSet&lt;T&gt; s): 返回指定SortedSet对象对应的线程安全的SortedSet对象。</li></ul> \n <div>\n  <br> \n </div> \n <div>\n  另外\n  <span style=\"color:rgb(69,69,69); font-family:微软雅黑; font-size:14px\">java.util.concurrent 包下提供了大量支持高效并发访问的集合接口和实现类:</span>\n </div> \n <div>\n  <span style=\"color:rgb(69,69,69); font-family:微软雅黑; font-size:14px\"></span> \n  <ul style=\"margin:0px; padding:0px; list-style-position:initial; color:rgb(69,69,69); font-family:微软雅黑; font-size:14px; background-color:inherit\"><li style=\"margin:0px 0px 0px 40px; padding:0px; list-style:disc; background-color:inherit\"> 以Concurrent 开头的集合类，如ConcurrentHashMap、ConcurrentSkipListMap、ConcurrentSkipListSet、ConcurrentLinkedQueue 和 ConcurrentLinkedDeque。</li><li style=\"margin:0px 0px 0px 40px; padding:0px; list-style:disc; background-color:inherit\"> 以CopyOnWrite 开头的集合类，如CopyOnWriteArrayList、CopyOnWriteArraySet。</li></ul> \n  <div>\n   <br> \n  </div> \n  <div>\n   <br> \n  </div> \n  <br> \n </div> \n <div>\n  <span style=\"color:rgb(69,69,69); font-family:微软雅黑; font-size:14px\"><br> </span>\n </div> \n</div> \n<p></p>\n                </div><div><div></div></div>\n        </div>"
  },
  {
    "category": "jvm",
    "qes": "jvm优化",
    "ans": "<blockquote>\n<p>1）年轻代(Young Gen)：年轻代主要存放新创建的对象，内存大小相对会比较小，垃圾回收会比较频繁。年轻代分成1个Eden Space和2个Suvivor Space（命名为A和B）。当对象在堆创建时，将进入年轻代的Eden Space。垃圾回收器进行垃圾回收时，扫描Eden Space和A Suvivor Space，如果对象仍然存活，则复制到B Suvivor Space，如果B Suvivor Space已经满，则复制到Old Gen。同时，在扫描Suvivor Space时，如果对象已经经过了几次的扫描仍然存活，JVM认为其为一个持久化对象，则将其移到Old Gen。扫描完毕后，JVM将Eden Space和A Suvivor Space清空，然后交换A和B的角色（即下次垃圾回收时会扫描Eden Space和B Suvivor Space。这么做主要是为了减少内存碎片的产生。<br>\n我们可以看到：Young Gen垃圾回收时，采用将存活对象复制到到空的Suvivor Space的方式来确保尽量不存在内存碎片，采用空间换时间的方式来加速内存中不再被持有的对象尽快能够得到回收。<br>\n2）年老代(Tenured Gen)：年老代主要存放JVM认为生命周期比较长的对象（经过几次的Young Gen的垃圾回收后仍然存在），内存大小相对会比较大，垃圾回收也相对没有那么频繁（譬如可能几个小时一次）。年老代主要采用压缩的方式来避免内存碎片（将存活对象移动到内存片的一边，也就是内存整理）。当然，有些垃圾回收器（譬如CMS垃圾回收器）出于效率的原因，可能会不进行压缩。<br>\n3）持久代(Perm Gen)：持久代主要存放类定义、字节码和常量等很少会变更的信息。<br>\n<strong>分区的目的：</strong>新生区由于对象产生的比较多并且大都是朝生夕灭的，所以直接采用复制算法。而养老区生命力很强，则采用标记-清理算法，针对不同情况使用不同算法。<br>\n非heap区域中Perm Gen中放着类、方法的定义，JVM Stack区域放着方法参数、局域变量等的引用，方法执行顺序按照栈的先入后出方式。</p>\n</blockquote>"
  },
  {
    "category": "jvm",
    "qes": "JVM 优化经验总结",
    "ans": "<div class=\"bx--col-md-7 bx--col-lg-7\">\n          <div class=\"cpt-byline\">\n            <div class=\"cpt-byline__wrap\">\n              <p class=\"cpt-byline__author\"> 周 明耀 <br> 发布: 2015-06-25</p>\n              <hr>\n            </div>\n          </div>\n          <section class=\"wp-content\">\n            <!-- begin main body content -->\n            <h2 id=\"开始之前\" xmlns=\"http://www.w3.org/1999/xhtml\">开始之前</h2>\n<p>Java 虚拟机有自己完善的硬件架构, 如处理器、堆栈、寄存器等，还具有相应的指令系统。JVM 屏蔽了与具体操作系统平台相关的信息，使得 Java 程序只需生成在 Java 虚拟机上运行的目标代码 (字节码), 就可以在多种平台上不加修改地运行。Java 虚拟机在执行字节码时，实际上最终还是把字节码解释成具体平台上的机器指令执行。</p>\n<p>注意：本文仅针对 JDK7、HotSPOT Java 虚拟机，对于 JDK8 引入的 JVM 新特性及其他 Java 虚拟机，本文不予关注。</p>\n<p>我们以一个例子开始这篇文章。假设你是一个普通的 Java 对象，你出生在 Eden 区，在 Eden 区有许多和你差不多的小兄弟、小姐妹，可以把 Eden 区当成幼儿园，在这个幼儿园里大家玩了很长时间。Eden 区不能无休止地放你们在里面，所以当年纪稍大，你就要被送到学校去上学，这里假设从小学到高中都称为 Survivor 区。开始的时候你在 Survivor 区里面划分出来的的 “From”区，读到高年级了，就进了 Survivor 区的 “To”区，中间由于学习成绩不稳定，还经常来回折腾。直到你 18 岁的时候，高中毕业了，该去社会上闯闯了。于是你就去了年老代，年老代里面人也很多。在年老代里，你生活了 20 年 (每次 GC 加一岁)，最后寿终正寝，被 GC 回收。有一点没有提，你在年老代遇到了一个同学，他的名字叫爱德华 (慕光之城里的帅哥吸血鬼)，他以及他的家族永远不会死，那么他们就生活在永生代。</p>\n<p>之前的文章 <a href=\"https://developer.ibm.com/zh/articles/j-lo-JVMGarbageCollection/\">《JVM 垃圾回收器工作原理及使用实例介绍》</a> 中已经介绍过年轻代、年老代、永生代，本文主要讲讲如何运用这些区域，为系统性能提供更好的帮助。本文不再重复这些概念，直接进入主题。</p>\n<h2 id=\"如何将新对象预留在年轻代\">如何将新对象预留在年轻代</h2>\n<p>众所周知，由于 Full GC 的成本远远高于 Minor GC，因此某些情况下需要尽可能将对象分配在年轻代，这在很多情况下是一个明智的选择。虽然在大部分情况下，JVM 会尝试在 Eden 区分配对象，但是由于空间紧张等问题，很可能不得不将部分年轻对象提前向年老代压缩。因此，在 JVM 参数调优时可以为应用程序分配一个合理的年轻代空间，以最大限度避免新对象直接进入年老代的情况发生。清单 1 所示代码尝试分配 4MB 内存空间，观察一下它的内存使用情况。</p>\n<h5 id=\"清单-1-相同大小内存分配\">清单 1. 相同大小内存分配</h5>\n<div class=\"bx--snippet bx--snippet--multi bx--snippet-btn--expand--hide\" data-code-snippet=\"\"><div class=\"bx--snippet-container\" aria-label=\"Code Snippet Text\"><pre><code>public class PutInEden {\n public static void main(String[] args){\n byte[] b1,b2,b3,b4;//定义变量\n b1=new byte[1024*1024];//分配 1MB 堆空间，考察堆空间的使用情况\n b2=new byte[1024*1024];\n b3=new byte[1024*1024];\n b4=new byte[1024*1024];\n }\n}\n</code></pre></div><button data-copy-btn=\"\" type=\"button\" class=\"bx--snippet-button\" aria-label=\"Copy code\" tabindex=\"0\"><svg class=\"bx--snippet__icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><path d=\"M1 10H0V2C0 .9.9 0 2 0h8v1H2c-.6 0-1 .5-1 1v8z\"></path><path d=\"M11 4.2V8h3.8L11 4.2zM15 9h-4c-.6 0-1-.4-1-1V4H4.5c-.3 0-.5.2-.5.5v10c0 .3.2.5.5.5h10c.3 0 .5-.2.5-.5V9zm-4-6c.1 0 .3.1.4.1l4.5 4.5c0 .1.1.3.1.4v6.5c0 .8-.7 1.5-1.5 1.5h-10c-.8 0-1.5-.7-1.5-1.5v-10C3 3.7 3.7 3 4.5 3H11z\"></path></svg><div class=\"bx--btn--copy__feedback\" data-feedback=\"已复制！\"></div></button><button class=\"bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand\" type=\"button\"><span class=\"bx--snippet-btn--text\" data-show-more-text=\"显示更多\" data-show-less-text=\"显示较少\">显示更多</span><svg class=\"bx--icon-chevron--down\" width=\"12\" height=\"7\" viewBox=\"0 0 12 7\" aria-label=\"Show more icon\"><title>Show more icon</title><path fill-rule=\"nonzero\" d=\"M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z\"></path></svg></button></div>\n<p xmlns=\"http://www.w3.org/1999/xhtml\">使用 JVM 参数-XX:+PrintGCDetails -Xmx20M -Xms20M 运行清单 1 所示代码，输出如清单 2 所示。</p>\n<h5 id=\"清单-2-清单-1-运行输出\">清单 2. 清单 1 运行输出</h5>\n<div class=\"bx--snippet bx--snippet--multi bx--snippet-btn--expand--hide\" data-code-snippet=\"\"><div class=\"bx--snippet-container\" aria-label=\"Code Snippet Text\"><pre><code>[GC [DefNew: 5504K-&gt;640K(6144K), 0.0114236 secs] 5504K-&gt;5352K(19840K),\n   0.0114595 secs] [Times: user=0.02 sys=0.00, real=0.02 secs]\n[GC [DefNew: 6144K-&gt;640K(6144K), 0.0131261 secs] 10856K-&gt;10782K(19840K),\n0.0131612 secs] [Times: user=0.02 sys=0.00, real=0.02 secs]\n[GC [DefNew: 6144K-&gt;6144K(6144K), 0.0000170 secs][Tenured: 10142K-&gt;13695K(13696K),\n0.1069249 secs] 16286K-&gt;15966K(19840K), [Perm : 376K-&gt;376K(12288K)],\n0.1070058 secs] [Times: user=0.03 sys=0.00, real=0.11 secs]\n[Full GC [Tenured: 13695K-&gt;13695K(13696K), 0.0302067 secs] 19839K-&gt;19595K(19840K),\n[Perm : 376K-&gt;376K(12288K)], 0.0302635 secs] [Times: user=0.03 sys=0.00, real=0.03 secs]\n[Full GC [Tenured: 13695K-&gt;13695K(13696K), 0.0311986 secs] 19839K-&gt;19839K(19840K),\n[Perm : 376K-&gt;376K(12288K)], 0.0312515 secs] [Times: user=0.03 sys=0.00, real=0.03 secs]\n[Full GC [Tenured: 13695K-&gt;13695K(13696K), 0.0358821 secs] 19839K-&gt;19825K(19840K),\n[Perm : 376K-&gt;371K(12288K)], 0.0359315 secs] [Times: user=0.05 sys=0.00, real=0.05 secs]\n[Full GC [Tenured: 13695K-&gt;13695K(13696K), 0.0283080 secs] 19839K-&gt;19839K(19840K),\n[Perm : 371K-&gt;371K(12288K)], 0.0283723 secs] [Times: user=0.02 sys=0.00, real=0.01 secs]\n[Full GC [Tenured: 13695K-&gt;13695K(13696K), 0.0284469 secs] 19839K-&gt;19839K(19840K),\n[Perm : 371K-&gt;371K(12288K)], 0.0284990 secs] [Times: user=0.03 sys=0.00, real=0.03 secs]\n[Full GC [Tenured: 13695K-&gt;13695K(13696K), 0.0283005 secs] 19839K-&gt;19839K(19840K),\n[Perm : 371K-&gt;371K(12288K)], 0.0283475 secs] [Times: user=0.03 sys=0.00, real=0.03 secs]\n[Full GC [Tenured: 13695K-&gt;13695K(13696K), 0.0287757 secs] 19839K-&gt;19839K(19840K),\n[Perm : 371K-&gt;371K(12288K)], 0.0288294 secs] [Times: user=0.03 sys=0.00, real=0.03 secs]\n[Full GC [Tenured: 13695K-&gt;13695K(13696K), 0.0288219 secs] 19839K-&gt;19839K(19840K),\n[Perm : 371K-&gt;371K(12288K)], 0.0288709 secs] [Times: user=0.03 sys=0.00, real=0.03 secs]\n[Full GC [Tenured: 13695K-&gt;13695K(13696K), 0.0293071 secs] 19839K-&gt;19839K(19840K),\n[Perm : 371K-&gt;371K(12288K)], 0.0293607 secs] [Times: user=0.03 sys=0.00, real=0.03 secs]\n[Full GC [Tenured: 13695K-&gt;13695K(13696K), 0.0356141 secs] 19839K-&gt;19838K(19840K),\n[Perm : 371K-&gt;371K(12288K)], 0.0356654 secs] [Times: user=0.01 sys=0.00, real=0.03 secs]\nHeap\n def new generation total 6144K, used 6143K [0x35c10000, 0x362b0000, 0x362b0000)\n eden space 5504K, 100% used [0x35c10000, 0x36170000, 0x36170000)\n from space 640K, 99% used [0x36170000, 0x3620fc80, 0x36210000)\n to space 640K, 0% used [0x36210000, 0x36210000, 0x362b0000)\n tenured generation total 13696K, used 13695K [0x362b0000, 0x37010000, 0x37010000)\n the space 13696K, 99% used [0x362b0000, 0x3700fff8, 0x37010000, 0x37010000)\n compacting perm gen total 12288K, used 371K [0x37010000, 0x37c10000, 0x3b010000)\n the space 12288K, 3% used [0x37010000, 0x3706cd20, 0x3706ce00, 0x37c10000)\n ro space 10240K, 51% used [0x3b010000, 0x3b543000, 0x3b543000, 0x3ba10000)\n rw space 12288K, 55% used [0x3ba10000, 0x3c0ae4f8, 0x3c0ae600, 0x3c610000)\n</code></pre></div><button data-copy-btn=\"\" type=\"button\" class=\"bx--snippet-button\" aria-label=\"Copy code\" tabindex=\"0\"><svg class=\"bx--snippet__icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><path d=\"M1 10H0V2C0 .9.9 0 2 0h8v1H2c-.6 0-1 .5-1 1v8z\"></path><path d=\"M11 4.2V8h3.8L11 4.2zM15 9h-4c-.6 0-1-.4-1-1V4H4.5c-.3 0-.5.2-.5.5v10c0 .3.2.5.5.5h10c.3 0 .5-.2.5-.5V9zm-4-6c.1 0 .3.1.4.1l4.5 4.5c0 .1.1.3.1.4v6.5c0 .8-.7 1.5-1.5 1.5h-10c-.8 0-1.5-.7-1.5-1.5v-10C3 3.7 3.7 3 4.5 3H11z\"></path></svg><div class=\"bx--btn--copy__feedback\" data-feedback=\"已复制！\"></div></button><button class=\"bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand\" type=\"button\"><span class=\"bx--snippet-btn--text\" data-show-more-text=\"显示更多\" data-show-less-text=\"显示较少\">显示更多</span><svg class=\"bx--icon-chevron--down\" width=\"12\" height=\"7\" viewBox=\"0 0 12 7\" aria-label=\"Show more icon\"><title>Show more icon</title><path fill-rule=\"nonzero\" d=\"M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z\"></path></svg></button></div>\n<p xmlns=\"http://www.w3.org/1999/xhtml\">清单 2 所示的日志输出显示年轻代 Eden 的大小有 5MB 左右。分配足够大的年轻代空间，使用 JVM 参数 -XX:+PrintGCDetails -Xmx20M -Xms20M-Xmn6M 运行清单 1 所示代码，输出如清单 3 所示。</p>\n<h5 id=\"清单-3-增大-eden-大小后清单-1-运行输出\">清单 3. 增大 Eden 大小后清单 1 运行输出</h5>\n<div class=\"bx--snippet bx--snippet--multi bx--snippet-btn--expand--hide\" data-code-snippet=\"\"><div class=\"bx--snippet-container\" aria-label=\"Code Snippet Text\"><pre><code>[GC [DefNew: 4992K-&gt;576K(5568K), 0.0116036 secs] 4992K-&gt;4829K(19904K),\n 0.0116439 secs] [Times: user=0.02 sys=0.00, real=0.02 secs]\n[GC [DefNew: 5568K-&gt;576K(5568K), 0.0130929 secs] 9821K-&gt;9653K(19904K),\n0.0131336 secs] [Times: user=0.02 sys=0.00, real=0.02 secs]\n[GC [DefNew: 5568K-&gt;575K(5568K), 0.0154148 secs] 14645K-&gt;14500K(19904K),\n0.0154531 secs] [Times: user=0.00 sys=0.01, real=0.01 secs]\n[GC [DefNew: 5567K-&gt;5567K(5568K), 0.0000197 secs][Tenured: 13924K-&gt;14335K(14336K),\n0.0330724 secs] 19492K-&gt;19265K(19904K), [Perm : 376K-&gt;376K(12288K)],\n0.0331624 secs] [Times: user=0.03 sys=0.00, real=0.03 secs]\n[Full GC [Tenured: 14335K-&gt;14335K(14336K), 0.0292459 secs] 19903K-&gt;19902K(19904K),\n[Perm : 376K-&gt;376K(12288K)], 0.0293000 secs] [Times: user=0.03 sys=0.00, real=0.03 secs]\n[Full GC [Tenured: 14335K-&gt;14335K(14336K), 0.0278675 secs] 19903K-&gt;19903K(19904K),\n[Perm : 376K-&gt;376K(12288K)], 0.0279215 secs] [Times: user=0.03 sys=0.00, real=0.03 secs]\n[Full GC [Tenured: 14335K-&gt;14335K(14336K), 0.0348408 secs] 19903K-&gt;19889K(19904K),\n[Perm : 376K-&gt;371K(12288K)], 0.0348945 secs] [Times: user=0.05 sys=0.00, real=0.05 secs]\n[Full GC [Tenured: 14335K-&gt;14335K(14336K), 0.0299813 secs] 19903K-&gt;19903K(19904K),\n[Perm : 371K-&gt;371K(12288K)], 0.0300349 secs] [Times: user=0.01 sys=0.00, real=0.02 secs]\n[Full GC [Tenured: 14335K-&gt;14335K(14336K), 0.0298178 secs] 19903K-&gt;19903K(19904K),\n[Perm : 371K-&gt;371K(12288K)], 0.0298688 secs] [Times: user=0.03 sys=0.00, real=0.03 secs]\nException in thread \"main\" java.lang.OutOfMemoryError: Java heap space[Full GC [Tenured:\n14335K-&gt;14335K(14336K), 0.0294953 secs] 19903K-&gt;19903K(19904K),\n[Perm : 371K-&gt;371K(12288K)], 0.0295474 secs] [Times: user=0.03 sys=0.00, real=0.03 secs]\n[Full GC [Tenured\n: 14335K-&gt;14335K(14336K), 0.0287742 secs] 19903K-&gt;19903K(19904K),\n[Perm : 371K-&gt;371K(12288K)], 0.0288239 secs] [Times: user=0.03 sys=0.00, real=0.03 secs]\n[Full GC [Tenuredat GCTimeTest.main(GCTimeTest.java:16)\n: 14335K-&gt;14335K(14336K), 0.0287102 secs] 19903K-&gt;19903K(19904K),\n[Perm : 371K-&gt;371K(12288K)], 0.0287627 secs] [Times: user=0.03 sys=0.00, real=0.03 secs]\nHeap\n def new generation total 5568K, used 5567K [0x35c10000, 0x36210000, 0x36210000)\n eden space 4992K, 100% used [0x35c10000, 0x360f0000, 0x360f0000)\n from space 576K, 99% used [0x36180000, 0x3620ffe8, 0x36210000)\n to space 576K, 0% used [0x360f0000, 0x360f0000, 0x36180000)\n tenured generation total 14336K, used 14335K [0x36210000, 0x37010000, 0x37010000)\n the space 14336K, 99% used [0x36210000, 0x3700ffd8, 0x37010000, 0x37010000)\n compacting perm gen total 12288K, used 371K [0x37010000, 0x37c10000, 0x3b010000)\n the space 12288K, 3% used [0x37010000, 0x3706ce28, 0x3706d000, 0x37c10000)\n ro space 10240K, 51% used [0x3b010000, 0x3b543000, 0x3b543000, 0x3ba10000)\n rw space 12288K, 55% used [0x3ba10000, 0x3c0ae4f8, 0x3c0ae600, 0x3c610000)\n</code></pre></div><button data-copy-btn=\"\" type=\"button\" class=\"bx--snippet-button\" aria-label=\"Copy code\" tabindex=\"0\"><svg class=\"bx--snippet__icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><path d=\"M1 10H0V2C0 .9.9 0 2 0h8v1H2c-.6 0-1 .5-1 1v8z\"></path><path d=\"M11 4.2V8h3.8L11 4.2zM15 9h-4c-.6 0-1-.4-1-1V4H4.5c-.3 0-.5.2-.5.5v10c0 .3.2.5.5.5h10c.3 0 .5-.2.5-.5V9zm-4-6c.1 0 .3.1.4.1l4.5 4.5c0 .1.1.3.1.4v6.5c0 .8-.7 1.5-1.5 1.5h-10c-.8 0-1.5-.7-1.5-1.5v-10C3 3.7 3.7 3 4.5 3H11z\"></path></svg><div class=\"bx--btn--copy__feedback\" data-feedback=\"已复制！\"></div></button><button class=\"bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand\" type=\"button\"><span class=\"bx--snippet-btn--text\" data-show-more-text=\"显示更多\" data-show-less-text=\"显示较少\">显示更多</span><svg class=\"bx--icon-chevron--down\" width=\"12\" height=\"7\" viewBox=\"0 0 12 7\" aria-label=\"Show more icon\"><title>Show more icon</title><path fill-rule=\"nonzero\" d=\"M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z\"></path></svg></button></div>\n<p xmlns=\"http://www.w3.org/1999/xhtml\">通过清单 2 和清单 3 对比，可以发现通过设置一个较大的年轻代预留新对象，设置合理的 Survivor 区并且提供 Survivor 区的使用率，可以将年轻对象保存在年轻代。一般来说，Survivor 区的空间不够，或者占用量达到 50%时，就会使对象进入年老代 (不管它的年龄有多大)。清单 4 创建了 3 个对象，分别分配一定的内存空间。</p>\n<h5 id=\"清单-4-不同大小内存分配\">清单 4. 不同大小内存分配</h5>\n<div class=\"bx--snippet bx--snippet--multi bx--snippet-btn--expand--hide\" data-code-snippet=\"\"><div class=\"bx--snippet-container\" aria-label=\"Code Snippet Text\"><pre><code>public class PutInEden2 {\n public static void main(String[] args){\n byte[] b1,b2,b3;\n b1=new byte[1024*512];//分配 0.5MB 堆空间\n b2=new byte[1024*1024*4];//分配 4MB 堆空间\n b3=new byte[1024*1024*4];\n b3=null; //使 b3 可以被回收\n b3=new byte[1024*1024*4];//分配 4MB 堆空间\n }\n}\n</code></pre></div><button data-copy-btn=\"\" type=\"button\" class=\"bx--snippet-button\" aria-label=\"Copy code\" tabindex=\"0\"><svg class=\"bx--snippet__icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><path d=\"M1 10H0V2C0 .9.9 0 2 0h8v1H2c-.6 0-1 .5-1 1v8z\"></path><path d=\"M11 4.2V8h3.8L11 4.2zM15 9h-4c-.6 0-1-.4-1-1V4H4.5c-.3 0-.5.2-.5.5v10c0 .3.2.5.5.5h10c.3 0 .5-.2.5-.5V9zm-4-6c.1 0 .3.1.4.1l4.5 4.5c0 .1.1.3.1.4v6.5c0 .8-.7 1.5-1.5 1.5h-10c-.8 0-1.5-.7-1.5-1.5v-10C3 3.7 3.7 3 4.5 3H11z\"></path></svg><div class=\"bx--btn--copy__feedback\" data-feedback=\"已复制！\"></div></button><button class=\"bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand\" type=\"button\"><span class=\"bx--snippet-btn--text\" data-show-more-text=\"显示更多\" data-show-less-text=\"显示较少\">显示更多</span><svg class=\"bx--icon-chevron--down\" width=\"12\" height=\"7\" viewBox=\"0 0 12 7\" aria-label=\"Show more icon\"><title>Show more icon</title><path fill-rule=\"nonzero\" d=\"M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z\"></path></svg></button></div>\n<p xmlns=\"http://www.w3.org/1999/xhtml\">使用参数-XX:+PrintGCDetails -Xmx1000M -Xms500M -Xmn100M -XX:SurvivorRatio=8 运行清单 4 所示代码，输出如清单 5 所示。</p>\n<h5 id=\"清单-5-清单-4-运行输出\">清单 5. 清单 4 运行输出</h5>\n<div class=\"bx--snippet bx--snippet--multi bx--snippet-btn--expand--hide\" data-code-snippet=\"\"><div class=\"bx--snippet-container\" aria-label=\"Code Snippet Text\"><pre><code>Heap\n def new generation total 92160K, used 11878K [0x0f010000, 0x15410000, 0x15410000)\n eden space 81920K, 2% used [0x0f010000, 0x0f1a9a20, 0x14010000)\n from space 10240K, 99% used [0x14a10000, 0x1540fff8, 0x15410000)\n to space 10240K, 0% used [0x14010000, 0x14010000, 0x14a10000)\n tenured generation total 409600K, used 86434K [0x15410000, 0x2e410000, 0x4d810000)\n the space 409600K, 21% used [0x15410000, 0x1a878b18, 0x1a878c00, 0x2e410000)\n compacting perm gen total 12288K, used 2062K [0x4d810000, 0x4e410000, 0x51810000)\n the space 12288K, 16% used [0x4d810000, 0x4da13b18, 0x4da13c00, 0x4e410000)\nNo shared spaces configured.\n</code></pre></div><button data-copy-btn=\"\" type=\"button\" class=\"bx--snippet-button\" aria-label=\"Copy code\" tabindex=\"0\"><svg class=\"bx--snippet__icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><path d=\"M1 10H0V2C0 .9.9 0 2 0h8v1H2c-.6 0-1 .5-1 1v8z\"></path><path d=\"M11 4.2V8h3.8L11 4.2zM15 9h-4c-.6 0-1-.4-1-1V4H4.5c-.3 0-.5.2-.5.5v10c0 .3.2.5.5.5h10c.3 0 .5-.2.5-.5V9zm-4-6c.1 0 .3.1.4.1l4.5 4.5c0 .1.1.3.1.4v6.5c0 .8-.7 1.5-1.5 1.5h-10c-.8 0-1.5-.7-1.5-1.5v-10C3 3.7 3.7 3 4.5 3H11z\"></path></svg><div class=\"bx--btn--copy__feedback\" data-feedback=\"已复制！\"></div></button><button class=\"bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand\" type=\"button\"><span class=\"bx--snippet-btn--text\" data-show-more-text=\"显示更多\" data-show-less-text=\"显示较少\">显示更多</span><svg class=\"bx--icon-chevron--down\" width=\"12\" height=\"7\" viewBox=\"0 0 12 7\" aria-label=\"Show more icon\"><title>Show more icon</title><path fill-rule=\"nonzero\" d=\"M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z\"></path></svg></button></div>\n<p xmlns=\"http://www.w3.org/1999/xhtml\">清单 5 输出的日志显示，年轻代分配了 8M，年老代也分配了 8M。我们可以尝试加上-XX:TargetSurvivorRatio=90 参数，这样可以提高 from 区的利用率，使 from 区使用到 90%时，再将对象送入年老代，运行清单 4 代码，输出如清单 6 所示。</p>\n<h5 id=\"清单-6-修改运行参数后清单-4-输出\">清单 6. 修改运行参数后清单 4 输出</h5>\n<div class=\"bx--snippet bx--snippet--multi bx--snippet-btn--expand--hide\" data-code-snippet=\"\"><div class=\"bx--snippet-container\" aria-label=\"Code Snippet Text\"><pre><code>Heap\n def new generation total 9216K, used 9215K [0x35c10000, 0x36610000, 0x36610000)\n eden space 8192K, 100% used [0x35c10000, 0x36410000, 0x36410000)\n from space 1024K, 99% used [0x36510000, 0x3660fc50, 0x36610000)\n to space 1024K, 0% used [0x36410000, 0x36410000, 0x36510000)\n tenured generation total 10240K, used 10239K [0x36610000, 0x37010000, 0x37010000)\n the space 10240K, 99% used [0x36610000, 0x3700ff70, 0x37010000, 0x37010000)\n compacting perm gen total 12288K, used 371K [0x37010000, 0x37c10000, 0x3b010000)\n the space 12288K, 3% used [0x37010000, 0x3706cd90, 0x3706ce00, 0x37c10000)\n ro space 10240K, 51% used [0x3b010000, 0x3b543000, 0x3b543000, 0x3ba10000)\n rw space 12288K, 55% used [0x3ba10000, 0x3c0ae4f8, 0x3c0ae600, 0x3c610000)\n</code></pre></div><button data-copy-btn=\"\" type=\"button\" class=\"bx--snippet-button\" aria-label=\"Copy code\" tabindex=\"0\"><svg class=\"bx--snippet__icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><path d=\"M1 10H0V2C0 .9.9 0 2 0h8v1H2c-.6 0-1 .5-1 1v8z\"></path><path d=\"M11 4.2V8h3.8L11 4.2zM15 9h-4c-.6 0-1-.4-1-1V4H4.5c-.3 0-.5.2-.5.5v10c0 .3.2.5.5.5h10c.3 0 .5-.2.5-.5V9zm-4-6c.1 0 .3.1.4.1l4.5 4.5c0 .1.1.3.1.4v6.5c0 .8-.7 1.5-1.5 1.5h-10c-.8 0-1.5-.7-1.5-1.5v-10C3 3.7 3.7 3 4.5 3H11z\"></path></svg><div class=\"bx--btn--copy__feedback\" data-feedback=\"已复制！\"></div></button><button class=\"bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand\" type=\"button\"><span class=\"bx--snippet-btn--text\" data-show-more-text=\"显示更多\" data-show-less-text=\"显示较少\">显示更多</span><svg class=\"bx--icon-chevron--down\" width=\"12\" height=\"7\" viewBox=\"0 0 12 7\" aria-label=\"Show more icon\"><title>Show more icon</title><path fill-rule=\"nonzero\" d=\"M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z\"></path></svg></button></div>\n<p xmlns=\"http://www.w3.org/1999/xhtml\">如果将 SurvivorRatio 设置为 2，将 b1 对象预存在年轻代。输出如清单 7 所示。</p>\n<h5 id=\"清单-7-再次修改运行参数后清单-4-输出\">清单 7. 再次修改运行参数后清单 4 输出</h5>\n<div class=\"bx--snippet bx--snippet--multi bx--snippet-btn--expand--hide\" data-code-snippet=\"\"><div class=\"bx--snippet-container\" aria-label=\"Code Snippet Text\"><pre><code>Heap\n def new generation total 7680K, used 7679K [0x35c10000, 0x36610000, 0x36610000)\n eden space 5120K, 100% used [0x35c10000, 0x36110000, 0x36110000)\n from space 2560K, 99% used [0x36110000, 0x3638fff0, 0x36390000)\n to space 2560K, 0% used [0x36390000, 0x36390000, 0x36610000)\n tenured generation total 10240K, used 10239K [0x36610000, 0x37010000, 0x37010000)\n the space 10240K, 99% used [0x36610000, 0x3700fff0, 0x37010000, 0x37010000)\n compacting perm gen total 12288K, used 371K [0x37010000, 0x37c10000, 0x3b010000)\n the space 12288K, 3% used [0x37010000, 0x3706ce28, 0x3706d000, 0x37c10000)\n ro space 10240K, 51% used [0x3b010000, 0x3b543000, 0x3b543000, 0x3ba10000)\nrw space 12288K, 55% used [0x3ba10000, 0x3c0ae4f8, 0x3c0ae600, 0x3c610000)\n</code></pre></div><button data-copy-btn=\"\" type=\"button\" class=\"bx--snippet-button\" aria-label=\"Copy code\" tabindex=\"0\"><svg class=\"bx--snippet__icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><path d=\"M1 10H0V2C0 .9.9 0 2 0h8v1H2c-.6 0-1 .5-1 1v8z\"></path><path d=\"M11 4.2V8h3.8L11 4.2zM15 9h-4c-.6 0-1-.4-1-1V4H4.5c-.3 0-.5.2-.5.5v10c0 .3.2.5.5.5h10c.3 0 .5-.2.5-.5V9zm-4-6c.1 0 .3.1.4.1l4.5 4.5c0 .1.1.3.1.4v6.5c0 .8-.7 1.5-1.5 1.5h-10c-.8 0-1.5-.7-1.5-1.5v-10C3 3.7 3.7 3 4.5 3H11z\"></path></svg><div class=\"bx--btn--copy__feedback\" data-feedback=\"已复制！\"></div></button><button class=\"bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand\" type=\"button\"><span class=\"bx--snippet-btn--text\" data-show-more-text=\"显示更多\" data-show-less-text=\"显示较少\">显示更多</span><svg class=\"bx--icon-chevron--down\" width=\"12\" height=\"7\" viewBox=\"0 0 12 7\" aria-label=\"Show more icon\"><title>Show more icon</title><path fill-rule=\"nonzero\" d=\"M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z\"></path></svg></button></div>\n<h2 id=\"如何让大对象进入年老代\" xmlns=\"http://www.w3.org/1999/xhtml\">如何让大对象进入年老代</h2>\n<p>我们在大部分情况下都会选择将对象分配在年轻代。但是，对于占用内存较多的大对象而言，它的选择可能就不是这样的。因为大对象出现在年轻代很可能扰乱年轻代 GC，并破坏年轻代原有的对象结构。因为尝试在年轻代分配大对象，很可能导致空间不足，为了有足够的空间容纳大对象，JVM 不得不将年轻代中的年轻对象挪到年老代。因为大对象占用空间多，所以可能需要移动大量小的年轻对象进入年老代，这对 GC 相当不利。基于以上原因，可以将大对象直接分配到年老代，保持年轻代对象结构的完整性，这样可以提高 GC 的效率。如果一个大对象同时又是一个短命的对象，假设这种情况出现很频繁，那对于 GC 来说会是一场灾难。原本应该用于存放永久对象的年老代，被短命的对象塞满，这也意味着对堆空间进行了洗牌，扰乱了分代内存回收的基本思路。因此，在软件开发过程中，应该尽可能避免使用短命的大对象。可以使用参数-XX:PetenureSizeThreshold 设置大对象直接进入年老代的阈值。当对象的大小超过这个值时，将直接在年老代分配。参数-XX:PetenureSizeThreshold 只对串行收集器和年轻代并行收集器有效，并行回收收集器不识别这个参数。</p>\n<h5 id=\"清单-8-创建一个大对象\">清单 8. 创建一个大对象</h5>\n<div class=\"bx--snippet bx--snippet--multi bx--snippet-btn--expand--hide\" data-code-snippet=\"\"><div class=\"bx--snippet-container\" aria-label=\"Code Snippet Text\"><pre><code>public class BigObj2Old {\n public static void main(String[] args){\n byte[] b;\n b = new byte[1024*1024];//分配一个 1MB 的对象\n }\n}\n</code></pre></div><button data-copy-btn=\"\" type=\"button\" class=\"bx--snippet-button\" aria-label=\"Copy code\" tabindex=\"0\"><svg class=\"bx--snippet__icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><path d=\"M1 10H0V2C0 .9.9 0 2 0h8v1H2c-.6 0-1 .5-1 1v8z\"></path><path d=\"M11 4.2V8h3.8L11 4.2zM15 9h-4c-.6 0-1-.4-1-1V4H4.5c-.3 0-.5.2-.5.5v10c0 .3.2.5.5.5h10c.3 0 .5-.2.5-.5V9zm-4-6c.1 0 .3.1.4.1l4.5 4.5c0 .1.1.3.1.4v6.5c0 .8-.7 1.5-1.5 1.5h-10c-.8 0-1.5-.7-1.5-1.5v-10C3 3.7 3.7 3 4.5 3H11z\"></path></svg><div class=\"bx--btn--copy__feedback\" data-feedback=\"已复制！\"></div></button><button class=\"bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand\" type=\"button\"><span class=\"bx--snippet-btn--text\" data-show-more-text=\"显示更多\" data-show-less-text=\"显示较少\">显示更多</span><svg class=\"bx--icon-chevron--down\" width=\"12\" height=\"7\" viewBox=\"0 0 12 7\" aria-label=\"Show more icon\"><title>Show more icon</title><path fill-rule=\"nonzero\" d=\"M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z\"></path></svg></button></div>\n<p xmlns=\"http://www.w3.org/1999/xhtml\">使用 JVM 参数-XX:+PrintGCDetails –Xmx20M –Xms20MB 运行，可以得到清单 9 所示日志输出。</p>\n<h5 id=\"清单-9-清单-8-运行输出\">清单 9. 清单 8 运行输出</h5>\n<div class=\"bx--snippet bx--snippet--multi bx--snippet-btn--expand--hide\" data-code-snippet=\"\"><div class=\"bx--snippet-container\" aria-label=\"Code Snippet Text\"><pre><code>Heap\n def new generation total 6144K, used 1378K [0x35c10000, 0x362b0000, 0x362b0000)\n eden space 5504K, 25% used [0x35c10000, 0x35d689e8, 0x36170000)\n from space 640K, 0% used [0x36170000, 0x36170000, 0x36210000)\n to space 640K, 0% used [0x36210000, 0x36210000, 0x362b0000)\n tenured generation total 13696K, used 0K [0x362b0000, 0x37010000, 0x37010000)\n the space 13696K, 0% used [0x362b0000, 0x362b0000, 0x362b0200, 0x37010000)\n compacting perm gen total 12288K, used 374K [0x37010000, 0x37c10000, 0x3b010000)\n the space 12288K, 3% used [0x37010000, 0x3706dac8, 0x3706dc00, 0x37c10000)\n ro space 10240K, 51% used [0x3b010000, 0x3b543000, 0x3b543000, 0x3ba10000)\n rw space 12288K, 55% used [0x3ba10000, 0x3c0ae4f8, 0x3c0ae600, 0x3c610000)\n</code></pre></div><button data-copy-btn=\"\" type=\"button\" class=\"bx--snippet-button\" aria-label=\"Copy code\" tabindex=\"0\"><svg class=\"bx--snippet__icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><path d=\"M1 10H0V2C0 .9.9 0 2 0h8v1H2c-.6 0-1 .5-1 1v8z\"></path><path d=\"M11 4.2V8h3.8L11 4.2zM15 9h-4c-.6 0-1-.4-1-1V4H4.5c-.3 0-.5.2-.5.5v10c0 .3.2.5.5.5h10c.3 0 .5-.2.5-.5V9zm-4-6c.1 0 .3.1.4.1l4.5 4.5c0 .1.1.3.1.4v6.5c0 .8-.7 1.5-1.5 1.5h-10c-.8 0-1.5-.7-1.5-1.5v-10C3 3.7 3.7 3 4.5 3H11z\"></path></svg><div class=\"bx--btn--copy__feedback\" data-feedback=\"已复制！\"></div></button><button class=\"bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand\" type=\"button\"><span class=\"bx--snippet-btn--text\" data-show-more-text=\"显示更多\" data-show-less-text=\"显示较少\">显示更多</span><svg class=\"bx--icon-chevron--down\" width=\"12\" height=\"7\" viewBox=\"0 0 12 7\" aria-label=\"Show more icon\"><title>Show more icon</title><path fill-rule=\"nonzero\" d=\"M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z\"></path></svg></button></div>\n<p xmlns=\"http://www.w3.org/1999/xhtml\">可以看到该对象被分配在了年轻代，占用了 25%的空间。如果需要将 1MB 以上的对象直接在年老代分配，设置-XX:PetenureSizeThreshold=1000000，程序运行后输出如清单 10 所示。</p>\n<h5 id=\"清单-10-修改运行参数后清单-8-输出\">清单 10. 修改运行参数后清单 8 输出</h5>\n<div class=\"bx--snippet bx--snippet--multi bx--snippet-btn--expand--hide\" data-code-snippet=\"\"><div class=\"bx--snippet-container\" aria-label=\"Code Snippet Text\"><pre><code>Heap\n def new generation total 6144K, used 354K [0x35c10000, 0x362b0000, 0x362b0000)\n eden space 5504K, 6% used [0x35c10000, 0x35c689d8, 0x36170000)\n from space 640K, 0% used [0x36170000, 0x36170000, 0x36210000)\n to space 640K, 0% used [0x36210000, 0x36210000, 0x362b0000)\n tenured generation total 13696K, used 1024K [0x362b0000, 0x37010000, 0x37010000)\n the space 13696K, 7% used [0x362b0000, 0x363b0010, 0x363b0200, 0x37010000)\n compacting perm gen total 12288K, used 374K [0x37010000, 0x37c10000, 0x3b010000)\n the space 12288K, 3% used [0x37010000, 0x3706dac8, 0x3706dc00, 0x37c10000)\n ro space 10240K, 51% used [0x3b010000, 0x3b543000, 0x3b543000, 0x3ba10000)\n rw space 12288K, 55% used [0x3ba10000, 0x3c0ae4f8, 0x3c0ae600, 0x3c610000)\n</code></pre></div><button data-copy-btn=\"\" type=\"button\" class=\"bx--snippet-button\" aria-label=\"Copy code\" tabindex=\"0\"><svg class=\"bx--snippet__icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><path d=\"M1 10H0V2C0 .9.9 0 2 0h8v1H2c-.6 0-1 .5-1 1v8z\"></path><path d=\"M11 4.2V8h3.8L11 4.2zM15 9h-4c-.6 0-1-.4-1-1V4H4.5c-.3 0-.5.2-.5.5v10c0 .3.2.5.5.5h10c.3 0 .5-.2.5-.5V9zm-4-6c.1 0 .3.1.4.1l4.5 4.5c0 .1.1.3.1.4v6.5c0 .8-.7 1.5-1.5 1.5h-10c-.8 0-1.5-.7-1.5-1.5v-10C3 3.7 3.7 3 4.5 3H11z\"></path></svg><div class=\"bx--btn--copy__feedback\" data-feedback=\"已复制！\"></div></button><button class=\"bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand\" type=\"button\"><span class=\"bx--snippet-btn--text\" data-show-more-text=\"显示更多\" data-show-less-text=\"显示较少\">显示更多</span><svg class=\"bx--icon-chevron--down\" width=\"12\" height=\"7\" viewBox=\"0 0 12 7\" aria-label=\"Show more icon\"><title>Show more icon</title><path fill-rule=\"nonzero\" d=\"M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z\"></path></svg></button></div>\n<p xmlns=\"http://www.w3.org/1999/xhtml\">清单 10 里面可以看到当满 1MB 时进入到了年老代。</p>\n<h2 id=\"如何设置对象进入年老代的年龄\">如何设置对象进入年老代的年龄</h2>\n<p>堆中的每一个对象都有自己的年龄。一般情况下，年轻对象存放在年轻代，年老对象存放在年老代。为了做到这点，虚拟机为每个对象都维护一个年龄。如果对象在 Eden 区，经过一次 GC 后依然存活，则被移动到 Survivor 区中，对象年龄加 1。以后，如果对象每经过一次 GC 依然存活，则年龄再加 1。当对象年龄达到阈值时，就移入年老代，成为老年对象。这个阈值的最大值可以通过参数-XX:MaxTenuringThreshold 来设置，默认值是 15。虽然-XX:MaxTenuringThreshold 的值可能是 15 或者更大，但这不意味着新对象非要达到这个年龄才能进入年老代。事实上，对象实际进入年老代的年龄是虚拟机在运行时根据内存使用情况动态计算的，这个参数指定的是阈值年龄的最大值。即，实际晋升年老代年龄等于动态计算所得的年龄与-XX:MaxTenuringThreshold 中较小的那个。清单 11 所示代码为 3 个对象申请了若干内存。</p>\n<h5 id=\"清单-11-申请内存\">清单 11. 申请内存</h5>\n<div class=\"bx--snippet bx--snippet--multi bx--snippet-btn--expand--hide\" data-code-snippet=\"\"><div class=\"bx--snippet-container\" aria-label=\"Code Snippet Text\"><pre><code>public class MaxTenuringThreshold {\n public static void main(String args[]){\n byte[] b1,b2,b3;\n b1 = new byte[1024*512];\n b2 = new byte[1024*1024*2];\n b3 = new byte[1024*1024*4];\n b3 = null;\n b3 = new byte[1024*1024*4];\n }\n}\n</code></pre></div><button data-copy-btn=\"\" type=\"button\" class=\"bx--snippet-button\" aria-label=\"Copy code\" tabindex=\"0\"><svg class=\"bx--snippet__icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><path d=\"M1 10H0V2C0 .9.9 0 2 0h8v1H2c-.6 0-1 .5-1 1v8z\"></path><path d=\"M11 4.2V8h3.8L11 4.2zM15 9h-4c-.6 0-1-.4-1-1V4H4.5c-.3 0-.5.2-.5.5v10c0 .3.2.5.5.5h10c.3 0 .5-.2.5-.5V9zm-4-6c.1 0 .3.1.4.1l4.5 4.5c0 .1.1.3.1.4v6.5c0 .8-.7 1.5-1.5 1.5h-10c-.8 0-1.5-.7-1.5-1.5v-10C3 3.7 3.7 3 4.5 3H11z\"></path></svg><div class=\"bx--btn--copy__feedback\" data-feedback=\"已复制！\"></div></button><button class=\"bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand\" type=\"button\"><span class=\"bx--snippet-btn--text\" data-show-more-text=\"显示更多\" data-show-less-text=\"显示较少\">显示更多</span><svg class=\"bx--icon-chevron--down\" width=\"12\" height=\"7\" viewBox=\"0 0 12 7\" aria-label=\"Show more icon\"><title>Show more icon</title><path fill-rule=\"nonzero\" d=\"M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z\"></path></svg></button></div>\n<p xmlns=\"http://www.w3.org/1999/xhtml\">参数设置为：-XX:+PrintGCDetails -Xmx20M -Xms20M -Xmn10M -XX:SurvivorRatio=2</p>\n<p>运行清单 11 所示代码，输出如清单 12 所示。</p>\n<h5 id=\"清单-12-清单-11-运行输出\">清单 12. 清单 11 运行输出</h5>\n<div class=\"bx--snippet bx--snippet--multi bx--snippet-btn--expand--hide\" data-code-snippet=\"\"><div class=\"bx--snippet-container\" aria-label=\"Code Snippet Text\"><pre><code>[GC [DefNew: 2986K-&gt;690K(7680K), 0.0246816 secs] 2986K-&gt;2738K(17920K),\n 0.0247226 secs] [Times: user=0.00 sys=0.02, real=0.03 secs]\n[GC [DefNew: 4786K-&gt;690K(7680K), 0.0016073 secs] 6834K-&gt;2738K(17920K),\n0.0016436 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]\nHeap\n def new generation total 7680K, used 4888K [0x35c10000, 0x36610000, 0x36610000)\n eden space 5120K, 82% used [0x35c10000, 0x36029a18, 0x36110000)\n from space 2560K, 26% used [0x36110000, 0x361bc950, 0x36390000)\n to space 2560K, 0% used [0x36390000, 0x36390000, 0x36610000)\n tenured generation total 10240K, used 2048K [0x36610000, 0x37010000, 0x37010000)\n the space 10240K, 20% used [0x36610000, 0x36810010, 0x36810200, 0x37010000)\n compacting perm gen total 12288K, used 374K [0x37010000, 0x37c10000, 0x3b010000)\n the space 12288K, 3% used [0x37010000, 0x3706db50, 0x3706dc00, 0x37c10000)\n ro space 10240K, 51% used [0x3b010000, 0x3b543000, 0x3b543000, 0x3ba10000)\n rw space 12288K, 55% used [0x3ba10000, 0x3c0ae4f8, 0x3c0ae600, 0x3c610000)\n</code></pre></div><button data-copy-btn=\"\" type=\"button\" class=\"bx--snippet-button\" aria-label=\"Copy code\" tabindex=\"0\"><svg class=\"bx--snippet__icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><path d=\"M1 10H0V2C0 .9.9 0 2 0h8v1H2c-.6 0-1 .5-1 1v8z\"></path><path d=\"M11 4.2V8h3.8L11 4.2zM15 9h-4c-.6 0-1-.4-1-1V4H4.5c-.3 0-.5.2-.5.5v10c0 .3.2.5.5.5h10c.3 0 .5-.2.5-.5V9zm-4-6c.1 0 .3.1.4.1l4.5 4.5c0 .1.1.3.1.4v6.5c0 .8-.7 1.5-1.5 1.5h-10c-.8 0-1.5-.7-1.5-1.5v-10C3 3.7 3.7 3 4.5 3H11z\"></path></svg><div class=\"bx--btn--copy__feedback\" data-feedback=\"已复制！\"></div></button><button class=\"bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand\" type=\"button\"><span class=\"bx--snippet-btn--text\" data-show-more-text=\"显示更多\" data-show-less-text=\"显示较少\">显示更多</span><svg class=\"bx--icon-chevron--down\" width=\"12\" height=\"7\" viewBox=\"0 0 12 7\" aria-label=\"Show more icon\"><title>Show more icon</title><path fill-rule=\"nonzero\" d=\"M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z\"></path></svg></button></div>\n<p xmlns=\"http://www.w3.org/1999/xhtml\">更改参数为-XX:+PrintGCDetails -Xmx20M -Xms20M -Xmn10M -XX:SurvivorRatio=2 -XX:MaxTenuringThreshold=1，运行清单 11 所示代码，输出如清单 13 所示。</p>\n<h5 id=\"清单-13-修改运行参数后清单-11-输出\">清单 13. 修改运行参数后清单 11 输出</h5>\n<div class=\"bx--snippet bx--snippet--multi bx--snippet-btn--expand--hide\" data-code-snippet=\"\"><div class=\"bx--snippet-container\" aria-label=\"Code Snippet Text\"><pre><code>[GC [DefNew: 2986K-&gt;690K(7680K), 0.0047778 secs] 2986K-&gt;2738K(17920K),\n 0.0048161 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]\n[GC [DefNew: 4888K-&gt;0K(7680K), 0.0016271 secs] 6936K-&gt;2738K(17920K),\n0.0016630 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]\nHeap\n def new generation total 7680K, used 4198K [0x35c10000, 0x36610000, 0x36610000)\n eden space 5120K, 82% used [0x35c10000, 0x36029a18, 0x36110000)\n from space 2560K, 0% used [0x36110000, 0x36110088, 0x36390000)\n to space 2560K, 0% used [0x36390000, 0x36390000, 0x36610000)\n tenured generation total 10240K, used 2738K [0x36610000, 0x37010000, 0x37010000)\n the space 10240K, 26% used [0x36610000, 0x368bc890, 0x368bca00, 0x37010000)\n compacting perm gen total 12288K, used 374K [0x37010000, 0x37c10000, 0x3b010000)\n the space 12288K, 3% used [0x37010000, 0x3706db50, 0x3706dc00, 0x37c10000)\n ro space 10240K, 51% used [0x3b010000, 0x3b543000, 0x3b543000, 0x3ba10000)\n rw space 12288K, 55% used [0x3ba10000, 0x3c0ae4f8, 0x3c0ae600, 0x3c610000)\n</code></pre></div><button data-copy-btn=\"\" type=\"button\" class=\"bx--snippet-button\" aria-label=\"Copy code\" tabindex=\"0\"><svg class=\"bx--snippet__icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><path d=\"M1 10H0V2C0 .9.9 0 2 0h8v1H2c-.6 0-1 .5-1 1v8z\"></path><path d=\"M11 4.2V8h3.8L11 4.2zM15 9h-4c-.6 0-1-.4-1-1V4H4.5c-.3 0-.5.2-.5.5v10c0 .3.2.5.5.5h10c.3 0 .5-.2.5-.5V9zm-4-6c.1 0 .3.1.4.1l4.5 4.5c0 .1.1.3.1.4v6.5c0 .8-.7 1.5-1.5 1.5h-10c-.8 0-1.5-.7-1.5-1.5v-10C3 3.7 3.7 3 4.5 3H11z\"></path></svg><div class=\"bx--btn--copy__feedback\" data-feedback=\"已复制！\"></div></button><button class=\"bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand\" type=\"button\"><span class=\"bx--snippet-btn--text\" data-show-more-text=\"显示更多\" data-show-less-text=\"显示较少\">显示更多</span><svg class=\"bx--icon-chevron--down\" width=\"12\" height=\"7\" viewBox=\"0 0 12 7\" aria-label=\"Show more icon\"><title>Show more icon</title><path fill-rule=\"nonzero\" d=\"M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z\"></path></svg></button></div>\n<p xmlns=\"http://www.w3.org/1999/xhtml\">清单 13 所示，第一次运行时 b1 对象在程序结束后依然保存在年轻代。第二次运行前，我们减小了对象晋升年老代的年龄，设置为 1。即，所有经过一次 GC 的对象都可以直接进入年老代。程序运行后，可以发现 b1 对象已经被分配到年老代。如果希望对象尽可能长时间地停留在年轻代，可以设置一个较大的阈值。</p>\n<h2 id=\"稳定的-java-堆-vs-动荡的-java-堆\">稳定的 Java 堆 VS 动荡的 Java 堆</h2>\n<p>一般来说，稳定的堆大小对垃圾回收是有利的。获得一个稳定的堆大小的方法是使-Xms 和-Xmx 的大小一致，即最大堆和最小堆 (初始堆) 一样。如果这样设置，系统在运行时堆大小理论上是恒定的，稳定的堆空间可以减少 GC 的次数。因此，很多服务端应用都会将最大堆和最小堆设置为相同的数值。但是，一个不稳定的堆并非毫无用处。稳定的堆大小虽然可以减少 GC 次数，但同时也增加了每次 GC 的时间。让堆大小在一个区间中震荡，在系统不需要使用大内存时，压缩堆空间，使 GC 应对一个较小的堆，可以加快单次 GC 的速度。基于这样的考虑，JVM 还提供了两个参数用于压缩和扩展堆空间。</p>\n<p>-XX:MinHeapFreeRatio 参数用来设置堆空间最小空闲比例，默认值是 40。当堆空间的空闲内存小于这个数值时，JVM 便会扩展堆空间。</p>\n<p>-XX:MaxHeapFreeRatio 参数用来设置堆空间最大空闲比例，默认值是 70。当堆空间的空闲内存大于这个数值时，便会压缩堆空间，得到一个较小的堆。</p>\n<p>当-Xmx 和-Xms 相等时，-XX:MinHeapFreeRatio 和-XX:MaxHeapFreeRatio 两个参数无效。</p>\n<h5 id=\"清单-14-堆大小设置\">清单 14. 堆大小设置</h5>\n<div class=\"bx--snippet bx--snippet--multi bx--snippet-btn--expand--hide\" data-code-snippet=\"\"><div class=\"bx--snippet-container\" aria-label=\"Code Snippet Text\"><pre><code>import java.util.Vector;\n\npublic class HeapSize {\n public static void main(String args[]) throws InterruptedException{\n Vector v = new Vector();\n while(true){\n byte[] b = new byte[1024*1024];\n v.add(b);\n if(v.size() == 10){\n v = new Vector();\n }\n Thread.sleep(1);\n }\n }\n}\n</code></pre></div><button data-copy-btn=\"\" type=\"button\" class=\"bx--snippet-button\" aria-label=\"Copy code\" tabindex=\"0\"><svg class=\"bx--snippet__icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><path d=\"M1 10H0V2C0 .9.9 0 2 0h8v1H2c-.6 0-1 .5-1 1v8z\"></path><path d=\"M11 4.2V8h3.8L11 4.2zM15 9h-4c-.6 0-1-.4-1-1V4H4.5c-.3 0-.5.2-.5.5v10c0 .3.2.5.5.5h10c.3 0 .5-.2.5-.5V9zm-4-6c.1 0 .3.1.4.1l4.5 4.5c0 .1.1.3.1.4v6.5c0 .8-.7 1.5-1.5 1.5h-10c-.8 0-1.5-.7-1.5-1.5v-10C3 3.7 3.7 3 4.5 3H11z\"></path></svg><div class=\"bx--btn--copy__feedback\" data-feedback=\"已复制！\"></div></button><button class=\"bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand\" type=\"button\"><span class=\"bx--snippet-btn--text\" data-show-more-text=\"显示更多\" data-show-less-text=\"显示较少\">显示更多</span><svg class=\"bx--icon-chevron--down\" width=\"12\" height=\"7\" viewBox=\"0 0 12 7\" aria-label=\"Show more icon\"><title>Show more icon</title><path fill-rule=\"nonzero\" d=\"M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z\"></path></svg></button></div>\n<p xmlns=\"http://www.w3.org/1999/xhtml\">清单 14 所示代码是测试-XX:MinHeapFreeRatio 和-XX:MaxHeapFreeRatio 的作用，设置运行参数为-XX:+PrintGCDetails -Xms10M -Xmx40M -XX:MinHeapFreeRatio=40 -XX:MaxHeapFreeRatio=50 时，输出如清单 15 所示。</p>\n<h5 id=\"清单-15-修改运行参数后清单-14-输出\">清单 15. 修改运行参数后清单 14 输出</h5>\n<div class=\"bx--snippet bx--snippet--multi bx--snippet-btn--expand--hide\" data-code-snippet=\"\"><div class=\"bx--snippet-container\" aria-label=\"Code Snippet Text\"><pre><code>[GC [DefNew: 2418K-&gt;178K(3072K), 0.0034827 secs] 2418K-&gt;2226K(9920K),\n 0.0035249 secs] [Times: user=0.00 sys=0.00, real=0.03 secs]\n[GC [DefNew: 2312K-&gt;0K(3072K), 0.0028263 secs] 4360K-&gt;4274K(9920K),\n0.0029905 secs] [Times: user=0.00 sys=0.00, real=0.03 secs]\n[GC [DefNew: 2068K-&gt;0K(3072K), 0.0024363 secs] 6342K-&gt;6322K(9920K),\n0.0024836 secs] [Times: user=0.00 sys=0.00, real=0.03 secs]\n[GC [DefNew: 2061K-&gt;0K(3072K), 0.0017376 secs][Tenured: 8370K-&gt;8370K(8904K),\n0.1392692 secs] 8384K-&gt;8370K(11976K), [Perm : 374K-&gt;374K(12288K)],\n0.1411363 secs] [Times: user=0.00 sys=0.02, real=0.16 secs]\n[GC [DefNew: 5138K-&gt;0K(6336K), 0.0038237 secs] 13508K-&gt;13490K(20288K),\n0.0038632 secs] [Times: user=0.00 sys=0.00, real=0.03 secs]\n</code></pre></div><button data-copy-btn=\"\" type=\"button\" class=\"bx--snippet-button\" aria-label=\"Copy code\" tabindex=\"0\"><svg class=\"bx--snippet__icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><path d=\"M1 10H0V2C0 .9.9 0 2 0h8v1H2c-.6 0-1 .5-1 1v8z\"></path><path d=\"M11 4.2V8h3.8L11 4.2zM15 9h-4c-.6 0-1-.4-1-1V4H4.5c-.3 0-.5.2-.5.5v10c0 .3.2.5.5.5h10c.3 0 .5-.2.5-.5V9zm-4-6c.1 0 .3.1.4.1l4.5 4.5c0 .1.1.3.1.4v6.5c0 .8-.7 1.5-1.5 1.5h-10c-.8 0-1.5-.7-1.5-1.5v-10C3 3.7 3.7 3 4.5 3H11z\"></path></svg><div class=\"bx--btn--copy__feedback\" data-feedback=\"已复制！\"></div></button><button class=\"bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand\" type=\"button\"><span class=\"bx--snippet-btn--text\" data-show-more-text=\"显示更多\" data-show-less-text=\"显示较少\">显示更多</span><svg class=\"bx--icon-chevron--down\" width=\"12\" height=\"7\" viewBox=\"0 0 12 7\" aria-label=\"Show more icon\"><title>Show more icon</title><path fill-rule=\"nonzero\" d=\"M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z\"></path></svg></button></div>\n<p xmlns=\"http://www.w3.org/1999/xhtml\">改用参数：-XX:+PrintGCDetails -Xms40M -Xmx40M -XX:MinHeapFreeRatio=40 -XX:MaxHeapFreeRatio=50，运行输出如清单 16 所示。</p>\n<h5 id=\"清单-16-再次修改运行参数后清单-14-输出\">清单 16. 再次修改运行参数后清单 14 输出</h5>\n<div class=\"bx--snippet bx--snippet--multi bx--snippet-btn--expand--hide\" data-code-snippet=\"\"><div class=\"bx--snippet-container\" aria-label=\"Code Snippet Text\"><pre><code>[GC [DefNew: 10678K-&gt;178K(12288K), 0.0019448 secs] 10678K-&gt;178K(39616K),\n 0.0019851 secs] [Times: user=0.00 sys=0.00, real=0.03 secs]\n[GC [DefNew: 10751K-&gt;178K(12288K), 0.0010295 secs] 10751K-&gt;178K(39616K),\n0.0010697 secs] [Times: user=0.00 sys=0.00, real=0.02 secs]\n[GC [DefNew: 10493K-&gt;178K(12288K), 0.0008301 secs] 10493K-&gt;178K(39616K),\n0.0008672 secs] [Times: user=0.00 sys=0.00, real=0.02 secs]\n[GC [DefNew: 10467K-&gt;178K(12288K), 0.0008522 secs] 10467K-&gt;178K(39616K),\n0.0008905 secs] [Times: user=0.00 sys=0.00, real=0.02 secs]\n[GC [DefNew: 10450K-&gt;178K(12288K), 0.0008964 secs] 10450K-&gt;178K(39616K),\n0.0009339 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]\n[GC [DefNew: 10439K-&gt;178K(12288K), 0.0009876 secs] 10439K-&gt;178K(39616K),\n0.0010279 secs] [Times: user=0.00 sys=0.00, real=0.02 secs]\n</code></pre></div><button data-copy-btn=\"\" type=\"button\" class=\"bx--snippet-button\" aria-label=\"Copy code\" tabindex=\"0\"><svg class=\"bx--snippet__icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><path d=\"M1 10H0V2C0 .9.9 0 2 0h8v1H2c-.6 0-1 .5-1 1v8z\"></path><path d=\"M11 4.2V8h3.8L11 4.2zM15 9h-4c-.6 0-1-.4-1-1V4H4.5c-.3 0-.5.2-.5.5v10c0 .3.2.5.5.5h10c.3 0 .5-.2.5-.5V9zm-4-6c.1 0 .3.1.4.1l4.5 4.5c0 .1.1.3.1.4v6.5c0 .8-.7 1.5-1.5 1.5h-10c-.8 0-1.5-.7-1.5-1.5v-10C3 3.7 3.7 3 4.5 3H11z\"></path></svg><div class=\"bx--btn--copy__feedback\" data-feedback=\"已复制！\"></div></button><button class=\"bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand\" type=\"button\"><span class=\"bx--snippet-btn--text\" data-show-more-text=\"显示更多\" data-show-less-text=\"显示较少\">显示更多</span><svg class=\"bx--icon-chevron--down\" width=\"12\" height=\"7\" viewBox=\"0 0 12 7\" aria-label=\"Show more icon\"><title>Show more icon</title><path fill-rule=\"nonzero\" d=\"M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z\"></path></svg></button></div>\n<p xmlns=\"http://www.w3.org/1999/xhtml\">从清单 16 可以看出，此时堆空间的垃圾回收稳定在一个固定的范围。在一个稳定的堆中，堆空间大小始终不变，每次 GC 时，都要应对一个 40MB 的空间。因此，虽然 GC 次数减小了，但是单次 GC 速度不如一个震荡的堆。</p>\n<h2 id=\"增大吞吐量提升系统性能\">增大吞吐量提升系统性能</h2>\n<p>吞吐量优先的方案将会尽可能减少系统执行垃圾回收的总时间，故可以考虑关注系统吞吐量的并行回收收集器。在拥有高性能的计算机上，进行吞吐量优先优化，可以使用参数：</p>\n<div class=\"bx--snippet bx--snippet--multi bx--snippet-btn--expand--hide\" data-code-snippet=\"\"><div class=\"bx--snippet-container\" aria-label=\"Code Snippet Text\"><pre><code>java –Xmx3800m –Xms3800m –Xmn2G –Xss128k –XX:+UseParallelGC\n   –XX:ParallelGC-Threads=20 –XX:+UseParallelOldGC\n</code></pre></div><button data-copy-btn=\"\" type=\"button\" class=\"bx--snippet-button\" aria-label=\"Copy code\" tabindex=\"0\"><svg class=\"bx--snippet__icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><path d=\"M1 10H0V2C0 .9.9 0 2 0h8v1H2c-.6 0-1 .5-1 1v8z\"></path><path d=\"M11 4.2V8h3.8L11 4.2zM15 9h-4c-.6 0-1-.4-1-1V4H4.5c-.3 0-.5.2-.5.5v10c0 .3.2.5.5.5h10c.3 0 .5-.2.5-.5V9zm-4-6c.1 0 .3.1.4.1l4.5 4.5c0 .1.1.3.1.4v6.5c0 .8-.7 1.5-1.5 1.5h-10c-.8 0-1.5-.7-1.5-1.5v-10C3 3.7 3.7 3 4.5 3H11z\"></path></svg><div class=\"bx--btn--copy__feedback\" data-feedback=\"已复制！\"></div></button><button class=\"bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand\" type=\"button\"><span class=\"bx--snippet-btn--text\" data-show-more-text=\"显示更多\" data-show-less-text=\"显示较少\">显示更多</span><svg class=\"bx--icon-chevron--down\" width=\"12\" height=\"7\" viewBox=\"0 0 12 7\" aria-label=\"Show more icon\"><title>Show more icon</title><path fill-rule=\"nonzero\" d=\"M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z\"></path></svg></button></div>\n<p xmlns=\"http://www.w3.org/1999/xhtml\">–Xmx3800m –Xms3800m：设置 Java 堆的最大值和初始值。一般情况下，为了避免堆内存的频繁震荡，导致系统性能下降，我们的做法是设置最大堆等于最小堆。假设这里把最小堆减少为最大堆的一半，即 1900m，那么 JVM 会尽可能在 1900MB 堆空间中运行，如果这样，发生 GC 的可能性就会比较高；</p>\n<p>-Xss128k：减少线程栈的大小，这样可以使剩余的系统内存支持更多的线程；</p>\n<p>-Xmn2g：设置年轻代区域大小为 2GB；</p>\n<p>–XX:+UseParallelGC：年轻代使用并行垃圾回收收集器。这是一个关注吞吐量的收集器，可以尽可能地减少 GC 时间。</p>\n<p>–XX:ParallelGC-Threads：设置用于垃圾回收的线程数，通常情况下，可以设置和 CPU 数量相等。但在 CPU 数量比较多的情况下，设置相对较小的数值也是合理的；</p>\n<p>–XX:+UseParallelOldGC：设置年老代使用并行回收收集器。</p>\n<h2 id=\"尝试使用大的内存分页\">尝试使用大的内存分页</h2>\n<p>CPU 是通过寻址来访问内存的。32 位 CPU 的寻址宽度是 0~0xFFFFFFFF ，计算后得到的大小是 4G，也就是说可支持的物理内存最大是 4G。但在实践过程中，碰到了这样的问题，程序需要使用 4G 内存，而可用物理内存小于 4G，导致程序不得不降低内存占用。为了解决此类问题，现代 CPU 引入了 MMU（Memory Management Unit 内存管理单元）。MMU 的核心思想是利用虚拟地址替代物理地址，即 CPU 寻址时使用虚址，由 MMU 负责将虚址映射为物理地址。MMU 的引入，解决了对物理内存的限制，对程序来说，就像自己在使用 4G 内存一样。内存分页 (Paging) 是在使用 MMU 的基础上，提出的一种内存管理机制。它将虚拟地址和物理地址按固定大小（4K）分割成页 (page) 和页帧 (page frame)，并保证页与页帧的大小相同。这种机制，从数据结构上，保证了访问内存的高效，并使 OS 能支持非连续性的内存分配。在程序内存不够用时，还可以将不常用的物理内存页转移到其他存储设备上，比如磁盘，这就是大家耳熟能详的虚拟内存。</p>\n<p>在 Solaris 系统中，JVM 可以支持 Large Page Size 的使用。使用大的内存分页可以增强 CPU 的内存寻址能力，从而提升系统的性能。</p>\n<div class=\"bx--snippet bx--snippet--multi bx--snippet-btn--expand--hide\" data-code-snippet=\"\"><div class=\"bx--snippet-container\" aria-label=\"Code Snippet Text\"><pre><code>java –Xmx2506m –Xms2506m –Xmn1536m –Xss128k –XX:++UseParallelGC\n –XX:ParallelGCThreads=20 –XX:+UseParallelOldGC –XX:+LargePageSizeInBytes=256m\n</code></pre></div><button data-copy-btn=\"\" type=\"button\" class=\"bx--snippet-button\" aria-label=\"Copy code\" tabindex=\"0\"><svg class=\"bx--snippet__icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><path d=\"M1 10H0V2C0 .9.9 0 2 0h8v1H2c-.6 0-1 .5-1 1v8z\"></path><path d=\"M11 4.2V8h3.8L11 4.2zM15 9h-4c-.6 0-1-.4-1-1V4H4.5c-.3 0-.5.2-.5.5v10c0 .3.2.5.5.5h10c.3 0 .5-.2.5-.5V9zm-4-6c.1 0 .3.1.4.1l4.5 4.5c0 .1.1.3.1.4v6.5c0 .8-.7 1.5-1.5 1.5h-10c-.8 0-1.5-.7-1.5-1.5v-10C3 3.7 3.7 3 4.5 3H11z\"></path></svg><div class=\"bx--btn--copy__feedback\" data-feedback=\"已复制！\"></div></button><button class=\"bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand\" type=\"button\"><span class=\"bx--snippet-btn--text\" data-show-more-text=\"显示更多\" data-show-less-text=\"显示较少\">显示更多</span><svg class=\"bx--icon-chevron--down\" width=\"12\" height=\"7\" viewBox=\"0 0 12 7\" aria-label=\"Show more icon\"><title>Show more icon</title><path fill-rule=\"nonzero\" d=\"M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z\"></path></svg></button></div>\n<p xmlns=\"http://www.w3.org/1999/xhtml\">–XX:+LargePageSizeInBytes：设置大页的大小。</p>\n<p>过大的内存分页会导致 JVM 在计算 Heap 内部分区（perm, new, old）内存占用比例时，会出现超出正常值的划分，最坏情况下某个区会多占用一个页的大小。</p>\n<h2 id=\"使用非占有的垃圾回收器\">使用非占有的垃圾回收器</h2>\n<p>为降低应用软件的垃圾回收时的停顿，首先考虑的是使用关注系统停顿的 CMS 回收器，其次，为了减少 Full GC 次数，应尽可能将对象预留在年轻代，因为年轻代 Minor GC 的成本远远小于年老代的 Full GC。</p>\n<div class=\"bx--snippet bx--snippet--multi bx--snippet-btn--expand--hide\" data-code-snippet=\"\"><div class=\"bx--snippet-container\" aria-label=\"Code Snippet Text\"><pre><code>java –Xmx3550m –Xms3550m –Xmn2g –Xss128k –XX:ParallelGCThreads=20\n –XX:+UseConcMarkSweepGC –XX:+UseParNewGC –XX:+SurvivorRatio=8 –XX:TargetSurvivorRatio=90\n –XX:MaxTenuringThreshold=31\n</code></pre></div><button data-copy-btn=\"\" type=\"button\" class=\"bx--snippet-button\" aria-label=\"Copy code\" tabindex=\"0\"><svg class=\"bx--snippet__icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><path d=\"M1 10H0V2C0 .9.9 0 2 0h8v1H2c-.6 0-1 .5-1 1v8z\"></path><path d=\"M11 4.2V8h3.8L11 4.2zM15 9h-4c-.6 0-1-.4-1-1V4H4.5c-.3 0-.5.2-.5.5v10c0 .3.2.5.5.5h10c.3 0 .5-.2.5-.5V9zm-4-6c.1 0 .3.1.4.1l4.5 4.5c0 .1.1.3.1.4v6.5c0 .8-.7 1.5-1.5 1.5h-10c-.8 0-1.5-.7-1.5-1.5v-10C3 3.7 3.7 3 4.5 3H11z\"></path></svg><div class=\"bx--btn--copy__feedback\" data-feedback=\"已复制！\"></div></button><button class=\"bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand\" type=\"button\"><span class=\"bx--snippet-btn--text\" data-show-more-text=\"显示更多\" data-show-less-text=\"显示较少\">显示更多</span><svg class=\"bx--icon-chevron--down\" width=\"12\" height=\"7\" viewBox=\"0 0 12 7\" aria-label=\"Show more icon\"><title>Show more icon</title><path fill-rule=\"nonzero\" d=\"M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z\"></path></svg></button></div>\n<p xmlns=\"http://www.w3.org/1999/xhtml\">–XX:ParallelGCThreads=20：设置 20 个线程进行垃圾回收；</p>\n<p>–XX:+UseParNewGC：年轻代使用并行回收器；</p>\n<p>–XX:+UseConcMarkSweepGC：年老代使用 CMS 收集器降低停顿；</p>\n<p>–XX:+SurvivorRatio：设置 Eden 区和 Survivor 区的比例为 8:1。稍大的 Survivor 空间可以提高在年轻代回收生命周期较短的对象的可能性，如果 Survivor 不够大，一些短命的对象可能直接进入年老代，这对系统来说是不利的。</p>\n<p>–XX:TargetSurvivorRatio=90：设置 Survivor 区的可使用率。这里设置为 90%，则允许 90%的 Survivor 空间被使用。默认值是 50%。故该设置提高了 Survivor 区的使用率。当存放的对象超过这个百分比，则对象会向年老代压缩。因此，这个选项更有助于将对象留在年轻代。</p>\n<p>–XX:MaxTenuringThreshold：设置年轻对象晋升到年老代的年龄。默认值是 15 次，即对象经过 15 次 Minor GC 依然存活，则进入年老代。这里设置为 31，目的是让对象尽可能地保存在年轻代区域。</p>\n<h2 id=\"结束语\">结束语</h2>\n<p>通过本文的学习，读者了解了如何将新对象预留在年轻代、如何让大对象进入年老代、如何设置对象进入年老代的年龄、稳定的 Java 堆 VS 动荡的 Java 堆、增大吞吐量提升系统性能、尝试使用大的内存分页、使用非占有的垃圾回收器等主题，通过实例及对应输出解释的形式让读者对于 JVM 优化有一个初步认识。如其他文章相同的观点，没有哪一条优化是固定不变的，读者需要自己判断、实践后才能找到正确的道路。</p>                        <footer class=\"code--entry-footer\"></footer>          </section>\n        </div>"
  },
  {
    "category": "jvm",
    "qes": "分代收集算法",
    "ans": "<div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <p></p>\n<div class=\"toc\">\n <h3><a name=\"t0\"></a><a name=\"t0\"></a>文章目录</h3>\n <ul><li><a href=\"#_1\" target=\"_self\">摘要</a></li><li><a href=\"#_4\" target=\"_self\">对象分类</a></li><li><ul><li><a href=\"#httpblogcsdnnetmccand1234articledetails52072369_15\" target=\"_self\">对象对应的[内存区域](http://blog.csdn.net/mccand1234/article/details/52072369)</a></li><li><a href=\"#JAVA_21\" target=\"_self\">JAVA堆的对象回收（夭折对象和老不死对象）</a></li><li><a href=\"#_45\" target=\"_self\">方法区的对象回收（不灭对象）</a></li><li><a href=\"#GC_50\" target=\"_self\">查看GC对象是否存活的方法</a></li></ul>\n  </li><li><a href=\"#Java_75\" target=\"_self\">Java内存分配机制</a></li><li><ul><li><a href=\"#Young_Generation_79\" target=\"_self\">年轻代（Young Generation）</a></li><li><a href=\"#Old_Generation_88\" target=\"_self\">年老代（Old Generation）</a></li><li><a href=\"#Permanent_Generation_94\" target=\"_self\">永久代（Permanent Generation方法区）</a></li></ul>\n  </li><li><a href=\"#Java_GC_119\" target=\"_self\">Java GC机制</a></li><li><ul><li><a href=\"#GC_120\" target=\"_self\">GC的概念</a></li><li><a href=\"#FullGC_129\" target=\"_self\">FullGC触发条件</a></li><li><a href=\"#GC_138\" target=\"_self\">健康的GC</a></li><li><a href=\"#YoungGC_153\" target=\"_self\">YoungGC</a></li><li><a href=\"#OldGC_168\" target=\"_self\">OldGC</a></li><li><a href=\"#FullGC_185\" target=\"_self\">FullGC</a></li></ul>\n  </li><li><a href=\"#3GC_192\" target=\"_self\">3种GC算法</a></li><li><a href=\"#7_212\" target=\"_self\">7种垃圾收集器</a></li><li><ul><li><a href=\"#_215\" target=\"_self\">并发收集和并行收集的区别</a></li><li><a href=\"#serial__220\" target=\"_self\">serial （复制算法）</a></li><li><a href=\"#parNew__231\" target=\"_self\">parNew （复制算法）</a></li><li><a href=\"#parallel_scaverge_237\" target=\"_self\">parallel scaverge（复制算法）</a></li><li><a href=\"#serial_old_242\" target=\"_self\">serial old（标记-清理）</a></li><li><a href=\"#parallel_old_251\" target=\"_self\">parallel old（标记-清理）</a></li><li><a href=\"#cms_257\" target=\"_self\">cms（标记-清除）</a></li><li><a href=\"#G1_271\" target=\"_self\">G1</a></li><li><a href=\"#GC_279\" target=\"_self\">如何减少GC出现的次数：</a></li></ul>\n </li></ul>\n</div>\n<p></p> \n<h1><a name=\"t1\"></a><a name=\"t1\"></a><a id=\"_1\"></a>摘要</h1> \n<p>当前商业虚拟机的垃圾收集都采用“分代收集”（Generational Collection）算法，这种算法并没有什么新的思想，只是根据对象的存活周期的不同将内存划分为几块。一般是把Java堆分为<font color=\"red\">新生代和老年代</font>，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“<strong>标记-清除</strong>”或“<strong>标记-整理</strong>”算法来进行回收。<font color=\"red\">方法区永久代</font>，回收方法同老年代。</p> \n<h1><a name=\"t2\"></a><a name=\"t2\"></a><a id=\"_4\"></a>对象分类</h1> \n<p>分代搜集算法是针对对象的不同特性，而使用适合的算法，这里面并没有实际上的新算法产生。与其说分代搜集算法是第四个算法，不如说它是对前三个算法的实际应用。<br> 首先我们来探讨一下对象的不同特性，接下来和各位来一起给这些对象选择GC算法。<br> 内存中的对象按照生命周期的长短大致可以分为三种，以下命名均为个人的命名。<br> 1、夭折对象(新生代)：朝生夕灭的对象，通俗点讲就是活不了多久就得死的对象。<br> 例子：<strong>某一个方法的局域变量、循环内的临时变量等等</strong>。<br> 2、老不死对象（老年代）：这类对象一般活的比较久，岁数很大还不死，但归根结底，老不死对象也几乎早晚要死的，但也只是几乎而已。<br> 例子：缓存对象、数据库连接对象、单例对象（单例模式）等等。<br> 3、不灭对象（永久代）：此类对象一般一旦出生就几乎不死了，它们几乎会一直永生不灭，记得，只是几乎不灭而已。<br> 例子：<strong>String池中的对象（享元模式）、加载过的类信息</strong>等等。</p> \n<h2><a name=\"t3\"></a><a name=\"t3\"></a><a id=\"httpblogcsdnnetmccand1234articledetails52072369_15\"></a>对象对应的<a href=\"http://blog.csdn.net/mccand1234/article/details/52072369\">内存区域</a></h2> \n<p>还记得前面介绍内存管理时，JVM对内存的划分吗？<br> 我们将上面三种对象对应到内存区域当中，就是<font color=\"red\">夭折对象和老不死对象都在JAVA堆，而不灭对象在方法区。</font><br> 之前的一章中我们就已经说过，对于JAVA堆，JVM规范要求必须实现GC，因而对于夭折对象和老不死对象来说，死几乎是必然的结局，但也只是几乎，还是难免会有一些对象会一直存活到应用结束。然而JVM规范对方法区的GC并不做要求，所以假设一个JVM实现没有对方法区实现GC，那么不灭对象就是真的不灭对象了。<br> 由于不灭对象的生命周期过长，因此分代搜集算法就是针对的JAVA堆而设计的，也就是针对夭折对象和老不死对象。</p> \n<h2><a name=\"t4\"></a><a name=\"t4\"></a><a id=\"JAVA_21\"></a>JAVA堆的对象回收（夭折对象和老不死对象）</h2> \n<p>有了以上分析，我们来看看分代搜集算法如何处理JAVA堆的内存回收的，也就是夭折对象与老不死对象的回收。<br> 夭折对象：这类对象朝生夕灭，存活时间短，还记得复制算法的使用要求吗？那就是对象存活率不能太高，因此夭折对象是最适合使用复制算法的。<br> 小疑问：50%内存的浪费怎么办？<br> 答疑：因为夭折对象一般存活率较低，因此可以不使用50%的内存作为空闲，一般的，<font color=\"red\">复制算法：使用两块10%的内存作为空闲和活动区间，而另外80%的内存，则是用来给新建对象分配内存的。一旦发生GC，将10%的活动区间与另外80%中存活的对象转移到10%的空闲区间，接下来，将之前90%的内存全部释放，以此类推。</font><br> GC流程：</p> \n<div align=\"center\"> \n</div>\n<p><img src=\"https://img-blog.csdn.net/20160730141640502\" alt=\"这里写图片描述\"></p> \n<div align=\"center\"> \n</div>\n<p><img src=\"https://img-blog.csdn.net/20160730135924289\" alt=\"这里写图片描述\"></p> \n<p>图中标注了三个区域中在各个阶段，各自内存的情况。相信看着图，它的GC流程已经不难理解了。<br> 第一点是使用这样的方式，我们只浪费了10%的内存，这个是可以接受的，因为我们换来了内存的整齐排列与GC速度。第二点是，这个策略的前提是，每次存活的对象占用的内存不能超过这10%的大小，一旦超过，多出的对象将无法复制。<br> 为了解决上面的意外情况，也就是存活对象占用的内存太大时的情况，高手们将JAVA堆分成两部分来处理，上述三个区域则是第一部分，称为新生代或者年轻代。而余下的一部分，专门存放老不死对象的则称为年老代。<br> 是不是很贴切的名字呢？下面我们看看老不死对象的处理方式。<br> 老不死对象：这一类对象存活率非常高，因为它们大多是从新生代转过来的。就像人一样，活的年月久了，就变成老不死了。<br> 通常情况下，以下两种情况发生的时候，对象会从新生代区域转到年老带区域。</p> \n<ol><li>在新生代里的每一个对象，都会有一个年龄，当这些对象的年龄到达一定程度时（<font color=\"red\">年龄就是熬过的GC次数，每次GC如果对象存活下来，则年龄加1</font>），则会被转到年老代，而这个转入年老代的年龄值，一般在JVM中是可以设置的。</li><li>在新生代存活对象占用的内存超过10%时，则多余的对象会放入年老代。这种时候，年老代就是新生代的“备用仓库”。<br> 针对老不死对象的特性，显然<font color=\"red\">不再适合使用复制算法</font>，因为它的存活率太高，而且不要忘了，如果年老代再使用复制算法，它可是没有备用仓库的。因此一般针对老不死对象只能采用标记/整理或者标记/清除算法。<br> 以上两种情况已经解决了GC的大部分问题，因为JAVA堆是GC的主要关注对象，而以上也已经包含了分代搜集算法的全部内容，接下来对于不灭对象的回收，已经不属于分代搜集算法的内容。</li></ol> \n<h2><a name=\"t5\"></a><a name=\"t5\"></a><a id=\"_45\"></a>方法区的对象回收（不灭对象）</h2> \n<p><strong>不灭对象存在于方法区</strong>，在我们常用的hotspot虚拟机（JDK默认的JVM）中，方法区也被亲切的称为永久代，又是一个很贴切的名字不是吗？<br> 其实在很久很久以前，是不存在永久代的。当时永久代与年老代都存放在一起，里面包含了JAVA类的实例信息以及类信息。但是后来发现，对于类信息的卸载几乎很少发生，因此便将二者分离开来。幸运的是，这样做确实提高了不少性能。于是永久代便被拆分出来了。<br> <font color=\"red\">这一部分区域的GC与年老代采用相似的方法，由于都没有“备用仓库”，二者都是只能使用标记/清除和标记/整理算法。</font></p> \n<h2><a name=\"t6\"></a><a name=\"t6\"></a><a id=\"GC_50\"></a>查看GC对象是否存活的方法</h2> \n<p>1）引用计数法<br> 基本思想：给对象中添加要给引用计数器，每当一个地方引用时，计数器值+1，当引用失效时，计数器值-1，任何时刻计数器为0的对象就不可能再被使用。<br> 缺点：<font color=\"red\">很难解决对象之间循环引用的问题。</font></p> \n<p>2）可达性分析法<br> 基本思想：通过一系列的称为“GC roots”的对象作为起始点，从这些节点，开始向下搜索，搜索所走过的路径称为引用链，<font color=\"red\">当一个对象到 GC root 没有任何引用链相连（用图论的话来说，就是从 GC roots 到这个对象不可达），则证明此对象是不可用的</font>。</p> \n<p>若对象在进行可达性分析后发现没有与 GC roots 相连接的引用链，那么他将会被<font color=\"red\">第一次标记并进行一次筛选</font>，筛选的条件是该对象是否有必要执行 finalize()方法，当对象没有重写finalize()方法或者 finalize()方法已经被虚拟机调用过，虚拟机将这两种情况都视为没必要执行。<br> 若该对象被判定为有必要执行 finalize方法，则这个对象会被放在一个 F-Queue 队列，<br> finalize方法是对象逃脱死亡命运的最后一次机会，稍后 GC 将对 F-queue中的对象进行第二次小规模的标记，若对象要在 finalize中成功拯救自己—次要重新与引用链上的任何一个对象建立关联即可（即可以重写finalize()方法来实现，比如可以将自己赋值给某个类变量或者对象的成员变量），那么在第二次标记时他们将会被移出“即将回收”集合。<br> <font color=\"red\">任何一个对象的 finalize()方法都只会被系统调用一次。</font></p> \n<p>可作为 GC roots 的对象</p> \n<p>1）java 虚拟机栈（栈帧中的本地变量表）中引用的对象<br> 2）方法区中类的静态属性引用的对象<br> 3）方法区中常量引用的对象<br> 4）本地方法栈中 JNI 引用的对象</p> \n<p><font color=\"red\"><a href=\"https://blog.csdn.net/mccand1234/article/details/53968793\">引用强度</a>：强引用&gt;软引用&gt;弱引用&gt;虚引用</font><br> 1）强引用：类似Object obj = new Object()的引用，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象。<br> 2）软引用：用来描述一些还有用但并非必须的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常。SoftReference类实现软引用。<br> 3）弱引用：用来描述非必须对象，但其强度比软引用更弱，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。WeakReference类实现弱引用。<br> 4）虚引用：一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。PhantomReference类实现虚引用。</p> \n<h1><a name=\"t7\"></a><a name=\"t7\"></a><a id=\"Java_75\"></a>Java内存分配机制</h1> \n<p>这里所说的内存分配，主要指的是在堆上的分配，一般的，对象的内存分配都是在堆上进行。Java内存分配和回收的机制概括的说，就是：<font color=\"red\">分代分配，分代回收</font>。对象将根据存活的时间被分为：年轻代（Young Generation）、年老代（Old Generation）、永久代（Permanent Generation，也就是方法区）。如下图<br> 　　<img src=\"https://img-blog.csdn.net/20160730191807963\" alt=\"这里写图片描述\"></p> \n<h2><a name=\"t8\"></a><a name=\"t8\"></a><a id=\"Young_Generation_79\"></a>年轻代（Young Generation）</h2> \n<p>对象被创建时，内存的分配首先发生在年轻代（大对象可以直接 被创建在年老代），大部分的对象在创建后很快就不再使用，因此很快变得不可达，于是被年轻代的GC机制清理掉，这个GC机制被称为Minor GC或叫Young GC。注意，Minor GC并不代表年轻代内存不足，它事实上只表示在<font color=\"red\">年轻代</font>上的GC。<br> 年轻代上的内存分配是这样的，年轻代可以分为3个区域：Eden区（伊甸园，亚当和夏娃偷吃禁果生娃娃的地方，用来表示内存首次分配的区域，再贴切不过）和两个存活区（Survivor 0 、Survivor 1）。内存分配过程为<br> 　　<img src=\"https://img-blog.csdn.net/20160730191837045\" alt=\"这里写图片描述\"></p> \n<p>绝大多数刚创建的对象会被分配在Eden区，其中的大多数对象很快就会消亡。<font color=\"red\">Eden区是连续的内存空间，因此在其上分配内存极快</font>；当Eden区满的时候，执行Minor GC，将消亡的对象清理掉，并将剩余的对象复制到一个存活区Survivor0（此时，Survivor1是空白的，两个Survivor总有一个是空白的）；此后，每次Eden区满了，就执行一次Minor GC，并将剩余的对象都添加到Survivor0；当Survivor0也满的时候，将其中仍然活着的对象直接复制到Survivor1，以后Eden区执行Minor GC后，就将剩余的对象添加Survivor1（此时，Survivor0是空白的）。当两个存活区切换了几次（<font color=\"red\">HotSpot虚拟机默认15次，用-XX:MaxTenuringThreshold控制，大于该值进入老年代</font>）之后，仍然存活的对象（其实只有一小部分，比如，我们自己定义的对象），将被复制到老年代。<br> 从上面的过程可以看出，Eden区是连续的空间，且Survivor总有一个为空。经过一次GC和复制，一个Survivor中保存着当前还活 着的对象，而Eden区和另一个Survivor区的内容都不再需要了，可以直接清空，到下一次GC时，两个Survivor的角色再互换。因此，这种方 式分配内存和清理内存的效率都极高，这种垃圾回收的方式就是复制算法（将Eden区和一个Survivor中仍然存活的对象拷贝到另一个Survivor中）。</p> \n<h2><a name=\"t9\"></a><a name=\"t9\"></a><a id=\"Old_Generation_88\"></a>年老代（Old Generation）</h2> \n<p>对象如果在年轻代存活了足够长的时间而没有被清理掉（即在几次 Young GC后存活了下来），则会被复制到年老代，年老代的空间一般比年轻代大，能存放更多的对象，在年老代上发生的GC次数也比年轻代少。当年老代内存不足时， 将执行Major GC，也叫 Full GC。　　<br> 可以使用-XX:+UseAdaptiveSizePolicy开关来控制是否采用动态控制策略，如果动态控制，则动态调整Java堆中各个区域的大小以及进入老年代的年龄。<br> 如果对象比较大（比如长字符串或大数组），Young空间不足，则大对象会直接分配到老年代上（大对象可能触发提前GC，应少用，更应避免使用短命的大对象）。用-XX:PretenureSizeThreshold来控制直接升入老年代的对象大小，大于这个值的对象会直接分配在老年代上。<br> 可能存在年老代对象引用新生代对象的情况，如果需要执行Young GC，则可能需要查询整个老年代以确定是否可以清理回收，这显然是低效的。解决的方法是，年老代中维护一个512 byte的块——”card table“，所有老年代对象引用新生代对象的记录都记录在这里。Young GC时，只要查这里即可，不用再去查全部老年代，因此性能大大提高。</p> \n<h2><a name=\"t10\"></a><a name=\"t10\"></a><a id=\"Permanent_Generation_94\"></a>永久代（Permanent Generation方法区）</h2> \n<p>永久代的回收有两种：<font color=\"red\">常量池中的常量，无用的类信息</font>，常量的回收很简单，没有引用了就可以被回收。对于无用的类进行回收，必须保证3点：</p> \n<ul><li>类的所有实例都已经被回收</li><li>加载类的ClassLoader已经被回收</li><li>类对象的Class对象没有被引用（即没有通过反射引用该类的地方）<br> 永久代的回收并不是必须的，可以通过参数来设置是否对类进行回收。HotSpot提供-Xnoclassgc进行控制<br> 使用-verbose，-XX:+TraceClassLoading、-XX:+TraceClassUnLoading可以查看类加载和卸载信息<br> -verbose、-XX:+TraceClassLoading可以在Product版HotSpot中使用；<br> -XX:+TraceClassUnLoading需要fastdebug版HotSpot支持<br> 垃圾收集器</li></ul> \n<div class=\"table-box\"><table><thead><tr><th>参数</th><th>内容</th></tr></thead><tbody><tr><td><strong>-Xms</strong></td><td>初始堆大小。如：-Xms256m</td></tr><tr><td>-Xmx</td><td>最大堆大小。如：-Xmx512m</td></tr><tr><td>-Xmn</td><td>新生代大小。通常为 Xmx 的 1/3 或 1/4。新生代 = Eden + 2 个 Survivor 空间。实际可用空间为 = Eden + 1 个 Survivor，即 90%</td></tr><tr><td>-Xss</td><td>JDK1.5+ 每个线程堆栈大小为 1M，一般来说如果栈不是很深的话， 1M 是绝对够用了的。</td></tr><tr><td>-XX:NewRatio</td><td>新生代与老年代的比例，如 –XX:NewRatio=2，则新生代占整个堆空间的1/3，老年代占2/3</td></tr><tr><td><strong>-XX:SurvivorRatio</strong></td><td>新生代中 Eden(8) 与 Survivor(1+1) 的比值。默认值为 8。即 Eden 占新生代空间的 8/10，另外两个 Survivor 各占 1/10</td></tr><tr><td>-XX:PermSize</td><td>永久代(方法区)的初始大小</td></tr><tr><td><strong>-XX:MaxPermSize</strong></td><td>永久代(方法区)的最大值</td></tr><tr><td>-XX:+PrintGCDetails</td><td>打印 GC 信息</td></tr><tr><td>-XX:+HeapDumpOnOutOfMemoryError</td><td>让虚拟机在发生内存溢出时 Dump 出当前的内存堆转储快照，以便分析用</td></tr></tbody></table></div>\n<h1><a name=\"t11\"></a><a name=\"t11\"></a><a id=\"Java_GC_119\"></a>Java GC机制</h1> \n<h2><a name=\"t12\"></a><a name=\"t12\"></a><a id=\"GC_120\"></a>GC的概念</h2> \n<p>GC主要有YoungGC，OldGC，FullGC（还有G1中独有的Mixed GC，收集整个young区以及部分Old区）<br> YoungGC：回收Eden区，有些地方称之为Minor GC，或者简称YGC<br> OldGC：回收Old区，只单独回收Old区的只有CMS GC，且是CMS的concurrent collection模式。<br> FullGC：收集整个GC堆，也称之为Major GC。<br> 当有人说“Major GC”的时候一定要问清楚他想要指的是上面的FullGC还是OldGC。对这个GC的误解最大，尤其最常用的ParNew+CMS组合，很多人误解FullGC可能是受到jstat结果的影响。<br> <font color=\"red\">如果配置了CMS垃圾回收器，那么jstat中的FGC并不表示就一定发生了FullGC，很有可能是发生了CMS GC，而且每发生一次CMS GC，jstat中的FGC就会+2</font>（因为CMS GC时初始化标记和重新标记都会STW，所以FGC的值会+2，可以通过让JVM按照预期GC提供的代码验证）<br> 事实上，FullGC的触发条件比较苛刻，判断是否发生了FullGC最好通过GC日志，所以强烈建议生产环境开启GC日志，它的价值远大于它对性能的影响。</p> \n<h2><a name=\"t13\"></a><a name=\"t13\"></a><a id=\"FullGC_129\"></a>FullGC触发条件</h2> \n<p>1.没有配置 -XX:+DisableExplicitGC的情况下System.gc()会触发FullGC;<br> 2.Promotion Failed；<br> 3.Concurrent mode failure；<br> 4.Metaspace Space达到MaxMetasapce 阈值；<br> 5.执行jmap histo : live 或 jmap -dump ：live；</p> \n<p>说明：统计发现之前YGC的平均晋升大小比目前old gen剩余的空间大，触发CMS GC；Metaspace Space使用达到Metaspace阈值是触发CMS GC；</p> \n<h2><a name=\"t14\"></a><a name=\"t14\"></a><a id=\"GC_138\"></a>健康的GC</h2> \n<p>如何判断JVM的GC是否正常？<br> 首先就要看YoungGC，OldGC和FullGC是否正常；<br> 无论是定位YoungGC，OldGC，FullGC哪一种GC，判断其是否正常主要从两个维度：GC频率和STW时间；<br> 要得到这两个维度的值，我们需要知道JVM运行了多久，执行如下命令即可：</p> \n<p><code>ps -p pid -o etime</code><br> 可参考的健康的GC状况</p> \n<ol><li>YoungGC频率5秒/次；</li><li>CMS GC频率不超过1天/次；</li><li>每次YoungGC的时间不超过30ms；</li><li>FullGC频率尽可能完全杜绝；</li></ol> \n<p>G1&amp;CMS时，FullGC回收算法会退化成Serial+SerialOld，即单线程串行回收，且完全STW，影响很大且STW时间完全不可预估，所以FullGC频率尽可能完全杜绝。</p> \n<h2><a name=\"t15\"></a><a name=\"t15\"></a><a id=\"YoungGC_153\"></a>YoungGC</h2> \n<p>YoungGC是最频繁发生的，发生的概率是OldGC和FullGC的的10倍，100倍，甚至1000倍。同时YoungGC的问题也是最难定位的。这里给出YoungGC定位的三种方法：</p> \n<ol><li>查看服务器SWAP&amp;IO情况，如果服务器发生SWAP，会严重拖慢GC效率，导致STW时间异常长，拉长接口响应时间，从而影响用户体验；（sar，yum install sysstat）；</li><li>查看StringTable情况（参考：探索StringTable提升YGC性能）；</li><li>排查每次YoungGC后幸存对象大小（JVM模型基于分配的对象朝生夕死的假设设计，如果每次YoungGC后幸存对象较大，可能存在问题）。</li></ol> \n<p>可参考的健康的GC状况给出建议YoungGC频率5秒/次，经验值3秒~6秒/次都是比较合理的YoungGC频率；</p> \n<ul><li>如果YoungGC频率远高于这个值，例如20秒/次，30秒/次，甚至60秒/次，这种情况下，JVM相当空闲，处于基本上无事可做的状态。建议缩容，减少服务器浪费；</li><li>如果YoungGC频率远低于这个值，例如1秒/次，甚至1秒/好多次，这种情况下，JVM相当繁忙，建议follow如下步骤进行初步症断：</li></ul> \n<ol><li>检查Young区，Young区在整个堆占比在25%~40%比较合理，如果Young区太小，建议扩大Xmn。</li><li>检查SurvivorRatio，保持默认值8即可，Eden:S0:S1=8:1:1是一个比较合理的值；</li></ol> \n<h2><a name=\"t16\"></a><a name=\"t16\"></a><a id=\"OldGC_168\"></a>OldGC</h2> \n<p><font color=\"red\">只单独回收Old区的只有CMS GC</font>。</p> \n<p>触发CMS GC 条件比较简单，JVM有一个线程定时扫描Old区，如果发现Old区占比超过参数-XX:CMSInitiatingOccupancyFraction=75设定值（CMS条件下默认为68%），就会触发CMS GC。</p> \n<p>（定时时间设置XX:CMSWaitDuration=2000）（Old区占比设置：-XX:CMSInitiatingOccupancyFraction=75）（-XX:+UseCMSInitiatingOccupancyOnly 只有在Old区占比满足条件的情况下才触发CMS GC）</p> \n<p>可参考的健康的GC状况给出建议CMS GC频率不超过1天/次，如果CMS GC频率1天发生数次，甚至上10次，说明你的GC情况病的不轻了，建议follow如下步骤进行初步症断：</p> \n<ol><li> <p>检查Young区与Old区比值，尽量留60%以上的堆空间给Old区；</p> </li><li> <p>通过jstat查看每次YoungGC后晋升到Old区对象占比，如果发现每次YoungGC后Old区涨好几个百分点，甚至上10个点，说明有大对象，建议dump（jmap -dump:format=b,file=app.bin pid）后用MAT分析；</p> </li><li> <p>如果不停的CMS GC，Old区降不下去，建议先执行jmap -histo pid | head -n20 查看TOP20对象分布，如果除了[B和[C，即byte[]和char[]，还有其他占比较大的实例，如下图所示中TOP1的Object数组，也可通过dump后用MAT分析问题；</p> </li><li> <p>如果TOP20对象中有StandartSession对象，排查你的业务代码中有没有显示使用HttpSession，例如String id = request.getSession().getId();，一般的OLTP系统几乎不会使用HttpSession，且HttpSession的的生命周期很长，会加快Old区增长速度；</p> </li></ol> \n<h2><a name=\"t17\"></a><a name=\"t17\"></a><a id=\"FullGC_185\"></a>FullGC</h2> \n<ol><li> <p>如果配置CMS，由于CMS采用标记清理算法，会有内存碎片的问题，推荐配置一个查看内存碎片程度的JVM参数PrintFLSStatistics。</p> </li><li> <p>如果配置ParallelOldGC，那么每次Old区满后，会触发FullGC，如果FullGC频率过高，也可以通过上面OldGC段落提及的排查方法；</p> </li><li> <p>如果没有配置-XX:+DisableExplicitGC，即没有屏蔽System.gc()触发FullGC，那么可以通过排查GC日志中有System字样判断是否System.gc()触发；或者通过jstat -gccause pid 2s pid判定，LGCC表示最近一次GC原因，如果为\"System.gc\"，表示由System.gc()触发，GCC表示当前GC原因，如果当前没有GC，那么就是No GC。</p> </li></ol> \n<h1><a name=\"t18\"></a><a name=\"t18\"></a><a id=\"3GC_192\"></a>3种GC算法</h1> \n<p><img src=\"https://img-blog.csdnimg.cn/20190623224134700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21jY2FuZDEyMzQ=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n<p>标记-清除算法（老年代）：分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记对象。</p> \n<p>缺点：1）产生大量不连续的内存碎片 2）标记和清除效率都不高<br> <img src=\"https://img-blog.csdnimg.cn/20190623224143359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21jY2FuZDEyMzQ=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n<p>复制算法（新生代）：它将可用内存按照容量划分为大小相等的两块，每次只使用其中一块。当这一块的内存用完了，则就将还存活的对象复制到另一块上面，然后再把已经使用过的内存空间一次清理掉。使得每次都是对整个半区进行内存回收。</p> \n<p>优点：1）不会出现内存碎片。2）只需移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。</p> \n<p>缺点：1）将内存缩小为原来的一半。2）在对象存活率较高时会进行较多复制操作，效率较低。</p> \n<p>商业虚拟机的分配担保机制：<font color=\"red\">将内存分为一块较大的 eden 空间和两块较小的 survivor 空间，默认比例是 8:1:1，即每次新生代中可用内存空间为整个新生代容量的 90%，每次使用 eden 和其中一个 survivour。当回收时，将 eden 和 survivor 中还存活的对象一次性复制到另外一块 survivor 上，最后清理掉 eden 和刚才用过的 survivor，若另外一块 survivor 空间没有足够内存空间存放上次新生代收集下来的存活对象时，这些对象将直接通过分配担保机制进入老年代。</font><br> <img src=\"https://img-blog.csdnimg.cn/20190623224152653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21jY2FuZDEyMzQ=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n<p>标记-清理算法（老年代）： 标记过程和“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清除，而是让所有存活对象都向一端移动，然后直接清理掉端边界以外的内存。</p> \n<h1><a name=\"t19\"></a><a name=\"t19\"></a><a id=\"7_212\"></a>7种垃圾收集器</h1> \n<p>在GC机制中，起重要作用的是垃圾收集器，垃圾收集器是GC的具体实现，Java虚拟机规范中对于垃圾收集器没有任何规定，所以不同厂商实现的垃圾 收集器各不相同，HotSpot 1.6版使用的垃圾收集器如下图（图来源于《深入理解Java虚拟机：JVM高级特效与最佳实现》，图中两个收集器之间有连线，说明它们可以配合使用）：<br> <img src=\"https://img-blog.csdnimg.cn/20190612143804460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21jY2FuZDEyMzQ=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n<h2><a name=\"t20\"></a><a name=\"t20\"></a><a id=\"_215\"></a>并发收集和并行收集的区别</h2> \n<p><a href=\"https://blog.csdn.net/mccand1234/article/details/87893925\">并发</a>（Concurrent）：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行）；用户程序在继续运行，而垃圾收集程序线程运行于另一个CPU上。 如CMS、G1（也有并行）。</p> \n<p>并行（Parallel）：指多个垃圾收集线程并行工作，但此时用户线程仍然处于等待状态；如ParNew、Parallel Scavenge、Parallel Old；</p> \n<h2><a name=\"t21\"></a><a name=\"t21\"></a><a id=\"serial__220\"></a>serial （复制算法）</h2> \n<p>单线程（单线程的意义不仅仅说明它会使用一个 cpu或一条垃圾收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集的时候，必须暂停其他所有工作线程，直到他收集结束）。<br> <img src=\"https://img-blog.csdnimg.cn/20190612224306129.png\" alt=\"在这里插入图片描述\"><br> 应用场景：<br> 对于运行在 <strong>client</strong> 模式下的虚拟机来说是个很好的选择。</p> \n<p>优点：<br> 1）简单高效（与其他收集器的单线程相比）；<br> 2）对于限定单个CPU的环境来说，Serial收集器没有线程交互（切换）开销，可以获得最高的单线程收集效率；<br> 3）在用户的桌面应用场景中，可用内存一般不大（几十M至一两百M），可以在较短时间内完成垃圾收集（几十MS至一百多MS）,只要不频繁发生，这是可以接受的。</p> \n<h2><a name=\"t22\"></a><a name=\"t22\"></a><a id=\"parNew__231\"></a>parNew （复制算法）</h2> \n<p>serial 收集器的多线程版本，是许多运行在 server 模式下的虚拟机首选的新生代收集器。<br> <img src=\"https://img-blog.csdnimg.cn/20190612224341742.png\" alt=\"在这里插入图片描述\"><br> 应用场景：<br> 在<strong>Server</strong>模式下，ParNew收集器是一个非常重要的收集器，因为<font color=\"red\">除Serial外，目前只有它能与CMS收集器配合工作</font>；但在单个CPU环境中，不会比Serail收集器有更好的效果，因为存在线程交互开销。</p> \n<h2><a name=\"t23\"></a><a name=\"t23\"></a><a id=\"parallel_scaverge_237\"></a>parallel scaverge（复制算法）</h2> \n<p>其他与ParNew类似，特别之处在于：CMS等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间；而其目标是达到一个可控制的吞吐量，适合在后台运算，没有太多的交互。</p> \n<p>应用场景：<br> 高吞吐量为目标，即减少垃圾收集时间，让用户代码获得更长的运行时间；当应用程序运行在具有多个CPU上，对暂停时间没有特别高的要求时，即程序主要在后台进行计算，而不需要与用户进行太多交互；例如，那些执行批量处理、订单处理、工资支付、科学计算的应用程序。</p> \n<h2><a name=\"t24\"></a><a name=\"t24\"></a><a id=\"serial_old_242\"></a>serial old（标记-清理）</h2> \n<p>serial 的老年代版本，单线程，<br> <img src=\"https://img-blog.csdnimg.cn/20190612224642410.png\" alt=\"在这里插入图片描述\"></p> \n<p>应用场景：<br> 主要用于Client模式；而在Server模式有两大用途：</p> \n<ol><li>在JDK1.5及之前，与Parallel Scavenge收集器搭配使用（JDK1.6有Parallel Old收集器可搭配。</li><li>作为CMS收集器的后备预案，在并发收集发生Concurrent Mode Failure时使用。</li></ol> \n<h2><a name=\"t25\"></a><a name=\"t25\"></a><a id=\"parallel_old_251\"></a>parallel old（标记-清理）</h2> \n<p>parallel scaverge 老年代的版本，多线程<br> <img src=\"https://img-blog.csdnimg.cn/20190612224657643.png\" alt=\"在这里插入图片描述\"><br> 应用场景：<br> JDK1.6及之后用来代替老年代的Serial Old收集器；特别是在Server模式，多CPU的情况下；这样在注重吞吐量以及CPU资源敏感的场景，就有了Parallel Scavenge加Parallel Old收集器的\"给力\"应用组合。</p> \n<h2><a name=\"t26\"></a><a name=\"t26\"></a><a id=\"cms_257\"></a>cms（标记-清除）</h2> \n<p>一种以获取最短回收停顿时间为目标的收集器 “标记-清除”，有 4 个过程：</p> \n<p>1）<strong>初始标记</strong>（仅标记一下GC Roots能直接关联到的对象；速度很快；但需要\"Stop The World\"；）<br> 2）<strong>并发标记</strong>（进行GC Roots Tracing的过程；刚才产生的集合中标记出存活对象；应用程序也在运行；并不能保证可以标记出所有的存活对象；）<br> 3）<strong>重新标记</strong>（为了修正并发标记期间因用户程序继续运作而导致标记变动的那一部分对象的标记记录；需要\"Stop The World\"，且停顿时间比初始标记稍长，但远比并发标记短；采用多线程并行执行来提升效率；）<br> 4）<strong>并发清除</strong> （回收所有的垃圾对象）。<br> <img src=\"https://img-blog.csdnimg.cn/20190612224706482.png\" alt=\"在这里插入图片描述\"><br> 优点：<font color=\"red\">并发收集，低停顿</font>；<br> 缺点：<br> 1）<font color=\"red\">不能处理浮动垃圾</font>，由于 cms 并发清除阶段，用户线程还在继续执行,伴随程序进行，还有新的垃圾产生，这一部分垃圾发生在标记之后，cms 无法在当次收集时处理他们，只能留到下一次gc。可能出现\"Concurrent Mode Failure\"失败。这时JVM启用后备预案：临时启用Serail Old收集器，而导致另一次Full GC的产生。<br> 2）<font color=\"red\">对cpu 资源敏感</font>。并发收集虽然不会暂停用户线程，但因为占用一部分CPU资源，还是会导致应用程序变慢，总吞吐量降低。cms <font color=\"red\">默认启动的回收线程数是（cpu 数量+3）/4</font>。当CPU数量多于4个，收集线程占用的CPU资源多于25%，对用户程序影响可能较大；不足4个时，影响更大，可能无法接受。<br> 3）<font color=\"red\">产生大量内存碎片</font> ，大对象分配困难，需要提前触发另一次Full GC动作。</p> \n<h2><a name=\"t27\"></a><a name=\"t27\"></a><a id=\"G1_271\"></a>G1</h2> \n<p>是一款面向服务端应用的商用垃圾收集器。具备四个特点：<br> 1）<font color=\"red\">并行与并发</font>：能充分利用多CPU、多核环境下的硬件优势；可以使用多个CPU并行来缩短\"Stop The World\"停顿时间；也可以并发让垃圾收集与用户程序同时进行。<br> 2）<font color=\"red\">分代收集</font>：能独立管理整个GC堆（新生代和老年代），而不需要与其他收集器搭配；能够采用不同方式处理不同时期的对象；虽然保留分代概念，但Java堆的内存布局有很大差别；将整个堆划分为多个大小相等的独立区域（Region）；新生代和老年代不再是物理隔离，它们都是一部分Region（不需要连续）的集合。<br> 3）<font color=\"red\">空间整合</font>，不产生碎片：从整体看，是基于标记-整理算法；从局部（两个Region间）看，是基于复制算法；都不会产生内存碎片，有利于长时间运行，不会提前触发一次GC。<br> 4）<font color=\"red\">可预测的停顿</font>：低停顿的同时实现高吞吐量；G1除了追求低停顿处，还能建立可预测的停顿时间模型；可以明确指定M毫秒时间片内，垃圾收集消耗的时间不超过N毫秒。</p> \n<h2><a name=\"t28\"></a><a name=\"t28\"></a><a id=\"GC_279\"></a>如何减少GC出现的次数：</h2> \n<ol><li>对象不用时显示置null。</li><li>少用System.gc()。</li><li>尽量少用静态变量。</li><li>尽量使用StringBuffer，而不用String累加字符串。</li><li>分散对象创建或删除的时间。</li><li>少用finalize函数。</li><li>如果需要使用经常用到的图片，可以使用软引用类型，它可以尽可能将图片保存在内存中，供程序调用，而不引起OOM。</li><li>能用基本类型就不用基本类型封装类。</li><li>增大-Xmx的值。</li></ol> \n<p>参考：<br> <a href=\"https://www.cnblogs.com/cing/p/8652081.html\">https://www.cnblogs.com/cing/p/8652081.html</a> (JVM的分区+查看GC对象是否存活+3种GC算法+7种垃圾收集器+如何减少GC次数)<br> <a href=\"http://www.it165.net/pro/html/201501/32890.html\">http://www.it165.net/pro/html/201501/32890.html</a><br> <a href=\"http://blog.csdn.net/ochangwen/article/details/51407574\">http://blog.csdn.net/ochangwen/article/details/51407574</a><br> <a href=\"http://blog.csdn.net/ochangwen/article/details/51407167\">http://blog.csdn.net/ochangwen/article/details/51407167</a><br> <a href=\"http://www.cnblogs.com/hnrainll/archive/2013/11/06/3410042.html\">http://www.cnblogs.com/hnrainll/archive/2013/11/06/3410042.html</a></p>\n                </div><div data-report-view=\"{&quot;mod&quot;:&quot;1585297308_001&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/mccand1234/article/details/52078645&quot;,&quot;extend1&quot;:&quot;pc&quot;,&quot;ab&quot;:&quot;new&quot;}\"><div></div></div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-ba784fbaf8.css\" rel=\"stylesheet\">\n        </div>"
  },
  {
    "category": "jvm",
    "qes": "volatile 关键字，你真的理解吗？",
    "ans": "<div class=\"Post-RichTextContainer\"><div class=\"RichText ztext Post-RichText\"><p>最近，在一篇文章中了解到了 volatile 关键字，在强烈的求知欲趋使下，我查阅了一些相关资料进行了学习，并将学习笔记记录如下，希望能给小伙伴们带来一些帮助。如果文章内容存在一些错误，也请小伙伴们指正，感谢。</p><p>这里先给大家分享一个我在 B 站发现的讲解 volitle 关键字的视频，有兴趣的同学可以认真看一下，挺不错的，我就是通过它进行的学习。</p><p>视频地址：<a href=\"https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1BJ411j7qb%3Ffrom%3Dsearch%26seid%3D7212869160158812321\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\"><span class=\"invisible\">https://www.</span><span class=\"visible\">bilibili.com/video/BV1B</span><span class=\"invisible\">J411j7qb?from=search&amp;seid=7212869160158812321</span><span class=\"ellipsis\"></span></a>。</p><h3>volatile 的作用</h3><p>大家都应该知道 volatile 的主要作用有两点： - 保证变量的内存可见性 - 禁止指令重排序</p><p>那么，什么是内存可见性，什么是指令重排序，以及它们涉及了那些机制呢？下面就让我们来看看吧。</p><p>在这里提醒一下，各位小伙伴要有个心理准备，就一个 volatile 关键字所涉及的知识点超乎你的想象哟。</p><h3>可见性问题</h3><p>在理解 volatile 的内存可见性前，我们先来看看这个比较常见的多线程访问共享变量的例子。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * 变量的内存可见性例子\n</span><span class=\"cm\"> *\n</span><span class=\"cm\"> * @author star\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">VolatileExample</span> <span class=\"o\">{</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * main 方法作为一个主线程\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">MyThread</span> <span class=\"n\">myThread</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">MyThread</span><span class=\"o\">();</span>\n        <span class=\"c1\">// 开启线程\n</span><span class=\"c1\"></span>        <span class=\"n\">myThread</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n\n        <span class=\"c1\">// 主线程执行\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"o\">(;</span> <span class=\"o\">;</span> <span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">myThread</span><span class=\"o\">.</span><span class=\"na\">isFlag</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"主线程访问到 flag 变量\"</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * 子线程类\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">class</span> <span class=\"nc\">MyThread</span> <span class=\"kd\">extends</span> <span class=\"n\">Thread</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"kt\">boolean</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">sleep</span><span class=\"o\">(</span><span class=\"n\">1000</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 修改变量值\n</span><span class=\"c1\"></span>        <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"flag = \"</span> <span class=\"o\">+</span> <span class=\"n\">flag</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isFlag</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">flag</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setFlag</span><span class=\"o\">(</span><span class=\"kt\">boolean</span> <span class=\"n\">flag</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">flag</span> <span class=\"o\">=</span> <span class=\"n\">flag</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p>执行上面的程序，你会发现，控制台永远都不会输出 <b>“主线程访问到 flag 变量”</b> 这句话。我们可以看到，子线程执行时已经将 flag 设置成 true，但主线程执行时没有读到 flag 的最新值，导致控制台没有输出上面的句子。</p><p>那么，我们思考一下为什么会出现这种情况呢？这里我们就要了解一下 Java 内存模型（简称 JMM）。</p><p><b>Java 内存模型</b></p><p>JMM（Java Memory Model）：Java 内存模型，是 Java 虚拟机规范中所定义的一种内存模型，Java 内存模型是标准化的，屏蔽掉了底层不同计算机的区别。也就是说，JMM 是 JVM 中定义的一种并发编程的底层模型机制。</p><p>JMM 定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存中，每个线程都有一个私有的本地内存，本地内存中存储了该线程以读/写共享变量的副本。</p><p>JMM 的规定：<br> - 所有的共享变量都存储于主内存。这里所说的变量指的是实例变量和类变量，不包含局部变量，因为局部变量是线程私有的，因此不存在竞争问题。</p><ul><li> 每一个线程还存在自己的工作内存，线程的工作内存，保留了被线程使用的变量的工作副本。<br> </li><li> 线程对变量的所有的操作（读，取）都必须在工作内存中完成，而不能直接读写主内存中的变量。<br> </li><li> 不同线程之间也不能直接访问对方工作内存中的变量，线程间变量的值的传递需要通过主内存中转来完成。<br> </li></ul><p>JMM 的抽象示意图： </p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3d312429710bd6a11eca171858f67751_b.jpg\" data-size=\"normal\" data-rawwidth=\"1156\" data-rawheight=\"678\" class=\"origin_image zh-lightbox-thumb\" width=\"1156\" data-original=\"https://pic2.zhimg.com/v2-3d312429710bd6a11eca171858f67751_r.jpg\"/></noscript><img src=\"https://pic2.zhimg.com/80/v2-3d312429710bd6a11eca171858f67751_720w.jpg\" data-size=\"normal\" data-rawwidth=\"1156\" data-rawheight=\"678\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1156\" data-original=\"https://pic2.zhimg.com/v2-3d312429710bd6a11eca171858f67751_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-3d312429710bd6a11eca171858f67751_b.jpg\" data-lazy-status=\"ok\"><figcaption>JMM 示意图</figcaption></figure><p>然而，JMM 这样的规定可能会导致线程对共享变量的修改没有即时更新到主内存，或者线程没能够即时将共享变量的最新值同步到工作内存中，从而使得线程在使用共享变量的值时，该值并不是最新的。</p><p><b>正因为 JMM 这样的机制，就出现了可见性问题。也就是我们上面那个例子出现的问题</b>。</p><p>那我们要如何解决可见性问题呢？接下来我们就聊聊内存可见性以及可见性问题的解决方案。</p><h3>内存可见性</h3><p>内存可见性是指当一个线程修改了某个变量的值，其它线程总是能知道这个变量变化。也就是说，如果线程 A 修改了共享变量 V 的值，那么线程 B 在使用 V 的值时，能立即读到 V 的最新值。</p><h3>可见性问题的解决方案</h3><p>我们如何保证多线程下共享变量的可见性呢？也就是当一个线程修改了某个值后，对其他线程是可见的。</p><p>这里有两种方案：<b>加锁</b> 和 <b>使用 volatile 关键字</b>。</p><p>下面我们使用这两个方案对上面的例子进行改造。</p><p><b>加锁</b></p><p>使用 synchronizer 进行加锁。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/**\n</span><span class=\"cm\">  * main 方法作为一个主线程\n</span><span class=\"cm\">  */</span>\n  <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">MyThread</span> <span class=\"n\">myThread</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">MyThread</span><span class=\"o\">();</span>\n      <span class=\"c1\">// 开启线程\n</span><span class=\"c1\"></span>      <span class=\"n\">myThread</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n\n      <span class=\"c1\">// 主线程执行\n</span><span class=\"c1\"></span>      <span class=\"k\">for</span> <span class=\"o\">(;</span> <span class=\"o\">;</span> <span class=\"o\">)</span> <span class=\"o\">{</span>\n          <span class=\"kd\">synchronized</span> <span class=\"o\">(</span><span class=\"n\">myThread</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n              <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">myThread</span><span class=\"o\">.</span><span class=\"na\">isFlag</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                  <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"主线程访问到 flag 变量\"</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n          <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n  <span class=\"o\">}</span></code></pre></div><p><b>这里大家应该有个疑问是，为什么加锁后就保证了变量的内存可见性了？</b> 因为当一个线程进入 synchronizer 代码块后，线程获取到锁，会清空本地内存，然后从主内存中拷贝共享变量的最新值到本地内存作为副本，执行代码，又将修改后的副本值刷新到主内存中，最后线程释放锁。</p><p>这里除了 synchronizer 外，其它锁也能保证变量的内存可见性。</p><p><b>使用 volatile 关键字</b></p><p>使用 volatile 关键字修饰共享变量。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * 子线程类\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">class</span> <span class=\"nc\">MyThread</span> <span class=\"kd\">extends</span> <span class=\"n\">Thread</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">volatile</span> <span class=\"kt\">boolean</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">sleep</span><span class=\"o\">(</span><span class=\"n\">1000</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 修改变量值\n</span><span class=\"c1\"></span>        <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"flag = \"</span> <span class=\"o\">+</span> <span class=\"n\">flag</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isFlag</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">flag</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setFlag</span><span class=\"o\">(</span><span class=\"kt\">boolean</span> <span class=\"n\">flag</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">flag</span> <span class=\"o\">=</span> <span class=\"n\">flag</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p>使用 volatile 修饰共享变量后，每个线程要操作变量时会从主内存中将变量拷贝到本地内存作为副本，当线程操作变量副本并写回主内存后，会通过 <b>CPU 总线嗅探机制</b>告知其他线程该变量副本已经失效，需要重新从主内存中读取。</p><p>volatile 保证了不同线程对共享变量操作的可见性，也就是说一个线程修改了 volatile 修饰的变量，当修改后的变量写回主内存时，其他线程能立即看到最新值。</p><p>接下来我们就聊聊一个比较底层的知识点：<code>总线嗅探机制</code>。</p><p><b>总线嗅探机制</b></p><p>在现代计算机中，CPU 的速度是极高的，如果 CPU 需要存取数据时都直接与内存打交道，在存取过程中，CPU 将一直空闲，这是一种极大的浪费，所以，为了提高处理速度，CPU 不直接和内存进行通信，而是在 CPU 与内存之间加入很多寄存器，多级缓存，它们比内存的存取速度高得多，这样就解决了 CPU 运算速度和内存读取速度不一致问题。</p><p>由于 CPU 与内存之间加入了缓存，在进行数据操作时，先将数据从内存拷贝到缓存中，CPU 直接操作的是缓存中的数据。但在多处理器下，将可能导致各自的缓存数据不一致（这也是可见性问题的由来），为了保证各个处理器的缓存是一致的，就会实现缓存一致性协议，而<b>嗅探是实现缓存一致性的常见机制</b>。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-77acfee471d8827a2121157c68f2485d_b.jpg\" data-size=\"normal\" data-rawwidth=\"1122\" data-rawheight=\"668\" class=\"origin_image zh-lightbox-thumb\" width=\"1122\" data-original=\"https://pic2.zhimg.com/v2-77acfee471d8827a2121157c68f2485d_r.jpg\"/></noscript><img src=\"https://pic2.zhimg.com/80/v2-77acfee471d8827a2121157c68f2485d_720w.jpg\" data-size=\"normal\" data-rawwidth=\"1122\" data-rawheight=\"668\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1122\" data-original=\"https://pic2.zhimg.com/v2-77acfee471d8827a2121157c68f2485d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-77acfee471d8827a2121157c68f2485d_b.jpg\" data-lazy-status=\"ok\"><figcaption>处理器内存模型</figcaption></figure><blockquote> 注意，缓存的一致性问题，不是多处理器导致，而是多缓存导致的。<br> </blockquote><p><b>嗅探机制工作原理</b>：每个处理器通过监听在总线上传播的数据来检查自己的缓存值是不是过期了，如果处理器发现自己缓存行对应的内存地址修改，就会将当前处理器的缓存行设置无效状态，当处理器对这个数据进行修改操作的时候，会重新从主内存中把数据读到处理器缓存中。</p><blockquote> 注意：基于 CPU 缓存一致性协议，JVM 实现了 volatile 的可见性，但由于总线嗅探机制，会不断的监听总线，如果大量使用 volatile 会引起总线风暴。所以，volatile 的使用要适合具体场景。<br> </blockquote><p><b>可见性问题小结</b></p><p>上面的例子中，我们看到，使用 volatile 和 synchronized 锁都可以保证共享变量的可见性。相比 synchronized 而言，volatile 可以看作是一个轻量级锁，所以使用 volatile 的成本更低，因为它不会引起线程上下文的切换和调度。但 volatile 无法像 synchronized 一样保证操作的原子性。</p><p>下面我们来聊聊 volatile 的原子性问题。</p><h3>volatile 的原子性问题</h3><p>所谓的原子性是指在一次操作或者多次操作中，要么所有的操作全部都得到了执行并且不会受到任何因素的干扰而中断，要么所有的操作都不执行。</p><p>在多线程环境下，volatile 关键字可以保证共享数据的可见性，但是并不能保证对数据操作的原子性。也就是说，多线程环境下，使用 volatile 修饰的变量是<b>线程不安全的</b>。</p><p>要解决这个问题，我们可以使用锁机制，或者使用原子类（如 AtomicInteger）。</p><p>这里特别说一下，对任意单个使用 volatile 修饰的变量的读 / 写是具有原子性，但类似于 <code>flag = !flag</code> 这种复合操作不具有原子性。简单地说就是，<b>单纯的赋值操作是原子性的</b>。</p><h3>禁止指令重排序</h3><p><b>什么是重排序？</b> </p><p>为了提高性能，在遵守 <code>as-if-serial</code> 语义（即不管怎么重排序，单线程下程序的执行结果不能被改变。编译器，runtime 和处理器都必须遵守。）的情况下，编译器和处理器常常会对指令做重排序。</p><p>一般重排序可以分为如下三种类型：</p><ul><li> 编译器优化重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。<br> </li><li> 指令级并行重排序。现代处理器采用了指令级并行技术来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。<br> </li><li> 内存系统重排序。由于处理器使用缓存和读 / 写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。  <br> </li></ul><blockquote> 数据依赖性：如果两个操作访问同一个变量，且这两个操作中有一个为写操作，此时这两个操作之间就存在数据依赖性。这里所说的数据依赖性仅针对单个处理器中执行的指令序列和单个线程中执行的操作，不同处理器之间和不同线程之间的数据依赖性不被编译器和处理器考虑。<br> </blockquote><p>从 Java 源代码到最终执行的指令序列，会分别经历下面三种重排序：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8655d85c8a9df1bc2262485248b07d4d_b.png\" data-size=\"normal\" data-rawwidth=\"1530\" data-rawheight=\"152\" class=\"origin_image zh-lightbox-thumb\" width=\"1530\" data-original=\"https://pic2.zhimg.com/v2-8655d85c8a9df1bc2262485248b07d4d_r.jpg\"/></noscript><img src=\"https://pic2.zhimg.com/80/v2-8655d85c8a9df1bc2262485248b07d4d_720w.png\" data-size=\"normal\" data-rawwidth=\"1530\" data-rawheight=\"152\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1530\" data-original=\"https://pic2.zhimg.com/v2-8655d85c8a9df1bc2262485248b07d4d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8655d85c8a9df1bc2262485248b07d4d_b.png\" data-lazy-status=\"ok\"><figcaption>重排序顺序</figcaption></figure><p>为了更好地理解重排序，请看下面的部分示例代码：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n<span class=\"c1\">// 线程 A\n</span><span class=\"c1\"></span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span>           <span class=\"c1\">// 1\n</span><span class=\"c1\"></span><span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>     <span class=\"c1\">// 2\n</span><span class=\"c1\"></span>\n<span class=\"c1\">// 线程 B\n</span><span class=\"c1\"></span><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">flag</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"c1\">// 3\n</span><span class=\"c1\"></span>  <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">;</span> <span class=\"c1\">// 4\n</span><span class=\"c1\"></span><span class=\"o\">}</span></code></pre></div><p>单看上面的程序好像没有问题，最后 i 的值是 1。但是为了提高性能，编译器和处理器常常会在不改变数据依赖的情况下对指令做重排序。假设线程 A 在执行时被重排序成先执行代码 2，再执行代码 1；而线程 B 在线程 A 执行完代码 2 后，读取了 flag 变量。由于条件判断为真，线程 B 将读取变量 a。此时，变量 a 还根本没有被线程 A 写入，那么 i 最后的值是 0，导致执行结果不正确。那么如何程序执行结果正确呢？这里仍然可以使用 volatile 关键字。</p><p>这个例子中， 使用 volatile 不仅保证了变量的内存可见性，还禁止了指令的重排序，即保证了 volatile 修饰的变量编译后的顺序与程序的执行顺序一样。那么使用 volatile 修饰 flag 变量后，在线程 A 中，保证了代码 1 的执行顺序一定在代码 2 之前。</p><p>那么，让我们继续往下探索， volatile 是如何禁止指令重排序的呢？这里我们将引出一个概念：<code>内存屏障指令</code></p><p><b>内存屏障指令</b></p><p>为了实现 volatile 内存语义（即内存可见性），JMM 会限制特定类型的编译器和处理器重排序。为此，JMM 针对编译器制定了 volatile 重排序规则表，如下所示：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5004d1364ef68f4d71a730f719570dcd_b.jpg\" data-size=\"normal\" data-rawwidth=\"653\" data-rawheight=\"109\" class=\"origin_image zh-lightbox-thumb\" width=\"653\" data-original=\"https://pic2.zhimg.com/v2-5004d1364ef68f4d71a730f719570dcd_r.jpg\"/></noscript><img src=\"https://pic2.zhimg.com/80/v2-5004d1364ef68f4d71a730f719570dcd_720w.jpg\" data-size=\"normal\" data-rawwidth=\"653\" data-rawheight=\"109\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"653\" data-original=\"https://pic2.zhimg.com/v2-5004d1364ef68f4d71a730f719570dcd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-5004d1364ef68f4d71a730f719570dcd_b.jpg\" data-lazy-status=\"ok\"><figcaption>volatile 重排序规则</figcaption></figure><p>使用 volatile 修饰变量时，根据 volatile 重排序规则表，Java 编译器在生成字节码时，会在指令序列中插入内存屏障指令来禁止特定类型的处理器重排序。</p><p><code>内存屏障</code>是一组处理器指令，它的作用是禁止指令重排序和解决内存可见性的问题。</p><p>JMM 把内存屏障指令分为下列四类：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a992d2e50fc353edb9027683bf62ee2b_b.jpg\" data-size=\"normal\" data-rawwidth=\"1932\" data-rawheight=\"748\" class=\"origin_image zh-lightbox-thumb\" width=\"1932\" data-original=\"https://pic4.zhimg.com/v2-a992d2e50fc353edb9027683bf62ee2b_r.jpg\"/></noscript><img src=\"https://pic4.zhimg.com/80/v2-a992d2e50fc353edb9027683bf62ee2b_720w.jpg\" data-size=\"normal\" data-rawwidth=\"1932\" data-rawheight=\"748\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1932\" data-original=\"https://pic4.zhimg.com/v2-a992d2e50fc353edb9027683bf62ee2b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-a992d2e50fc353edb9027683bf62ee2b_b.jpg\" data-lazy-status=\"ok\"><figcaption>内存屏障</figcaption></figure><blockquote> StoreLoad 屏障是一个全能型的屏障，它同时具有其他三个屏障的效果。所以执行该屏障开销会很大，因为它使处理器要把缓存中的数据全部刷新到内存中。<br> </blockquote><p>下面我们来看看 volatile  读 / 写时是如何插入内存屏障的，见下图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-fdead3feef1123c1c225826559def686_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1670\" data-rawheight=\"594\" class=\"origin_image zh-lightbox-thumb\" width=\"1670\" data-original=\"https://pic3.zhimg.com/v2-fdead3feef1123c1c225826559def686_r.jpg\"/></noscript><img src=\"https://pic3.zhimg.com/80/v2-fdead3feef1123c1c225826559def686_720w.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1670\" data-rawheight=\"594\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1670\" data-original=\"https://pic3.zhimg.com/v2-fdead3feef1123c1c225826559def686_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-fdead3feef1123c1c225826559def686_b.jpg\" data-lazy-status=\"ok\"></figure><p>从上图，我们可以知道 volatile 读 / 写插入内存屏障规则：</p><ul><li>在每个 volatile 读操作的后面插入 LoadLoad 屏障和 LoadStore 屏障。</li><li>在每个 volatile 写操作的前后分别插入一个 StoreStore 屏障和一个 StoreLoad 屏障。</li></ul><p>也就是说，编译器不会对 volatile 读与 volatile 读后面的任意内存操作重排序；编译器不会对 volatile 写与 volatile 写前面的任意内存操作重排序。</p><h3>happens-before 概述</h3><p>上面我们讲述了重排序原则，为了提高处理速度， JVM 会对代码进行编译优化，也就是指令重排序优化，但是并发编程下指令重排序也会带来一些安全隐患：如<b>指令重排序导致的多个线程操作之间的不可见性</b>。为了理解 JMM 提供的内存可见性保证，让程序员再去学习复杂的重排序规则以及这些规则的具体实现，那么程序员的负担就太重了，严重影响了并发编程的效率。</p><p>所以从 JDK5 开始，提出了 happens-before 的概念，通过这个概念来阐述操作之间的内存可见性。如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须存在 happens-before 关系。这里提到的两个操作既可以是在一个线程之内，也可以是在不同线程之间。 </p><p>happens-before 规则如下：</p><ul><li> 程序顺序规则：一个线程中的每个操作，happens-before 于该线程中的任意后续操作。<br> </li><li> 监视器锁规则：对一个监视器锁的解锁，happens-before 于随后对这个监视器锁的加锁。<br> </li><li> volatile 变量规则：对一个 volatile 域的写，happens-before 于任意后续对这个 volatile 域的读。<br> </li><li> 传递性：如果 A happens-before B，且 B happens-before C，那么 A happens-before C。<br> </li><li> start() 规则：Thread.start() 的调用会 happens-before 于启动线程里面的动作。<br> </li><li>join() 规则：Thread 中的所有动作都 happens-before 于其他线程从 Thread.join() 中成功返回。</li></ul><p>这里特别说明一下，happens-before 规则不是描述实际操作的先后顺序，它是用来描述可见性的一种规则。</p><p>从 happens-before 的 volatile 变量规则可知，如果线程 A 写入了 volatile 修饰的变量 V，接着线程 B 读取了变量 V，那么，线程 A 写入变量 V 及之前的写操作都对线程 B 可见。</p><h3>volatile 在单例模式中的应用</h3><p>单例模式有 8 种，而懒汉式单例双重检测模式中就使用到了 volatile 关键字。</p><p>代码如下：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Singleton</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// volatile 保证可见性和禁止指令重排序\n</span><span class=\"c1\"></span>    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">volatile</span> <span class=\"n\">Singleton</span> <span class=\"n\">singleton</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">Singleton</span> <span class=\"nf\">getInstance</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// 第一次检查\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">singleton</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n          <span class=\"c1\">// 同步代码块\n</span><span class=\"c1\"></span>          <span class=\"kd\">synchronized</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">getClass</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n              <span class=\"c1\">// 第二次检查\n</span><span class=\"c1\"></span>              <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">singleton</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"c1\">// 对象的实例化是一个非原子性操作\n</span><span class=\"c1\"></span>                    <span class=\"n\">singleton</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Singleton</span><span class=\"o\">();</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">singleton</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p>上面代码中， <code>new Singleton()</code> 是一个非原子性操作，对象实例化分为三步操作：（1）分配内存空间，（2）初始化实例，（3）返回内存地址给引用。所以，在使用构造器创建对象时，编译器可能会进行指令重排序。假设线程 A 在执行创建对象时，（2）和（3）进行了重排序，如果线程 B 在线程 A 执行（3）时拿到了引用地址，并在第一个检查中判断 singleton != null 了，但此时线程 B 拿到的不是一个完整的对象，在使用对象进行操作时就会出现问题。</p><p>所以，这里使用 volatile 修饰 singleton 变量，就是为了禁止在实例化对象时进行指令重排序。</p><h3>总结</h3><ul><li> volatile 修饰符适用于以下场景：某个属性被多个线程共享，其中有一个线程修改了此属性，其他线程可以立即得到修改后的值；或者作为状态变量，如 flag = ture，实现轻量级同步。 <br> </li><li> volatile 属性的读写操作都是无锁的，它不能替代 synchronized，因为它没有提供原子性和互斥性。因为无锁，不需要花费时间在获取锁和释放锁上，所以说它是低成本的。<br> </li><li> volatile 只能作用于属性，我们用 volatile 修饰属性，这样编译器就不会对这个属性做指令重排序。<br> </li><li> volatile 提供了可见性，任何一个线程对其的修改将立马对其他线程可见。volatile 属性不会被线程缓存，始终从主存中读取。<br> </li><li> volatile 提供了 happens-before 保证，对 volatile 变量 V 的写入 happens-before 所有其他线程后续对 V 的读操作。<br> </li><li> volatile 可以使纯赋值操作是原子的，如 <code>boolean flag = true; falg = false</code>。<br> </li><li> volatile 可以在单例双重检查中实现可见性和禁止指令重排序，从而保证安全性。<br> </li></ul><h3>参考</h3><p>happen-before 俗解：<a href=\"https://link.zhihu.com/?target=http%3A//ifeve.com/easy-happens-before/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\"><span class=\"invisible\">http://</span><span class=\"visible\">ifeve.com/easy-happens-</span><span class=\"invisible\">before/</span><span class=\"ellipsis\"></span></a></p><p>JMM Cookbook(一)指令重排：<a href=\"https://link.zhihu.com/?target=http%3A//ifeve.com/jmm-cookbook-reorderings/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\"><span class=\"invisible\">http://</span><span class=\"visible\">ifeve.com/jmm-cookbook-</span><span class=\"invisible\">reorderings/</span><span class=\"ellipsis\"></span></a></p><p>JMM Cookbook(二)内存屏障：<a href=\"https://link.zhihu.com/?target=http%3A//ifeve.com/jmm-cookbook-mb/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\"><span class=\"invisible\">http://</span><span class=\"visible\">ifeve.com/jmm-cookbook-</span><span class=\"invisible\">mb/</span><span class=\"ellipsis\"></span></a></p><p>深入理解 Java 内存模型（二）——重排序：<a href=\"https://link.zhihu.com/?target=https%3A//www.infoq.cn/article/java-memory-model-2/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\"><span class=\"invisible\">https://www.</span><span class=\"visible\">infoq.cn/article/java-m</span><span class=\"invisible\">emory-model-2/</span><span class=\"ellipsis\"></span></a></p><p>深入理解 Java 内存模型（四）——volatile：<a href=\"https://link.zhihu.com/?target=https%3A//www.infoq.cn/article/java-memory-model-4\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\"><span class=\"invisible\">https://www.</span><span class=\"visible\">infoq.cn/article/java-m</span><span class=\"invisible\">emory-model-4</span><span class=\"ellipsis\"></span></a></p><p>窥探真相：volatile 可见性实现原理：<a href=\"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000020909627\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\"><span class=\"invisible\">https://</span><span class=\"visible\">segmentfault.com/a/1190</span><span class=\"invisible\">000020909627</span><span class=\"ellipsis\"></span></a></p><div class=\"highlight\"><pre><code class=\"language-yaml\"><span class=\"l\">因为是个人学习笔记，难免存在一些错误或纰漏，也请小伙伴们指正。</span></code></pre></div><p></p></div></div>"
  },
  {
    "category": "jvm",
    "qes": "大对象或大数组存入老年代",
    "ans": "<div id=\"content_views\" class=\"htmledit_views\">\n                    <p>所谓的大对象是指，需要大量连续内存空间的<a href=\"https://www.2cto.com/kf/ware/Java/\">Java</a>对象，最典型的大对象就是那种很长的字符串以及数组（笔者列出的例子中的byte[]数组就是典型的大对象）。大对象对<a href=\"https://www.2cto.com/os/xuniji/\">虚拟机</a>的内存分配来说就是一个坏消息（替<a href=\"https://www.2cto.com/kf/ware/Java/\">Java</a><a href=\"https://www.2cto.com/os/xuniji/\">虚拟机</a>抱怨一句，比遇到一个大对象更加坏的消息就是遇到一群“朝生夕灭”的“短命大对象”，写程序的时候应当避免），经常出现大对象容易导致内存还有不少空间时就提前触发垃圾收集以获取足够的连续空间来“安置”它们。</p> \n<p>虚拟机提供了一个-XX:PretenureSizeThreshold参数，令大于这个设置值的对象直接在老年代分配。这样做的目的是避免在Eden区及两个Survivor区之间发生大量的内存复制（复习一下：新生代采用复制算法收集内存）。</p> \n<p>执行代码清单3-6中的testPretenureSizeThreshold()方法后，我们看到Eden空间几乎没有被使用，而老年代的10MB空间被使用了40%，也就是4MB的allocation对象直接就分配在老年代中，这是因为PretenureSizeThreshold被设置为3MB（就是3145728，这个参数不能像-Xmx之类的参数一样直接写3MB），因此超过3MB的对象都会直接在老年代进行分配。</p> \n<p>注意　PretenureSizeThreshold参数只对Serial和ParNew两款收集器有效，Parallel Scavenge收集器不认识这个参数，Parallel Scavenge收集器一般并不需要设置。如果遇到必须使用此参数的场合，可以考虑ParNew加CMS的收集器组合。</p> \n<p>代码清单3-6　大对象直接进入老年代<br> private static final int _1MB = 1024 * 1024;</p> \n<p>/**<br> &nbsp;* VM参数：-verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8<br> &nbsp;* -XX:PretenureSizeThreshold=3145728<br> &nbsp;*/<br> public static void testPretenureSizeThreshold() {<!-- --><br> &nbsp; byte[] allocation;<br> &nbsp; allocation = new byte[4 * _1MB];&nbsp; //直接分配在老年代中<br> }</p> \n<p>运行结果：<br> Heap<br> &nbsp;def new generation&nbsp;&nbsp; total 9216K, used 671K [0x029d0000, 0x033d0000, 0x033d0000)<br> &nbsp; eden space 8192K,&nbsp;&nbsp; 8% used [0x029d0000, 0x02a77e98, 0x031d0000)<br> &nbsp; from space 1024K,&nbsp;&nbsp; 0% used [0x031d0000, 0x031d0000, 0x032d0000)<br> &nbsp; to&nbsp;&nbsp; space 1024K,&nbsp;&nbsp; 0% used [0x032d0000, 0x032d0000, 0x033d0000)<br> &nbsp;tenured generation&nbsp;&nbsp; total 10240K, used 4096K [0x033d0000, 0x03dd0000, 0x03dd0000)<br> &nbsp;&nbsp; the space 10240K,&nbsp; 40% used [0x033d0000, 0x037d0010, 0x037d0200, 0x03dd0000)<br> &nbsp;compacting perm gen&nbsp; total 12288K, used 2107K [0x03dd0000, 0x049d0000, 0x07dd0000)<br> &nbsp;&nbsp; the space 12288K,&nbsp; 17% used [0x03dd0000, 0x03fdefd0, 0x03fdf000, 0x049d0000)<br> No shared spaces configured.</p>\n                </div>"
  },
  {
    "category": "jvm",
    "qes": "",
    "ans": ""
  },
  {
    "category": "jvm",
    "qes": "",
    "ans": ""
  },
  {
    "category": "jvm",
    "qes": "",
    "ans": ""
  },
  {
    "category": "jvm",
    "qes": "",
    "ans": ""
  },
  {
    "category": "jvm",
    "qes": "",
    "ans": ""
  },
  {
    "category": "jvm",
    "qes": "",
    "ans": ""
  },
  {
    "category": "jvm",
    "qes": "",
    "ans": ""
  },
  {
    "category": "jvm",
    "qes": "",
    "ans": ""
  }
]

