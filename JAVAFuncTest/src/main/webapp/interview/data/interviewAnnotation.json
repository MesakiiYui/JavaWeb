[
  {
  "category": "annotation",
  "qes": "annotation之@Autowired、@Inject、@Resource三者区别",
  "ans": "<div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"htmledit_views\">\n                    <div id=\"cnblogs_post_body\" class=\"blogpost-body\">\n <p><span style=\"font-size:18px;\"><strong>一、@Autowired</strong></span></p> \n <p>1、@Autowired是spring自带的注解，通过‘AutowiredAnnotationBeanPostProcessor’ 类实现的依赖注入；</p> \n <p>2、@Autowired是根据<span style=\"text-decoration:underline;\"><strong>类型</strong></span>进行自动装配的，如果需要按名称进行装配，则需要配合@Qualifier；</p> \n <p>3、@Autowired有个属性为required，可以配置为false，如果配置为false之后，当没有找到相应bean的时候，系统不会抛错；</p> \n <p>4、@Autowired可以作用在变量、setter方法、构造函数上。</p> \n <p>&nbsp;</p> \n <p><strong>a、</strong>将@autowored写在被注入的成员变量上，就不用再xml文件中配置了，在程序中去掉相应的setter和getter方法，</p> \n <p><img src=\"https://images2017.cnblogs.com/blog/1050601/201709/1050601-20170918174557790-464601387.png\" alt=\"\" width=\"665\" height=\"302\"></p> \n <p>&nbsp;</p> \n <p><strong>b、</strong>还可以写在构造方法上、setter方法上</p> \n <p><img src=\"https://images2017.cnblogs.com/blog/1050601/201709/1050601-20170918174913775-1543416020.png\" alt=\"\" width=\"703\" height=\"324\"></p> \n <p>&nbsp;</p> \n <p><strong>c、@Qualifier</strong></p> \n <p>@Qualifier(\"XXX\") 中的 XX是 Bean 的名称，所以 @Autowired 和 @Qualifier 结合使用时，自动注入的策略就从 byType 转变成 byName 了。</p> \n <p>不过需要注意的是@Autowired 可以对成员变量、方法以及构造函数进行注释，而 @Qualifier 的标注对象是成员变量、方法<strong>入参</strong>、构造函数<strong>入参</strong>。</p> \n <p><img src=\"https://images2017.cnblogs.com/blog/1050601/201709/1050601-20170919104417509-1542611034.png\" alt=\"\" width=\"707\" height=\"115\"></p> \n <p>&nbsp;</p> \n <p><span style=\"font-size:18px;\"><strong>二、@Inject</strong></span></p> \n <p>1、@Inject是JSR330 (Dependency Injection for Java)中的规范，需要导入javax.inject.Inject;实现注入。</p> \n <p>2、@Inject是根据<strong>类型</strong>进行自动装配的，如果需要按名称进行装配，则需要配合@Named；</p> \n <p>3、@Inject可以作用在变量、setter方法、构造函数上。</p> \n <p>&nbsp;</p> \n <p><strong>a、</strong>将@Inject可以作用在变量、setter方法、构造函数上，和@Autowired一样</p> \n <p><img src=\"https://images2017.cnblogs.com/blog/1050601/201709/1050601-20170919114448087-472523137.png\" alt=\"\" width=\"495\" height=\"254\"></p> \n <p>&nbsp;</p> \n <p><strong>b、@Named</strong></p> \n <p><strong>@<strong>Named</strong>(\"XXX\") 中的 XX是 Bean 的名称，所以 @<strong>Inject</strong>和 @<strong>Named</strong>结合使用时，自动注入的策略就从 byType 转变成 byName 了。</strong></p> \n <p><strong><img src=\"https://images2017.cnblogs.com/blog/1050601/201709/1050601-20170919114552321-1115699816.png\" alt=\"\" width=\"639\" height=\"279\"></strong></p> \n <p>&nbsp;</p> \n <p>&nbsp;</p> \n <p><span style=\"font-size:18px;\"><strong>三、@Resource</strong></span></p> \n <p>1、@Resource是JSR250规范的实现，需要导入javax.annotation实现注入。</p> \n <p>2、@Resource是根据<strong>名称</strong>进行自动装配的，一般会指定一个name属性</p> \n <p>3、@Resource可以作用在变量、setter方法上。</p> \n <p>&nbsp;</p> \n <p><strong>a、@Resource实例</strong></p> \n <p><img src=\"https://images2017.cnblogs.com/blog/1050601/201709/1050601-20170919131239493-922416028.png\" alt=\"\" width=\"509\" height=\"197\"></p> \n <p><strong>&nbsp;</strong></p> \n <p>&nbsp;</p> \n <p>&nbsp;</p> \n <p><span style=\"font-size:18px;\"><strong>总结：</strong></span></p> \n <p><span style=\"font-size:14px;\">1、@Autowired是spring自带的，@Inject是JSR330规范实现的，@Resource是JSR250规范实现的，需要导入不同的包</span></p> \n <p><span style=\"font-size:14px;\">2、@Autowired、@Inject用法基本一样，不同的是@Autowired有一个request属性</span></p> \n <p><span style=\"font-size:14px;\">3、@Autowired、@Inject是默认按照类型匹配的，@Resource是按照名称匹配的</span></p> \n <p><span style=\"font-size:14px;\">4、@Autowired如果需要按照名称匹配需要和@Qualifier一起使用，@Inject和@Name一起使用</span></p> \n <p>&nbsp;</p>\n</div> \n<p>转载于:https://www.cnblogs.com/pjfmeng/p/7551340.html</p>\n                </div><div><div></div></div>\n        </div>"
  },
  {
    "category": "annotation",
    "qes": "Spring中@Component与@Bean的区别",
    "ans": "<div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <p>Spring帮助我们管理Bean分为两个部分，一个是注册Bean，一个装配Bean。 <br> 完成这两个动作有三种方式，一种是使用自动配置的方式、一种是使用JavaConfig的方式，一种就是使用XML配置的方式。</p> \n<p>@Compent 作用就相当于 XML配置</p> \n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\">@Component\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> Student {\n\n    <span class=\"hljs-keyword\">private</span> String name = <span class=\"hljs-string\">\"lkm\"</span>;\n\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getName</span>() {\n        <span class=\"hljs-keyword\">return</span> name;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setName</span>(String name) {\n        <span class=\"hljs-keyword\">this</span>.name = name;\n    }\n}<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li></ul></pre> \n<p>@Bean 需要在配置类中使用，即类上需要加上@Configuration注解</p> \n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs java has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\">\n<span class=\"hljs-annotation\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">WebSocketConfig</span> {<!-- --></span>\n    <span class=\"hljs-annotation\">@Bean</span>\n    <span class=\"hljs-keyword\">public</span> Student <span class=\"hljs-title\">student</span>(){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Student();\n    }\n\n}\n<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li></ul></pre> \n<p>两者都可以通过@Autowired装配</p> \n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs css has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\"><span class=\"hljs-at_rule\">@<span class=\"hljs-keyword\">Autowired</span>\nStudent student</span>;<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li></ul></pre> \n<p>那为什么有了@Compent,还需要@Bean呢？ <br> 如果你想要将第三方库中的组件装配到你的应用中，在这种情况下，是没有办法在它的类上添加@Component注解的，因此就不能使用自动化装配的方案了，但是我们可以使用@Bean,当然也可以使用XML配置。</p>\n                </div><div data-report-view=\"{&quot;mod&quot;:&quot;1585297308_001&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/qq_38534144/article/details/82414201&quot;,&quot;extend1&quot;:&quot;pc&quot;,&quot;ab&quot;:&quot;new&quot;}\"><div></div></div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-ba784fbaf8.css\" rel=\"stylesheet\">\n        </div>"
  },
  {
    "category": "annotation",
    "qes": "spring中scope作用域",
    "ans": "<div id=\"post_detail\">\n<div class=\"post\">\n\t<div class=\"postTitle\">\n\t\t<h1>\n<a id=\"cb_post_title_url\" class=\"postTitle2 vertical-middle\" href=\"https://www.cnblogs.com/qq78292959/p/3716827.html\">\n    <span>spring中scope作用域(转)</span>\n    \n\n\n</a>\n</h1>\n\t</div>\n\t\n<div id=\"cnblogs_post_body\" class=\"blogpost-body\">\n    <p>今天研究了一下scope的作用域。默认是单例模式，即scope=\"singleton\"。另外scope还有prototype、request、session、global session作用域。scope=\"prototype\"多例。再配置bean的作用域时，它的头文件形式如下：</p>\n<div><span>如何使用spring的作用域：</span></div>\n<div>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: rgba(0, 0, 255, 1)\">&lt;</span><span style=\"color: rgba(128, 0, 0, 1)\">bean </span><span style=\"color: rgba(255, 0, 0, 1)\">id</span><span style=\"color: rgba(0, 0, 255, 1)\">=\"role\"</span><span style=\"color: rgba(255, 0, 0, 1)\"> class</span><span style=\"color: rgba(0, 0, 255, 1)\">=\"spring.chapter2.maryGame.Role\"</span><span style=\"color: rgba(255, 0, 0, 1)\"> scope</span><span style=\"color: rgba(0, 0, 255, 1)\">=\"singleton\"</span><span style=\"color: rgba(0, 0, 255, 1)\">/&gt;</span></pre>\n</div>\n<p><span>这里的</span>&nbsp;<span>scope</span>&nbsp;<span>就是用来配置</span>&nbsp;<span>spring bean</span>&nbsp;<span>的作用域，它标识</span>&nbsp;<span>bean</span>&nbsp;<span>的作用域。</span></p>\n<div>在spring2.0之前bean只有2种作用域即：singleton(单例)、non-singleton（也称 prototype）, Spring2.0以后，增加了session、request、global session三种专用于Web应用程序上下文的Bean。因此，默认情况下Spring2.0现在有五种类型的Bean。当然，Spring2.0对 Bean的类型的设计进行了重构，并设计出灵活的Bean类型支持，理论上可以有无数多种类型的Bean，用户可以根据自己的需要，增加新的Bean类 型，满足实际应用需求。</div>\n<div>1、singleton&nbsp;<span>作用域</span></div>\n<div>当一个bean的&nbsp;<span>作用域</span>设置为singleton, 那么Spring IOC容器中只会存在一个共享的bean实例，并且所有对bean的请求，只要id与该bean定义相匹配，则只会返回bean的同一实例。换言之，当把 一个bean定义设置为singleton作用域时，Spring IOC容器只会创建该bean定义的唯一实例。这个单一实例会被存储到单例缓存（singleton cache）中，并且所有针对该bean的后续请求和引用都 将返回被缓存的对象实例，这里要注意的是singleton作用域和GOF设计模式中的单例是完全不同的，单例设计模式表示一个ClassLoader中 只有一个class存在，而这里的singleton则表示一个容器对应一个bean，也就是说当一个bean被标识为singleton时 候，spring的IOC容器中只会存在一个该bean。</div>\n<div>配置实例：&nbsp;</div>\n<div>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: rgba(0, 0, 255, 1)\">&lt;</span><span style=\"color: rgba(128, 0, 0, 1)\">bean </span><span style=\"color: rgba(255, 0, 0, 1)\">id</span><span style=\"color: rgba(0, 0, 255, 1)\">=\"role\"</span><span style=\"color: rgba(255, 0, 0, 1)\"> class</span><span style=\"color: rgba(0, 0, 255, 1)\">=\"spring.chapter2.maryGame.Role\"</span><span style=\"color: rgba(255, 0, 0, 1)\"> scope</span><span style=\"color: rgba(0, 0, 255, 1)\">=\"singleton\"</span><span style=\"color: rgba(0, 0, 255, 1)\">/&gt;</span><span style=\"color: rgba(0, 0, 0, 1)\">\n或者\n</span><span style=\"color: rgba(0, 0, 255, 1)\">&lt;</span><span style=\"color: rgba(128, 0, 0, 1)\">bean </span><span style=\"color: rgba(255, 0, 0, 1)\">id</span><span style=\"color: rgba(0, 0, 255, 1)\">=\"role\"</span><span style=\"color: rgba(255, 0, 0, 1)\"> class</span><span style=\"color: rgba(0, 0, 255, 1)\">=\"spring.chapter2.maryGame.Role\"</span><span style=\"color: rgba(255, 0, 0, 1)\"> singleton</span><span style=\"color: rgba(0, 0, 255, 1)\">=\"true\"</span><span style=\"color: rgba(0, 0, 255, 1)\">/&gt;</span></pre>\n</div>\n<p>2、prototype</p>\n<div>prototype作用域部署的bean，每一次请求（将其注入到另一个bean中，或者以程序的方式调用容器的&nbsp;<span><span>getBean()</span></span>方法）都会产生一个新的bean实例，相当与一个new的操作，对于prototype作用域的bean，有一点非常重要，那就是Spring不能对一个prototype bean的整个生命周期负责，容器在初始化、配置、装饰或者是装配完一个prototype实例后，将它交给客户端，随后就对该prototype实例不闻不问了。不管何种作用域，容器都会调用所有对象的初始化生命周期回调方法，而对prototype而言，任何配置好的析构生命周期回调方法都将不会被调用。 清除prototype作用域的对象并释放任何prototype bean所持有的昂贵资源，都是客户端代码的职责。（让Spring容器释放被singleton作用域bean占用资源的一种可行方式是，通过使用 bean的后置处理器，该处理器持有要被清除的bean的引用。）</div>\n<div>配置实例：&nbsp;</div>\n<div>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: rgba(0, 0, 255, 1)\">&lt;</span><span style=\"color: rgba(128, 0, 0, 1)\">bean </span><span style=\"color: rgba(255, 0, 0, 1)\">id</span><span style=\"color: rgba(0, 0, 255, 1)\">=\"role\"</span><span style=\"color: rgba(255, 0, 0, 1)\"> class</span><span style=\"color: rgba(0, 0, 255, 1)\">=\"spring.chapter2.maryGame.Role\"</span><span style=\"color: rgba(255, 0, 0, 1)\"> scope</span><span style=\"color: rgba(0, 0, 255, 1)\">=\"prototype\"</span><span style=\"color: rgba(0, 0, 255, 1)\">/&gt;</span><span style=\"color: rgba(0, 0, 0, 1)\">\n或者\n</span><span style=\"color: rgba(0, 0, 255, 1)\">&lt;</span><span style=\"color: rgba(128, 0, 0, 1)\">beanid</span><span style=\"color: rgba(0, 0, 255, 1)\">=\"role\"</span><span style=\"color: rgba(255, 0, 0, 1)\"> class</span><span style=\"color: rgba(0, 0, 255, 1)\">=\"spring.chapter2.maryGame.Role\"</span><span style=\"color: rgba(255, 0, 0, 1)\"> singleton</span><span style=\"color: rgba(0, 0, 255, 1)\">=\"false\"</span><span style=\"color: rgba(0, 0, 255, 1)\">/&gt;</span></pre>\n</div>\n<p>3、request</p>\n<div>request表示该针对每一次HTTP请求都会产生一个新的bean，同时该bean仅在当前HTTP request内有效，配置实例：</div>\n<div>request、session、global session使用的时候首先要在初始化web的web.xml中做如下配置：</div>\n<div>如果你使用的是Servlet 2.4及以上的web容器，那么你仅需要在web应用的XML声明文件web.xml中增加下述ContextListener即可：&nbsp;</div>\n<div>\n<div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div>\n<pre><span style=\"color: rgba(0, 0, 255, 1)\">&lt;</span><span style=\"color: rgba(128, 0, 0, 1)\">web-app</span><span style=\"color: rgba(0, 0, 255, 1)\">&gt;</span><span style=\"color: rgba(0, 0, 0, 1)\">\n   ...\n  </span><span style=\"color: rgba(0, 0, 255, 1)\">&lt;</span><span style=\"color: rgba(128, 0, 0, 1)\">listener</span><span style=\"color: rgba(0, 0, 255, 1)\">&gt;</span>\n<span style=\"color: rgba(0, 0, 255, 1)\">&lt;</span><span style=\"color: rgba(128, 0, 0, 1)\">listener-class</span><span style=\"color: rgba(0, 0, 255, 1)\">&gt;</span>org.springframework.web.context.request.RequestContextListener<span style=\"color: rgba(0, 0, 255, 1)\">&lt;/</span><span style=\"color: rgba(128, 0, 0, 1)\">listener-class</span><span style=\"color: rgba(0, 0, 255, 1)\">&gt;</span>\n  <span style=\"color: rgba(0, 0, 255, 1)\">&lt;/</span><span style=\"color: rgba(128, 0, 0, 1)\">listener</span><span style=\"color: rgba(0, 0, 255, 1)\">&gt;</span><span style=\"color: rgba(0, 0, 0, 1)\">\n   ...\n</span><span style=\"color: rgba(0, 0, 255, 1)\">&lt;/</span><span style=\"color: rgba(128, 0, 0, 1)\">web-app</span><span style=\"color: rgba(0, 0, 255, 1)\">&gt;</span></pre>\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div>\n<p><span>如果是Servlet2.4以前的web容器,那么你要使用一个javax.servlet.Filter的实现：&nbsp;</span></p>\n<div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div>\n<pre><span style=\"color: rgba(0, 0, 255, 1)\">&lt;</span><span style=\"color: rgba(128, 0, 0, 1)\">web-app</span><span style=\"color: rgba(0, 0, 255, 1)\">&gt;</span><span style=\"color: rgba(0, 0, 0, 1)\">\n ..\n </span><span style=\"color: rgba(0, 0, 255, 1)\">&lt;</span><span style=\"color: rgba(128, 0, 0, 1)\">filter</span><span style=\"color: rgba(0, 0, 255, 1)\">&gt;</span> \n    <span style=\"color: rgba(0, 0, 255, 1)\">&lt;</span><span style=\"color: rgba(128, 0, 0, 1)\">filter-name</span><span style=\"color: rgba(0, 0, 255, 1)\">&gt;</span>requestContextFilter<span style=\"color: rgba(0, 0, 255, 1)\">&lt;/</span><span style=\"color: rgba(128, 0, 0, 1)\">filter-name</span><span style=\"color: rgba(0, 0, 255, 1)\">&gt;</span> \n    <span style=\"color: rgba(0, 0, 255, 1)\">&lt;</span><span style=\"color: rgba(128, 0, 0, 1)\">filter-class</span><span style=\"color: rgba(0, 0, 255, 1)\">&gt;</span>org.springframework.web.filter.RequestContextFilter<span style=\"color: rgba(0, 0, 255, 1)\">&lt;/</span><span style=\"color: rgba(128, 0, 0, 1)\">filter-class</span><span style=\"color: rgba(0, 0, 255, 1)\">&gt;</span>\n <span style=\"color: rgba(0, 0, 255, 1)\">&lt;/</span><span style=\"color: rgba(128, 0, 0, 1)\">filter</span><span style=\"color: rgba(0, 0, 255, 1)\">&gt;</span> \n <span style=\"color: rgba(0, 0, 255, 1)\">&lt;</span><span style=\"color: rgba(128, 0, 0, 1)\">filter-mapping</span><span style=\"color: rgba(0, 0, 255, 1)\">&gt;</span> \n    <span style=\"color: rgba(0, 0, 255, 1)\">&lt;</span><span style=\"color: rgba(128, 0, 0, 1)\">filter-name</span><span style=\"color: rgba(0, 0, 255, 1)\">&gt;</span>requestContextFilter<span style=\"color: rgba(0, 0, 255, 1)\">&lt;/</span><span style=\"color: rgba(128, 0, 0, 1)\">filter-name</span><span style=\"color: rgba(0, 0, 255, 1)\">&gt;</span> \n    <span style=\"color: rgba(0, 0, 255, 1)\">&lt;</span><span style=\"color: rgba(128, 0, 0, 1)\">url-pattern</span><span style=\"color: rgba(0, 0, 255, 1)\">&gt;</span>/*<span style=\"color: rgba(0, 0, 255, 1)\">&lt;/</span><span style=\"color: rgba(128, 0, 0, 1)\">url-pattern</span><span style=\"color: rgba(0, 0, 255, 1)\">&gt;</span>\n <span style=\"color: rgba(0, 0, 255, 1)\">&lt;/</span><span style=\"color: rgba(128, 0, 0, 1)\">filter-mapping</span><span style=\"color: rgba(0, 0, 255, 1)\">&gt;</span><span style=\"color: rgba(0, 0, 0, 1)\">\n   ...\n</span><span style=\"color: rgba(0, 0, 255, 1)\">&lt;/</span><span style=\"color: rgba(128, 0, 0, 1)\">web-app</span><span style=\"color: rgba(0, 0, 255, 1)\">&gt;</span></pre>\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div>\n<p><span>接着既可以配置bean的作用域了：&nbsp;</span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: rgba(0, 0, 255, 1)\">&lt;</span><span style=\"color: rgba(128, 0, 0, 1)\">bean </span><span style=\"color: rgba(255, 0, 0, 1)\">id</span><span style=\"color: rgba(0, 0, 255, 1)\">=\"role\"</span><span style=\"color: rgba(255, 0, 0, 1)\"> class</span><span style=\"color: rgba(0, 0, 255, 1)\">=\"spring.chapter2.maryGame.Role\"</span><span style=\"color: rgba(255, 0, 0, 1)\"> scope</span><span style=\"color: rgba(0, 0, 255, 1)\">=\"request\"</span><span style=\"color: rgba(0, 0, 255, 1)\">/&gt;</span></pre>\n</div>\n<p>4、session</p>\n<div>session作用域表示该针对每一次HTTP请求都会产生一个新的bean，同时该bean仅在当前HTTP session内有效，配置实例：</div>\n<div>配置实例：</div>\n<div>和request配置实例的前提一样，配置好web启动文件就可以如下配置：&nbsp;</div>\n<div>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: rgba(0, 0, 255, 1)\">&lt;</span><span style=\"color: rgba(128, 0, 0, 1)\">bean </span><span style=\"color: rgba(255, 0, 0, 1)\">id</span><span style=\"color: rgba(0, 0, 255, 1)\">=\"role\"</span><span style=\"color: rgba(255, 0, 0, 1)\"> class</span><span style=\"color: rgba(0, 0, 255, 1)\">=\"spring.chapter2.maryGame.Role\"</span><span style=\"color: rgba(255, 0, 0, 1)\"> scope</span><span style=\"color: rgba(0, 0, 255, 1)\">=\"session\"</span><span style=\"color: rgba(0, 0, 255, 1)\">/&gt;</span></pre>\n</div>\n<p>5、global session</p>\n<div>global session作用域类似于标准的HTTP Session作用域，不过它仅仅在基于portlet的web应用中才有意义。Portlet规范定义了全局Session的概念，它被所有构成某个 portlet web应用的各种不同的portlet所共享。在global session作用域中定义的bean被限定于全局portlet Session的生命周期范围内。如果你在web中使用global session作用域来标识bean，那么web会自动当成session类型来使用。</div>\n<div>配置实例：</div>\n<div>和request配置实例的前提一样，配置好web启动文件就可以如下配置：&nbsp;</div>\n<div>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: rgba(0, 0, 255, 1)\">&lt;</span><span style=\"color: rgba(128, 0, 0, 1)\">bean </span><span style=\"color: rgba(255, 0, 0, 1)\">id</span><span style=\"color: rgba(0, 0, 255, 1)\">=\"role\"</span><span style=\"color: rgba(255, 0, 0, 1)\"> class</span><span style=\"color: rgba(0, 0, 255, 1)\">=\"spring.chapter2.maryGame.Role\"</span><span style=\"color: rgba(255, 0, 0, 1)\"> scope</span><span style=\"color: rgba(0, 0, 255, 1)\">=\"global session\"</span><span style=\"color: rgba(0, 0, 255, 1)\">/&gt;</span></pre>\n</div>\n<p>&nbsp;</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"MySignature\"></div>\n<div class=\"clear\"></div>\n<div id=\"blog_post_info_block\"><div id=\"BlogPostCategory\">\n    分类: \n            <a href=\"https://www.cnblogs.com/qq78292959/category/426908.html\" target=\"_blank\">java</a>,             <a href=\"https://www.cnblogs.com/qq78292959/category/577528.html\" target=\"_blank\">Spring</a></div>\n\n\n    <div id=\"blog_post_info\">\n<div id=\"green_channel\">\n        <a href=\"javascript:void(0);\" id=\"green_channel_digg\" onclick=\"DiggIt(3716827,cb_blogId,1);green_channel_success(this,'谢谢推荐！');\">好文要顶</a>\n        <a id=\"green_channel_follow\" onclick=\"follow('3ab20756-6392-e011-a53f-842b2b196315');\" href=\"javascript:void(0);\">关注我</a>\n    <a id=\"green_channel_favorite\" onclick=\"AddToWz(cb_entryId);return false;\" href=\"javascript:void(0);\">收藏该文</a>\n    <a id=\"green_channel_weibo\" href=\"javascript:void(0);\" title=\"分享至新浪微博\" onclick=\"ShareToTsina()\"><img src=\"https://common.cnblogs.com/images/icon_weibo_24.png\" alt=\"\"></a>\n    <a id=\"green_channel_wechat\" href=\"javascript:void(0);\" title=\"分享至微信\" onclick=\"shareOnWechat()\"><img src=\"https://common.cnblogs.com/images/wechat.png\" alt=\"\"></a>\n</div>\n<div id=\"author_profile\">\n    <div id=\"author_profile_info\" class=\"author_profile_info\">\n            <a href=\"https://home.cnblogs.com/u/qq78292959/\" target=\"_blank\"><img src=\"https://pic.cnblogs.com/face/sample_face.gif\" class=\"author_avatar\" alt=\"\"></a>\n        <div id=\"author_profile_detail\" class=\"author_profile_info\">\n            <a href=\"https://home.cnblogs.com/u/qq78292959/\">一个人的天空@</a><br>\n            <a href=\"https://home.cnblogs.com/u/qq78292959/followees/\">关注 - 2</a><br>\n            <a href=\"https://home.cnblogs.com/u/qq78292959/followers/\">粉丝 - 778</a>\n        </div>\n    </div>\n    <div class=\"clear\"></div>\n    <div id=\"author_profile_honor\"></div>\n    <div id=\"author_profile_follow\">\n                <a href=\"javascript:void(0);\" onclick=\"follow('3ab20756-6392-e011-a53f-842b2b196315');return false;\">+加关注</a>\n    </div>\n</div>\n<div id=\"div_digg\">\n    <div class=\"diggit\" onclick=\"votePost(3716827,'Digg')\">\n        <span class=\"diggnum\" id=\"digg_count\">8</span>\n    </div>\n    <div class=\"buryit\" onclick=\"votePost(3716827,'Bury')\">\n        <span class=\"burynum\" id=\"bury_count\">0</span>\n    </div>\n    <div class=\"clear\"></div>\n    <div class=\"diggword\" id=\"digg_tips\">\n    </div>\n</div>\n\n<script type=\"text/javascript\">\n    currentDiggType = 0;\n</script></div>\n    <div class=\"clear\"></div>\n    <div id=\"post_next_prev\">\n\n    <a href=\"https://www.cnblogs.com/qq78292959/p/3716619.html\" class=\"p_n_p_prefix\">« </a> 上一篇：    <a href=\"https://www.cnblogs.com/qq78292959/p/3716619.html\" title=\"发布于 2014-05-08 17:16\">Spring &lt;context:annotation-config/&gt; 解说(转)</a>\n    <br>\n    <a href=\"https://www.cnblogs.com/qq78292959/p/3718662.html\" class=\"p_n_p_prefix\">» </a> 下一篇：    <a href=\"https://www.cnblogs.com/qq78292959/p/3718662.html\" title=\"发布于 2014-05-09 12:28\">控制反转和依赖注入模式(转)</a>\n\n</div>\n</div>\n\t<div class=\"postDesc\">posted on \n<span id=\"post-date\">2014-05-08 19:11</span>&nbsp;\n<a href=\"https://www.cnblogs.com/qq78292959/\">一个人的天空@</a>&nbsp;\n阅读(<span id=\"post_view_count\">101788</span>)&nbsp;\n评论(<span id=\"post_comment_count\">5</span>)&nbsp;\n<a href=\"https://i.cnblogs.com/EditPosts.aspx?postid=3716827\" rel=\"nofollow\">编辑</a>&nbsp;\n<a href=\"javascript:void(0)\" onclick=\"AddToWz(3716827);return false;\">收藏</a></div>\n</div>\n\n\n<script src=\"https://common.cnblogs.com/highlight/10.3.1/highlight.min.js\"></script>\n<script>markdown_highlight();</script>\n<script>\n    var allowComments = true, cb_blogId = 90670, cb_blogApp = 'qq78292959', cb_blogUserGuid = '3ab20756-6392-e011-a53f-842b2b196315';\n    var cb_entryId = 3716827, cb_entryCreatedDate = '2014-05-08 19:11', cb_postType = 1;\n    updatePostStats(\n        [cb_entryId],\n        function(id, count) { $(\"#post_view_count\").text(count) },\n        function(id, count) { $(\"#post_comment_count\").text(count) })\n</script>\n<a name=\"!comments\"></a>\n<div id=\"blog-comments-placeholder\">\n\n<div id=\"comment_pager_top\">\n    \n</div>\n\n<!--done-->\n<br>\n<div class=\"feedback_area_title\">发表评论</div>\n<div class=\"feedbackNoItems\">\n\t<div class=\"feedbackNoItems\"></div>\n</div>\n\n\t<div class=\"feedbackItem\">\n\t\t<div class=\"feedbackListSubtitle\">\n\t\t\t<div class=\"feedbackManage\">\n\t\t\t\t&nbsp;&nbsp;\n\n<span class=\"comment_actions\">\n    \n    \n    \n    \n</span>\n\n\n\t\t\t</div>\n\t\t\t\n<a href=\"#3623442\" class=\"layer\">#1楼</a>\n<a name=\"3623442\" id=\"comment_anchor_3623442\"></a>\n \n<span class=\"comment_date\">2017-02-21 22:22</span>\n\n | \n        <a id=\"a_comment_author_3623442\" href=\"https://www.cnblogs.com/1102whw/\" target=\"_blank\">学计算机的人绝不认输</a>\n\n\t\t</div>\n\t\t<div class=\"feedbackCon\">\n\t\t\t\n<div id=\"comment_body_3623442\" data-format-type=\"Ubb\" class=\"blog_comment_body cnblogs-ubb\">\n    你这篇文章写的很好啊\n</div>\n        <div class=\"comment_vote\">\n            <span class=\"comment_error\" style=\"color: red\"></span>\n            <a href=\"javascript:void(0);\" class=\"comment_digg\" onclick=\"return voteComment(3623442, 'Digg', this.parentElement, false);\">\n                支持(1)\n            </a>\n            <a href=\"javascript:void(0);\" class=\"comment_burry\" onclick=\"return voteComment(3623442, 'Bury', this.parentElement, false);\">\n                反对(0)\n            </a>\n        </div>\n        <span id=\"comment_3623442_avatar\" style=\"display:none\">\n            https://pic.cnblogs.com/face/782554/20171122160644.png\n        </span>\n\n\t\t</div>\n\t</div>\n\t<div class=\"feedbackItem\">\n\t\t<div class=\"feedbackListSubtitle\">\n\t\t\t<div class=\"feedbackManage\">\n\t\t\t\t&nbsp;&nbsp;\n\n<span class=\"comment_actions\">\n    \n    \n    \n    \n</span>\n\n\n\t\t\t</div>\n\t\t\t\n<a href=\"#3634372\" class=\"layer\">#2楼</a>\n<a name=\"3634372\" id=\"comment_anchor_3634372\"></a>\n \n<span class=\"comment_date\">2017-03-07 23:35</span>\n\n | \n        <a id=\"a_comment_author_3634372\" href=\"https://www.cnblogs.com/wuzhao-code/\" target=\"_blank\">程序员-无招</a>\n\n\t\t</div>\n\t\t<div class=\"feedbackCon\">\n\t\t\t\n<div id=\"comment_body_3634372\" data-format-type=\"Ubb\" class=\"blog_comment_body cnblogs-ubb\">\n    好文章。。。\n</div>\n        <div class=\"comment_vote\">\n            <span class=\"comment_error\" style=\"color: red\"></span>\n            <a href=\"javascript:void(0);\" class=\"comment_digg\" onclick=\"return voteComment(3634372, 'Digg', this.parentElement, false);\">\n                支持(0)\n            </a>\n            <a href=\"javascript:void(0);\" class=\"comment_burry\" onclick=\"return voteComment(3634372, 'Bury', this.parentElement, false);\">\n                反对(0)\n            </a>\n        </div>\n        <span id=\"comment_3634372_avatar\" style=\"display:none\">\n            https://pic.cnblogs.com/face/1078094/20161209155737.png\n        </span>\n\n\t\t</div>\n\t</div>\n\t<div class=\"feedbackItem\">\n\t\t<div class=\"feedbackListSubtitle\">\n\t\t\t<div class=\"feedbackManage\">\n\t\t\t\t&nbsp;&nbsp;\n\n<span class=\"comment_actions\">\n    \n    \n    \n    \n</span>\n\n\n\t\t\t</div>\n\t\t\t\n<a href=\"#3702137\" class=\"layer\">#3楼</a>\n<a name=\"3702137\" id=\"comment_anchor_3702137\"></a>\n \n<span class=\"comment_date\">2017-05-27 11:19</span>\n\n | \n        <a id=\"a_comment_author_3702137\" href=\"https://www.cnblogs.com/liuwanhui/\" target=\"_blank\">柚子丶</a>\n\n\t\t</div>\n\t\t<div class=\"feedbackCon\">\n\t\t\t\n<div id=\"comment_body_3702137\" data-format-type=\"Ubb\" class=\"blog_comment_body cnblogs-ubb\">\n    很不错\n</div>\n        <div class=\"comment_vote\">\n            <span class=\"comment_error\" style=\"color: red\"></span>\n            <a href=\"javascript:void(0);\" class=\"comment_digg\" onclick=\"return voteComment(3702137, 'Digg', this.parentElement, false);\">\n                支持(0)\n            </a>\n            <a href=\"javascript:void(0);\" class=\"comment_burry\" onclick=\"return voteComment(3702137, 'Bury', this.parentElement, false);\">\n                反对(0)\n            </a>\n        </div>\n        \n\n\t\t</div>\n\t</div>\n\t<div class=\"feedbackItem\">\n\t\t<div class=\"feedbackListSubtitle\">\n\t\t\t<div class=\"feedbackManage\">\n\t\t\t\t&nbsp;&nbsp;\n\n<span class=\"comment_actions\">\n    \n    \n    \n    \n</span>\n\n\n\t\t\t</div>\n\t\t\t\n<a href=\"#3769089\" class=\"layer\">#4楼</a>\n<a name=\"3769089\" id=\"comment_anchor_3769089\"></a>\n \n<span class=\"comment_date\">2017-08-29 09:26</span>\n\n | \n        <a id=\"a_comment_author_3769089\" href=\"https://www.cnblogs.com/lizhenlzlz/\" target=\"_blank\">lizhenlzlz</a>\n\n\t\t</div>\n\t\t<div class=\"feedbackCon\">\n\t\t\t\n<div id=\"comment_body_3769089\" data-format-type=\"Ubb\" class=\"blog_comment_body cnblogs-ubb\">\n    看过\n</div>\n        <div class=\"comment_vote\">\n            <span class=\"comment_error\" style=\"color: red\"></span>\n            <a href=\"javascript:void(0);\" class=\"comment_digg\" onclick=\"return voteComment(3769089, 'Digg', this.parentElement, false);\">\n                支持(0)\n            </a>\n            <a href=\"javascript:void(0);\" class=\"comment_burry\" onclick=\"return voteComment(3769089, 'Bury', this.parentElement, false);\">\n                反对(0)\n            </a>\n        </div>\n        \n\n\t\t</div>\n\t</div>\n\t<div class=\"feedbackItem\">\n\t\t<div class=\"feedbackListSubtitle\">\n\t\t\t<div class=\"feedbackManage\">\n\t\t\t\t&nbsp;&nbsp;\n\n<span class=\"comment_actions\">\n    \n    \n    \n    \n</span>\n\n\n\t\t\t</div>\n\t\t\t\n<a href=\"#3863434\" class=\"layer\">#5楼</a>\n<a name=\"3863434\" id=\"comment_anchor_3863434\"></a>\n    <span id=\"comment-maxId\" style=\"display: none\">3863434</span>\n    <span id=\"comment-maxDate\" style=\"display: none\">2017/12/12 上午12:14:23</span>\n \n<span class=\"comment_date\">2017-12-12 00:14</span>\n\n | \n        <a id=\"a_comment_author_3863434\" href=\"https://home.cnblogs.com/u/1278466/\" target=\"_blank\">0CHX0</a>\n\n\t\t</div>\n\t\t<div class=\"feedbackCon\">\n\t\t\t\n<div id=\"comment_body_3863434\" data-format-type=\"Ubb\" class=\"blog_comment_body cnblogs-ubb\">\n    666\n</div>\n        <div class=\"comment_vote\">\n            <span class=\"comment_error\" style=\"color: red\"></span>\n            <a href=\"javascript:void(0);\" class=\"comment_digg\" onclick=\"return voteComment(3863434, 'Digg', this.parentElement, false);\">\n                支持(0)\n            </a>\n            <a href=\"javascript:void(0);\" class=\"comment_burry\" onclick=\"return voteComment(3863434, 'Bury', this.parentElement, false);\">\n                反对(0)\n            </a>\n        </div>\n        \n\n\t\t</div>\n\t</div>\n\n<div id=\"comment_pager_bottom\">\n    \n</div>\n\n\n</div>\n<div id=\"comment_form\" class=\"commentform\">\n    <a name=\"commentform\"></a>\n    <div id=\"divCommentShow\"></div>\n    <div id=\"comment_nav\"><span id=\"span_refresh_tips\"></span><a href=\"javascript:void(0);\" onclick=\"return RefreshCommentList();\" id=\"lnk_RefreshComments\" runat=\"server\" clientidmode=\"Static\">刷新评论</a><a href=\"#\" onclick=\"return RefreshPage();\">刷新页面</a><a href=\"#top\">返回顶部</a></div>\n    <div id=\"comment_form_container\" style=\"visibility: visible;\"><div class=\"login_tips\">\n    登录后才能发表评论，立即 <a rel=\"nofollow\" href=\"javascript:void(0);\" class=\"underline\" onclick=\"return login('commentform');\">登录</a> 或\n    <a rel=\"nofollow\" href=\"javascript:void(0);\" class=\"underline\" onclick=\"return register();\">注册</a>，\n    <a href=\"https://www.cnblogs.com/\">访问</a> 网站首页\n</div>\n</div>\n    <div class=\"ad_text_commentbox\" id=\"ad_text_under_commentbox\"></div>\n    <div id=\"ad_t2\"><a href=\"http://www.softbam.com/index.htm\" target=\"_blank\" onclick=\"ga('send', 'event', 'Link', 'click', 'T2-ucancode-1103')\">【推荐】News: 大型组态、工控、仿真、CADGIS 50万行VC++源码免费下载</a><br><a href=\"https://www.wenjuan.com/s/UZBZJvjEKs/#《博客园用户消费观调查》，快来参与吧。【问卷网提供支持】\" target=\"_blank\" onclick=\"ga('send', 'event', 'Link', 'click', 'T2-博客园问卷')\">【推荐】有你助力，更好为你——博客园用户消费观调查，附带小惊喜！</a><br><a href=\"https://brands.cnblogs.com/aws/free?source=CH\" target=\"_blank\" onclick=\"ga('send', 'event', 'Link', 'click', 'T2-AWS')\">【推荐】AWS携手博客园为开发者送福利，注册立享12个月免费套餐</a><br><a href=\"https://sensors.qiniu.com/t/hgU\" target=\"_blank\" onclick=\"ga('send', 'event', 'Link', 'click', 'T2-七牛云')\">【推荐】七牛云新老用户同享 1 分钱抢 CDN 1TB流量大礼包！</a><br><a href=\"https://brands.cnblogs.com/huawei\" target=\"_blank\" onclick=\"ga('send', 'event', 'Link', 'click', 'T2-华为专区')\">【推荐】了不起的开发者，挡不住的华为，园子里的品牌专区</a><br><a href=\"https://brands.cnblogs.com/agora\" target=\"_blank\" onclick=\"ga('send', 'event', 'Link', 'click', 'T2-声网专区')\">【推荐】未知数的距离，毫秒间的传递，声网与你实时互动</a><br><a href=\"https://brands.cnblogs.com/aerospike\" target=\"_blank\" onclick=\"ga('send', 'event', 'Link', 'click', 'T2-Aerospike专区')\">【推荐】新一代 NoSQL 数据库，Aerospike专区新鲜入驻</a><br></div>\n    <div id=\"opt_under_post\"></div>\n    <div id=\"cnblogs_c1\" class=\"c_ad_block\">\n        <div id=\"div-gpt-ad-1592365906576-0\" style=\"width: 300px; height: 250px;\" data-google-query-id=\"CI_W34Cnge4CFcEClgodOVMPIg\"><div id=\"google_ads_iframe_/1090369/C1_0__container__\" style=\"border: 0pt none;\"><iframe id=\"google_ads_iframe_/1090369/C1_0\" title=\"3rd party ad content\" name=\"google_ads_iframe_/1090369/C1_0\" width=\"300\" height=\"250\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\" srcdoc=\"\" style=\"border: 0px; vertical-align: bottom;\" data-google-container-id=\"1\" data-load-complete=\"true\"></iframe></div></div>\n    </div>\n    <div id=\"under_post_news\"><div class=\"recomm-block\"><b>相关博文：</b><br>·  <a title=\"Spring中Scope作用域\" href=\"https://www.cnblogs.com/jeffen/p/6150605.html\" target=\"_blank\" onclick=\"clickRecomItmem(6150605)\">Spring中Scope作用域</a><br>·  <a title=\"spring中scope作用域\" href=\"https://www.cnblogs.com/xtdxs/p/6540779.html\" target=\"_blank\" onclick=\"clickRecomItmem(6540779)\">spring中scope作用域</a><br>·  <a title=\"Spring中bean的scope详解\" href=\"https://www.cnblogs.com/jianyungsun/p/6839612.html\" target=\"_blank\" onclick=\"clickRecomItmem(6839612)\">Spring中bean的scope详解</a><br>·  <a title=\"Spring再接触Scope范围\" href=\"https://www.cnblogs.com/frankzone/p/9613204.html\" target=\"_blank\" onclick=\"clickRecomItmem(9613204)\">Spring再接触Scope范围</a><br>·  <a title=\"spring scope 作用域\" href=\"https://www.cnblogs.com/heyanan/p/6086505.html\" target=\"_blank\" onclick=\"clickRecomItmem(6086505)\">spring scope 作用域</a><br>»  <a target=\"_blank\" href=\"https://recomm.cnblogs.com/blogpost/3716827\">更多推荐...</a></div></div>\n    <div id=\"cnblogs_c2\" class=\"c_ad_block\">\n        <div id=\"div-gpt-ad-1592366332455-0\" style=\"width: 468px; height: 60px;\" data-google-query-id=\"CJDW34Cnge4CFcEClgodOVMPIg\"><div id=\"google_ads_iframe_/1090369/C2_0__container__\" style=\"border: 0pt none;\"><iframe id=\"google_ads_iframe_/1090369/C2_0\" title=\"3rd party ad content\" name=\"google_ads_iframe_/1090369/C2_0\" width=\"468\" height=\"60\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\" srcdoc=\"\" style=\"border: 0px; vertical-align: bottom;\" data-google-container-id=\"2\" data-load-complete=\"true\"></iframe></div></div>\n    </div>\n    <div id=\"under_post_kb\">\n<div class=\"itnews c_ad_block\">\n    <b>最新 IT 新闻</b>:\n    <br>\n ·          <a href=\"//news.cnblogs.com/n/684476/\" target=\"_blank\">郭德帆：携程2021年业务的可能性分析</a>\n        <br>\n ·          <a href=\"//news.cnblogs.com/n/684475/\" target=\"_blank\">2020年Steam大奖获奖名单公布 《荒野大镖客2》获年度游戏</a>\n        <br>\n ·          <a href=\"//news.cnblogs.com/n/684474/\" target=\"_blank\">比特币突破3万美元：数字黄金、货币革命还是投机泡沫？</a>\n        <br>\n ·          <a href=\"//news.cnblogs.com/n/684473/\" target=\"_blank\">T-Mobile证实黑客非法访问了用户电话记录</a>\n        <br>\n ·          <a href=\"//news.cnblogs.com/n/684472/\" target=\"_blank\">招聘信息暗示微软将对Windows 10进行\"太阳谷\"重大界面升级</a>\n        <br>\n    » <a href=\"https://news.cnblogs.com/\" title=\"IT 新闻\" target=\"_blank\">更多新闻...</a>\n</div></div>\n    <div id=\"HistoryToday\" class=\"c_ad_block\"></div>\n    <script type=\"text/javascript\">\n       var commentManager = new blogCommentManager();\n       commentManager.renderComments(0);\n       fixPostBody();\n       deliverBigBanner();\nsetTimeout(function() { incrementViewCount(cb_entryId); }, 50);       deliverT2();\n       deliverC1C2();\n       loadNewsAndKb();\n       loadBlogSignature();\nLoadPostCategoriesTags(cb_blogId, cb_entryId);       LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);\n       GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);\n       loadOptUnderPost();\n       GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);\n   </script>\n</div>\n\n</div>"
  },
  {
    "category": "annotation",
    "qes": "lombok中的@Data,@Setter,@Getter,@Log4j,@NoArgsConstructor,@AllArgsConstructor",
    "ans": "<div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"htmledit_views\">\n                    <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lombok 提供的注解不多，可以参考官方视频的讲解和官方文档。<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Lombok 注解在线帮助文档：http://projectlombok.org/features/index.<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面介绍几个我常用的 lombok 注解：<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Data&nbsp;&nbsp;&nbsp;：注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提供了equals、canEqual、hashCode、toString 方法<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Setter：注解在属性上:为属性提供 setting 方法,&nbsp; &nbsp; &nbsp; &nbsp;注解再类上表示当前类中所有属性都生成setter方法<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Getter：注解在属性上：为属性提供 getting 方法， 注解再类上表示当前类中所有属性都生成getter方法<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Log4j&nbsp;：注解在类上；为类提供一个 属性名为log 的 log4j 日志对象<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@NoArgsConstructor：注解在类上；为类提供一个无参的构造方法<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@AllArgsConstructor：注解在类上；为类提供一个全参的构造方法</p> \n<p>觉得文章有帮助的话就赞赏下吧！</p> \n<p>&nbsp;</p> \n      </div><div data-report-view=\"{&quot;mod&quot;:&quot;1585297308_001&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/qq_27409289/article/details/86506643&quot;,&quot;extend1&quot;:&quot;pc&quot;,&quot;ab&quot;:&quot;new&quot;}\"><div></div></div>\n        </div>"
  },
  {
    "category": "annotation",
    "qes": "",
    "ans": ""
  },
  {
    "category": "annotation",
    "qes": "",
    "ans": ""
  },
  {
    "category": "annotation",
    "qes": "",
    "ans": ""
  },
  {
    "category": "annotation",
    "qes": "",
    "ans": ""
  },
  {
    "category": "annotation",
    "qes": "",
    "ans": ""
  },
  {
    "category": "annotation",
    "qes": "",
    "ans": ""
  },
  {
    "category": "annotation",
    "qes": "",
    "ans": ""
  },
  {
    "category": "annotation",
    "qes": "",
    "ans": ""
  },
  {
    "category": "annotation",
    "qes": "",
    "ans": ""
  },
  {
    "category": "annotation",
    "qes": "",
    "ans": ""
  },
  {
    "category": "annotation",
    "qes": "",
    "ans": ""
  }
]