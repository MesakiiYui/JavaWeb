[
  {
    "category": "algorithm",
    "qes": "KMP算法",
    "ans": "<div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"htmledit_views\">\n                    <p>KMP算法是一种改进后的字符串匹配算法，由D.E.Knuth与V.R.Pratt和J.H.Morris同时发现，因此人们称它为克努特－莫里斯－普拉特操作（简称KMP算法）。</p> \n<p>KMP算法又称“看毛片”算法，是一个效率非常高的字符串匹配算法。相信很多人初识KMP算法的时候始终是丈二和尚摸不着头脑，要么完全不知所云，下面将结合本人的理解，用最浅显易懂的方法解释一下KMP算法。</p> \n<p>首先为什么要使用KMP,比如abc这个串找它在abababbcabcac这个串中第一次出现的位置，那么如果直接暴力双重循环的话，abc的c不匹配母串中的第三个字母a后，abc将开始从母串中的头位置的下一个位置开始寻找，就是abc开始匹配母串中第二个字母bab...这样，而KMP的优势就在于可以让模式串向右滑动尽可能多的距离就是abc直接从模式串的第三个字母aba...开始匹配，为了实现这一目标，KMP需要预处理出模式串的移位跳转next数组。<br> </p> \n<p>1. KMP算法完成的任务是：给定两个字符串S和M，长度分别为n和m，判断M是否在S中出现，如果出现则返回出现的位置。常规方法是遍历S的每一个位置，然后从该位置开始和M进行匹配，但是这种方法的复杂度是O(nm)。KMP算法通过计算移位跳转表next[...]，使匹配的复杂度降为O(n+m)。</p> \n<p>我们首先用一个图来描述kmp算法的思想。在字符串S中寻找M，假设匹配到位置i时两个字符才出现不相等(i位置前的字符都相等)，这时我们需要将字符串M向右移动。常规方法是每次向右移动一位，但是它没有考虑前i-1位已经比较过这个事实，所以效率不高。事实上，如果我们提前计算某些信息，就有可能一次右移多位。假设我们根据已经获得的信息知道可以右移x位，我们分析移位前后的M的特点，可以得到如下的结论：</p> \n<p></p> \n<div style=\"text-align:center\">\n <img src=\"https://img-blog.csdn.net/20160218172133984?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" width=\"400\" height=\"200\" alt=\"\">\n <br> \n</div> \n<ul><li>B段字符串是M的一个前缀</li><li>A段字符串是M的一个后缀</li><li>A段字符串和B段字符串相等</li></ul> 所以右移x位之后，使M[k] 与 S[i] 对齐，继续从i位置进行比较的前提是：M的前缀B和后缀A相同。\n<br> \n<p></p> \n<p>2.&nbsp;KMP算法的核心思想：<br> </p> \n<p>所以KMP算法的核心即是计算字符串M每一个位置之前的字符串的前缀和后缀公共部分的最大长度。获得M每一个位置的最大公共长度之后，就可以利用该最大公共长度快速和字符串S比较。当每次比较到两个字符串的字符不同时，我们就可以根据最大公共长度将字符串M向右移动，接着继续比较下一个位置。</p> \n<p>3. KMP算法关键难点就是弄清楚如何计算next数组 ：为方便起见，next数组下标都从1开始，M数组下标依然从0开始</p> \n<p>假设我们现在已经求得next[1]、next[2]、……next[i]，分别表示不同长度子串的前缀和后缀最大公共长度，下面介绍如何用归纳法计算next[i+1] ?<br> </p> \n<p>假设k＝next[i]，它表示M位置i之前的字符串的前缀和后缀最大公共长度，即M[0...k-1] = M[i-k...i-1]；</p> \n<p>（1）若M[k] ＝ M[i]相等, 则必定有next[i+1] ＝&nbsp;next[i] ＋1，即M位置i＋1之前的字符串的前缀和后缀最大公共长度为k+1</p> \n<p>为什么呢？也许你会半信半疑，下面用假设排除法来验证。</p> \n<p style=\"text-align:center\"><img src=\"https://img-blog.csdn.net/20160218180815940?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" width=\"400\" height=\"300\" alt=\"\"><br> </p> \n<p>如上有两幅图，第一幅表示当M[k] ＝ M[i]相等时，next[i+1] ＝&nbsp;next[i] ＋1；</p> \n<p>第二幅假设next'[i+1] &gt; next[i] ＋1成立，则两条虚线之间的阴影重叠长度肯定比第一幅图中大，从图中可以看出next'(i) = A + A‘ 的长度，而实际上next(i) = A的长度,且是最大长度，next'(i) = A + A‘ 是不可能的。因此假设不成立，则next[i+1] 的最大长度只能是 next[i] ＋1；</p> \n<p>（2）若M[k] !＝ M[i] 不相等，为求next[i+1] ，如下图我们需要将M继续往右移动(不能往左移，往左移上面已经用假设排除法验证不成立)，获得其最大公共长度next[k], 即为第一条虚线与第二条虚线之间的阴影重叠长度。不难发现，next[k] 其实就是阴影B这段字符串的前缀和后缀最大公共长度，即&nbsp;next[k] &nbsp;＝&nbsp;next[ next[i] ] 。</p> \n<p>令&nbsp;next[k] = j,&nbsp;继续判断M[i] 与 M[j] 是否相等，如果相等则&nbsp;next[i+1] ＝&nbsp;next[k] ＋ 1 ＝&nbsp;next[&nbsp;next[i]&nbsp;] ＋ 1；如果不相等重复步骤(2)，继续分割长度为next[&nbsp;next[k]&nbsp;]的字符串，直到字符串长度为0为止。</p> \n<p style=\"text-align:center\"><img src=\"https://img-blog.csdn.net/20160218192405346?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" width=\"500\" height=\"200\" alt=\"\"><br> </p> \n<p><br> </p> \n<p>通过上述分析，我门可以总结出next[i]的递推公式：</p> \n<p>若 M位置i之前的字符串的前缀和后缀最大公共长度为next[i] =&nbsp;k，即M[0...k-1] = M[i-k...i-1]；则对于M位置i+1之前的字符串，则有如下可能<br> </p> \n<ul><li>M[k] == M[i] 此时 next(i+1)=k+1=next(i)+1</li><li>M[k] ≠ M[i] 此时只能在M位置k之前的字符串中匹配，假设j=next(k),如果此时M[j]==M[i],则next(i+1)=j+1，否则重复此步骤，直到字符串长度为0为止</li></ul> \n<div>\n 4. 下面给出一段计算next[]的代码：\n <br> \n</div> \n<p></p> \n<p></p> \n<pre><code class=\"language-cpp hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;iostream.h&gt;</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">compute_next</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">string</span>&amp; pattern)</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> pattern_length = pattern.size();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-keyword\">int</span> *next_function = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[pattern_length];</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-keyword\">int</span> index;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    next_function[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">-1</span>;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;pattern_length;++i)</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        index = next_function[i<span class=\"hljs-number\">-1</span>];</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"13\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-comment\">//store previous fail position k to index;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"14\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"15\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">while</span>(index&gt;=<span class=\"hljs-number\">0</span> &amp;&amp; pattern[i]!=pattern[index+<span class=\"hljs-number\">1</span>])</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"16\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"17\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            index = next_function[index];</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"18\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"19\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">if</span>(pattern[i]==pattern[index+<span class=\"hljs-number\">1</span>])</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"20\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"21\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            next_function[i] = index + <span class=\"hljs-number\">1</span>;  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"22\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"23\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">else</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"24\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"25\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            next_function[i] = <span class=\"hljs-number\">-1</span>;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"26\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"27\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"28\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;pattern_length;++i)</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"29\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"30\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-built_in\">cout</span>&lt;&lt;next_function[i]&lt;&lt;<span class=\"hljs-built_in\">endl</span>;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"31\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"32\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-keyword\">delete</span>[] next_function;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"33\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"34\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"35\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"36\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"37\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-built_in\">string</span> pattern = <span class=\"hljs-string\">\"abaabcaba\"</span>;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"38\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    compute_next(pattern);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"39\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"40\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p></p> \n<p>这样求出来的next数组其实是从下标1开始的，因为下标0之前是个空串，下标1则对应着M串的第0个字符。我们设next[0]=-1，仅仅是个标志而已，没有什么特殊的含义。<br> </p> 运行结果为：\n<br> \n<pre><code class=\"language-cpp hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-number\">-1</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-number\">-1</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-number\">0</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-number\">0</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-number\">1</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-number\">-1</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-number\">0</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-number\">1</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-number\">2</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">Press any key to <span class=\"hljs-keyword\">continue</span></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre>有了next跳转表，那么实现kmp算法就是很简单的了，我们的原则还是从左向右匹配。当发生在i长度失配时，只要把pattern向右移动i-next(i)长度就可以了。如果失配时pattern_index==0，相当于pattern第一个字符就不匹配，这时就应该把target_index加1，向右移动1位就可以了。下图就是KMP算法的过程（红色即是采用KMP算法的执行过程）： \n<p></p> \n<div style=\"text-align:center\">\n <img src=\"https://img-blog.csdn.net/20160218201509484?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\">\n</div> \n<p></p> \n<p>5. 改进型KMP算法:&nbsp;</p> \n<p>若引入f(j)作为媒介，对 f(j) 和 next(j) 重新定义如下：</p> \n<p></p> \n<ul><li>f(j)是满足pattern[1...k - 1] = pattern[(j - (k - 1))...j -1](k &lt; j)的k中，k的最大值</li><li>next[j]是所有满足pattern[1...k - 1] = pattern[(j - (k - 1))...j -1](k &lt; j)，且pattern[k] != pattern[j]的k中，k的最大值</li></ul> \n<p></p> \n<p>根据定义，f(j)与next[j]的有如下递推公式：</p> \n<p></p> \n<ul><li>如果 pattern[j] != pattern[f(j)]，next[j] = f(j);</li><li>如果 pattern[j] = pattern[f(j)]，next[j] = next[f(j)];</li></ul> \n<p>可以看出，本篇介绍的next(i) 其实就是f(j),&nbsp;并不是最优跳转表。通过f(j)可以进一步计算最优的跳转表，最优跳转表对有多个重复字符的pattern[]，会表现出非常高的性能！&nbsp;</p> \n<p>有关最优跳转表的具体介绍，可以参见文章：<a target=\"_blank\" href=\"http://blog.csdn.net/joylnwang/article/details/6778316\" rel=\"noopener noreferrer\">http://blog.csdn.net/joylnwang/article/details/6778316</a></p> \n<p></p> \n<p><br> </p>\n                </div><div><div></div></div>\n        </div>"
  },
  {
    "category": "algorithm",
    "qes": "青蛙跳台阶问题",
    "ans": "<div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-tomorrow-night\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h2><a name=\"t0\"></a><a id=\"_0\"></a>青蛙跳台阶的相关问题</h2> \n<p>问题一：青蛙一次只能跳 1 个台阶或者 2 个台阶, 计算从 0 台阶跳到 n 台阶有多少跳法，也就是的路径种类总和。</p> \n<pre class=\"prettyprint\"><code class=\"prism language-java has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>HashMap<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StepJump</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 当青蛙只能跳 1 个台阶或者 2 个台阶, 计算从 0 台阶跳到 n 台阶的路径种类总和</span>\n    <span class=\"token comment\">// 这个类似斐波那契数列 1 1 2 3 5 8 13</span>\n    <span class=\"token comment\">// f(0)=1, f(1)=1, f(2)=f(0)+f(1),[其中f(0)表示从0阶直接跳到2阶] f(3)=f(1)+f(2)</span>\n    <span class=\"token comment\">// f(3)=f(1)+f(2)的解释：[先跳到1阶的路径种类(然后直接跳到3阶)+先跳到2阶的路径种类(然后直接跳到3阶)]</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// [先跳到n-1阶的路径种类(然后直接跳到n阶)+先跳到n-2阶的路径种类(然后直接跳到n阶)]</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 递归</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 避免重复计算，可用一个 HashMap 存储计算过的值，防止重复计算。</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> HashMap<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Integer<span class=\"token punctuation\">,</span> Integer<span class=\"token punctuation\">&gt;</span></span> map<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 如果map包含 n 对应的值，直接返回</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 递归求值,和fun1()同样道理</span>\n        <span class=\"token keyword\">int</span> first <span class=\"token operator\">=</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> second <span class=\"token operator\">=</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> first <span class=\"token operator\">+</span> second<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 储存值，方便下次寻找</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 利用循环计算，效率更高</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fun3</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> first <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> second <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            sum <span class=\"token operator\">=</span> first <span class=\"token operator\">+</span> second<span class=\"token punctuation\">;</span>\n            first <span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span>\n            second <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span>  n <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> time <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"递归时间：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        time <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Integer<span class=\"token punctuation\">,</span> Integer<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HashMap时间：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        time <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">fun3</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"循环时间：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/* Code Running Results:(每次结果可能不同)\n * 165580141\n * 递归时间：347549100\n * 165580141\n * HashMap时间：114000\n * 165580141\n * 循环时间：21000\n */</span>\n<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li><li style=\"color: rgb(153, 153, 153);\">16</li><li style=\"color: rgb(153, 153, 153);\">17</li><li style=\"color: rgb(153, 153, 153);\">18</li><li style=\"color: rgb(153, 153, 153);\">19</li><li style=\"color: rgb(153, 153, 153);\">20</li><li style=\"color: rgb(153, 153, 153);\">21</li><li style=\"color: rgb(153, 153, 153);\">22</li><li style=\"color: rgb(153, 153, 153);\">23</li><li style=\"color: rgb(153, 153, 153);\">24</li><li style=\"color: rgb(153, 153, 153);\">25</li><li style=\"color: rgb(153, 153, 153);\">26</li><li style=\"color: rgb(153, 153, 153);\">27</li><li style=\"color: rgb(153, 153, 153);\">28</li><li style=\"color: rgb(153, 153, 153);\">29</li><li style=\"color: rgb(153, 153, 153);\">30</li><li style=\"color: rgb(153, 153, 153);\">31</li><li style=\"color: rgb(153, 153, 153);\">32</li><li style=\"color: rgb(153, 153, 153);\">33</li><li style=\"color: rgb(153, 153, 153);\">34</li><li style=\"color: rgb(153, 153, 153);\">35</li><li style=\"color: rgb(153, 153, 153);\">36</li><li style=\"color: rgb(153, 153, 153);\">37</li><li style=\"color: rgb(153, 153, 153);\">38</li><li style=\"color: rgb(153, 153, 153);\">39</li><li style=\"color: rgb(153, 153, 153);\">40</li><li style=\"color: rgb(153, 153, 153);\">41</li><li style=\"color: rgb(153, 153, 153);\">42</li><li style=\"color: rgb(153, 153, 153);\">43</li><li style=\"color: rgb(153, 153, 153);\">44</li><li style=\"color: rgb(153, 153, 153);\">45</li><li style=\"color: rgb(153, 153, 153);\">46</li><li style=\"color: rgb(153, 153, 153);\">47</li><li style=\"color: rgb(153, 153, 153);\">48</li><li style=\"color: rgb(153, 153, 153);\">49</li><li style=\"color: rgb(153, 153, 153);\">50</li><li style=\"color: rgb(153, 153, 153);\">51</li><li style=\"color: rgb(153, 153, 153);\">52</li><li style=\"color: rgb(153, 153, 153);\">53</li><li style=\"color: rgb(153, 153, 153);\">54</li><li style=\"color: rgb(153, 153, 153);\">55</li><li style=\"color: rgb(153, 153, 153);\">56</li><li style=\"color: rgb(153, 153, 153);\">57</li><li style=\"color: rgb(153, 153, 153);\">58</li><li style=\"color: rgb(153, 153, 153);\">59</li><li style=\"color: rgb(153, 153, 153);\">60</li><li style=\"color: rgb(153, 153, 153);\">61</li></ul></pre> \n<p>问题二：青蛙一次能跳 1 到 n 个台阶, 计算从 0 台阶跳到 n 台阶有多少跳法，也就是的路径种类总和。</p> \n<pre class=\"prettyprint\"><code class=\"prism language-java has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StepJumpTwo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 青蛙一次能跳 1 到 n 个台阶, 计算从 0 台阶跳到 n 台阶的路径种类总和</span>\n    <span class=\"token comment\">// f(n)  = f(n-1)+f(n-2)+......+f(1)+f(0)------a式子</span>\n    <span class=\"token comment\">// f(n-1)= f(n-2)+f(n-3)+......+f(1)+f(0)------b式子</span>\n    <span class=\"token comment\">// (a式子)-(b式子)得  f(n)-f(n-1)=f(n-1)</span>\n    <span class=\"token comment\">// 最终得到 f(n)=2*f(n-1)的等比数列，该等比数列为2^(n-1)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 位运算，速度更快</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/* Code Running Results:\n * 512\n */</span>\n<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li><li style=\"color: rgb(153, 153, 153);\">16</li><li style=\"color: rgb(153, 153, 153);\">17</li><li style=\"color: rgb(153, 153, 153);\">18</li></ul></pre> \n<p>问题三：青蛙一次能跳 1 到 m 个台阶, 计算从 0 台阶跳到 n 台阶有多少跳法，也就是的路径种类总和。</p> \n<pre class=\"prettyprint\"><code class=\"prism language-java has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StepJumpThree</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 青蛙一次能跳 1 到 m 个台阶, 计算从 0 台阶跳到 n 台阶的路径种类总和</span>\n\n    <span class=\"token comment\">// 情况1 n &lt;= m 时，也就回到了问题二 f(n)=2*f(n-1), 等比数列为2^(n-1)</span>\n\n    <span class=\"token comment\">// 情况2 当 n-1 = m 时</span>\n    <span class=\"token comment\">// f(n)  = f(n-1)+f(n-2)+......+f(2)+f(1) 接下所有的计算又回到情况1</span>\n    <span class=\"token comment\">//       = 2*f(n-2)+2*f(n-3)+......+2*f(1)+f(1)</span>\n    <span class=\"token comment\">//       = ......</span>\n    <span class=\"token comment\">//       = 2^(n-1)-1 (f(n)=2*f(n-1)的等比数列[2^(n-1)]的前 n-1 项和[2^(n-1)-1]</span>\n\n    <span class=\"token comment\">// 情况3 当 n-1 &gt; m 时</span>\n    <span class=\"token comment\">// f(n)  = f(n-1)+f(n-2)+......+f(n-m+1)+f(n-m)------a式子</span>\n    <span class=\"token comment\">// f(n-1)= f(n-2)+f(n-3)+......+f(n-m)+f(n-1-m)------b式子</span>\n    <span class=\"token comment\">// (a式子)-(b式子)得  f(n)-f(n-1)=f(n-1)-f(n-1-m)</span>\n    <span class=\"token comment\">// 最终得到 f(n)=2*f(n-1)-f(n-1-m)</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n           <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 情况1</span>\n           <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> m<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 情况2</span>\n           <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 情况3</span>\n       <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>m<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// n &lt; 2</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 情况1</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 情况2</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 情况3</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/* Code Running Results:\n * 1\n * 8\n * 31\n * 63\n */</span>\n<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li><li style=\"color: rgb(153, 153, 153);\">16</li><li style=\"color: rgb(153, 153, 153);\">17</li><li style=\"color: rgb(153, 153, 153);\">18</li><li style=\"color: rgb(153, 153, 153);\">19</li><li style=\"color: rgb(153, 153, 153);\">20</li><li style=\"color: rgb(153, 153, 153);\">21</li><li style=\"color: rgb(153, 153, 153);\">22</li><li style=\"color: rgb(153, 153, 153);\">23</li><li style=\"color: rgb(153, 153, 153);\">24</li><li style=\"color: rgb(153, 153, 153);\">25</li><li style=\"color: rgb(153, 153, 153);\">26</li><li style=\"color: rgb(153, 153, 153);\">27</li><li style=\"color: rgb(153, 153, 153);\">28</li><li style=\"color: rgb(153, 153, 153);\">29</li><li style=\"color: rgb(153, 153, 153);\">30</li><li style=\"color: rgb(153, 153, 153);\">31</li><li style=\"color: rgb(153, 153, 153);\">32</li><li style=\"color: rgb(153, 153, 153);\">33</li><li style=\"color: rgb(153, 153, 153);\">34</li><li style=\"color: rgb(153, 153, 153);\">35</li><li style=\"color: rgb(153, 153, 153);\">36</li><li style=\"color: rgb(153, 153, 153);\">37</li><li style=\"color: rgb(153, 153, 153);\">38</li><li style=\"color: rgb(153, 153, 153);\">39</li><li style=\"color: rgb(153, 153, 153);\">40</li></ul></pre>\n                </div><div><div></div></div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-10218d227c.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-6aa8c38f9a.css\" rel=\"stylesheet\">\n        </div>"
  },
  {
    "category": "algorithm",
    "qes": "Java中的位移运算",
    "ans": "<div id=\"cnblogs_post_body\" class=\"blogpost-body\">\n    <p>1. 无符号右移&nbsp; &nbsp;&gt;&gt;&gt;&nbsp; 或&nbsp;&gt;&gt;&gt; =</p>\n<p>无符号右移（&gt;&gt;&gt;）跟右移（&gt;&gt;）运算符不一样。</p>\n<p>右移不改变数的正负。</p>\n<p>对于一个正数，无符号右移不会变成负数(相当于除以1再取整)；但是对于一个负数，无符号右移会将负数变成正数；</p>\n<div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div>\n<pre></pre>\n<p> int i = -4;<br>\t\tSystem.out.printf(\"%-10d %32s\\n\", i, Integer.toBinaryString(i));<br>\t\ti &gt;&gt;&gt;= 1;&nbsp; // 无符号右移1位<br>\t\tSystem.out.printf(\"%-10d %32s\\n\", i, Integer.toBinaryString(i));</p>\n<p>i &gt;&gt;&gt;= 1;<br>\t\tSystem.out.printf(\"%-10d %32s\\n\", i, Integer.toBinaryString(i));</p>\n\n\n\n\n\n\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img src=\"//common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div>\n<p>输出：</p>\n<p>-4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 11111111111111111111111111111100&nbsp; &nbsp; &nbsp; &nbsp;//负数在java中以补码形式存储，-4的补码表示是11111111111111111111111111111100<br>2147483646&nbsp; &nbsp; &nbsp;1111111111111111111111111111110&nbsp; &nbsp; &nbsp; &nbsp;//无符号右移1位，-4的补码表示的符号位也右移了1位，导致符号位变成0，成为正数<br>1073741822&nbsp; &nbsp; &nbsp; &nbsp;111111111111111111111111111110&nbsp; &nbsp; &nbsp; &nbsp;//再无符号右移1位</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: rgba(0, 0, 255, 1)\">int</span> i = 15<span style=\"color: rgba(0, 0, 0, 1)\">;\nSystem.out.printf(</span>\"%-10d %32s\\n\"<span style=\"color: rgba(0, 0, 0, 1)\">, i, Integer.toBinaryString(i));\ni </span>&gt;&gt;&gt;= 1<span style=\"color: rgba(0, 0, 0, 1)\">;\nSystem.out.printf(</span>\"%-10d %32s\\n\", i, Integer.toBinaryString(i));</pre>\n</div>\n<p>输出：</p>\n<p>15&nbsp; &nbsp; &nbsp;1111　　<br>7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;111　　//对正数进行无符号右移，高位补0</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: rgba(0, 0, 255, 1)\">int</span> i = 0x80000000<span style=\"color: rgba(0, 0, 0, 1)\">;\nSystem.out.printf(</span>\"%-12d %32s\\n\"<span style=\"color: rgba(0, 0, 0, 1)\">, i, Integer.toBinaryString(i));\ni </span>&gt;&gt;&gt;= 1<span style=\"color: rgba(0, 0, 0, 1)\">;\nSystem.out.printf(</span>\"%-12d %32s\\n\"<span style=\"color: rgba(0, 0, 0, 1)\">, i, Integer.toBinaryString(i));\ni </span>&gt;&gt;&gt;= 1<span style=\"color: rgba(0, 0, 0, 1)\">;\nSystem.out.printf(</span>\"%-12d %32s\\n\", i, Integer.toBinaryString(i));</pre>\n</div>\n<p>输出：</p>\n<p>-2147483648 10000000000000000000000000000000&nbsp; &nbsp; &nbsp; &nbsp;//最小负数的补码表示<br>1073741824&nbsp; &nbsp; 1000000000000000000000000000000&nbsp; &nbsp; &nbsp; &nbsp;//符号位右移一位，变成正数<br>536870912&nbsp; &nbsp; &nbsp; &nbsp; 100000000000000000000000000000</p>\n<p>总结：</p>\n<p>无符号右移的叫法，容易让人误解。虽然叫作无符号右移运算，让人第一印象以为是不对符号位进行移位，其实却是连同符号位一起右移；</p>\n<p>对复数进行无符号右移，符号位也一起右移，将会变成正数；</p>\n<p>对正数进行若干次无符号右移，得到的永远都是正数或0；</p>\n<p>&nbsp;</p>\n<p>2. 左移位运算&nbsp; &lt;&lt;&nbsp; 或&nbsp; &lt;&lt;=</p>\n<p>跟右移运算不同的是，无符号左移和左移是一样的。因此java没有无符号左移运算。(&lt;&lt;&lt;和&lt;&lt;&lt;=将报错)</p>\n<p>因为无右移运算需要考虑符号位的右移，而符号位只存在于二进制表示的最左边，最右边没有。</p>\n<p>所以不用区分无符号左移和左移运算。</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: rgba(0, 0, 255, 1)\">int</span> i = 0x80000000<span style=\"color: rgba(0, 0, 0, 1)\">;\nSystem.out.printf(</span>\"%-12d %32s\\n\"<span style=\"color: rgba(0, 0, 0, 1)\">, i, Integer.toBinaryString(i));\ni </span>&lt;&lt;= 1<span style=\"color: rgba(0, 0, 0, 1)\">;\nSystem.out.printf(</span>\"%-12d %32s\\n\"<span style=\"color: rgba(0, 0, 0, 1)\">, i, Integer.toBinaryString(i));\ni </span>&gt;&gt;= 1<span style=\"color: rgba(0, 0, 0, 1)\">;\nSystem.out.printf(</span>\"%-12d %32s\\n\", i, Integer.toBinaryString(i));</pre>\n</div>\n<p>输出：</p>\n<p>-2147483648 10000000000000000000000000000000&nbsp; &nbsp;&nbsp;<br>0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp;&nbsp;//最小负数左移1位，将变成0<br>0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0</p>\n</div>"
  },
  {
    "category": "algorithm",
    "qes": "递归读取文件夹下的文件，代码怎么实现",
    "ans": "<div id=\"content_views\" class=\"htmledit_views\">\n                    <p>这个问题就是在考验你递归，让你写个递归方法出来。也只有递归才能这么解决问题。<br> 具体实现如下：<br> </p> \n<p></p>\n<pre><code class=\"language-java hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-comment\"><span class=\"hljs-comment\">/**</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">     * 递归读取文件夹下的 所有文件</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">     *</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> testFileDir 文件名或目录名</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">     */</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testLoopOutAllFileName</span><span class=\"hljs-params\">(String testFileDir)</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">if</span> (testFileDir == <span class=\"hljs-keyword\">null</span>) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            <span class=\"hljs-comment\">//因为new File(null)会空指针异常,所以要判断下</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            <span class=\"hljs-keyword\">return</span>;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        File[] testFile = <span class=\"hljs-keyword\">new</span> File(testFileDir).listFiles();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">if</span> (testFile == <span class=\"hljs-keyword\">null</span>) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"13\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            <span class=\"hljs-keyword\">return</span>;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"14\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"15\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">for</span> (File file : testFile) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"16\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            <span class=\"hljs-keyword\">if</span> (file.isFile()) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"17\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                System.out.println(file.getName());</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"18\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (file.isDirectory()) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"19\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                System.out.println(<span class=\"hljs-string\">\"-------this is a directory, and its files are as follows:-------\"</span>);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"20\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                testLoopOutAllFileName(file.getPath());</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"21\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            } <span class=\"hljs-keyword\">else</span> {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"22\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                System.out.println(<span class=\"hljs-string\">\"文件读入有误！\"</span>);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"23\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"24\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"25\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<br> \n<br> \n<p></p> \n<img src=\"https://img-blog.csdn.net/20160907182752632\" alt=\"\">\n<img src=\"https://img-blog.csdn.net/20160907182758973\" alt=\"\">\n<img src=\"https://img-blog.csdn.net/20160907182805664\" alt=\"\"> \n<p></p> \n<p>如上图的测试结果，以及测试代码传入的目录。</p> \n<p>如下方法调用上述方法：</p> \n<p>testLoopOutAllFileName(\"F:/桌面文件\");<br> </p> \n<p><br> </p>\n                </div>"
  },
  {
    "category": "algorithm",
    "qes": "",
    "ans": ""
  },
  {
    "category": "algorithm",
    "qes": "",
    "ans": ""
  },
  {
    "category": "algorithm",
    "qes": "",
    "ans": ""
  },
  {
    "category": "algorithm",
    "qes": "",
    "ans": ""
  },
  {
    "category": "algorithm",
    "qes": "",
    "ans": ""
  }
]