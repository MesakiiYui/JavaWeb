[
  {
    "category": "concurrency",
    "qes": "给你一个ThreadPoolExcuter 现在我们给他一些构造参数，核心线程数10 ，最大线程数100，队列长度1024，过期时间5秒，还有拒绝策略。现在我开2000个任务，他会怎么执行",
    "ans": "<blockquote>\n<p>答：当线程数量小于核心线程数量，线程池会创建线程来执行任务，如果超过了核心线程数量，线程池会把任务放入队列，如果队列满了，线程池会继续创建线程直到线程数量=最大线程数量。如果此时还有任务要执行，线程池会执行拒绝策略。线程空闲时间超过5秒的时候,他会被销毁.<br>\n线程池的拒绝策略<br>\n（1）ThreadPoolExecutor.AbortPolicy 丢弃任务，并抛出RejectedExecutionException 异常。<br>\n（2）ThreadPoolExecutor.CallerRunsPolicy：该任务被线程池拒绝，由调用 execute方法的线程执行该任务。<br>\n（3）ThreadPoolExecutor.DiscardOldestPolicy ： 抛弃队列最前面的任务，然后重新尝试执行任务。<br>\n（4）ThreadPoolExecutor.DiscardPolicy，丢弃任务，不过也不抛出异常。</p>\n</blockquote>"
  },
  {
    "category": "concurrency",
    "qes": "Java线程池的核心线程数和最大线程数总是容易混淆怎么办",
    "ans": "<div class=\"Post-RichTextContainer\"><div class=\"RichText ztext Post-RichText\"><p>Java的线程池就像是一个花瓶容器。</p><p>而把任务提交给线程池就像是把小球塞进花瓶。</p><p>整个过程就像下面这个有趣的动画：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-487a4af4abc3059e069170454fcd13e9_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"376\" data-rawheight=\"326\" data-thumbnail=\"https://pic2.zhimg.com/v2-487a4af4abc3059e069170454fcd13e9_b.jpg\" class=\"content_image\" width=\"376\"/></noscript><div class=\"RichText-gifPlaceholder\"><div class=\"GifPlayer\" data-size=\"normal\" data-za-detail-view-path-module=\"GifItem\"><img class=\"ztext-gif\" role=\"presentation\" src=\"https://pic2.zhimg.com/v2-487a4af4abc3059e069170454fcd13e9_b.jpg\" data-thumbnail=\"https://pic2.zhimg.com/v2-487a4af4abc3059e069170454fcd13e9_b.jpg\" data-size=\"normal\"><svg width=\"60\" height=\"60\" viewBox=\"0 0 60 60\" class=\"GifPlayer-icon\"><g fill=\"none\" fill-rule=\"evenodd\"><ellipse fill=\"#000\" opacity=\"0.45\" cx=\"30\" cy=\"30\" rx=\"30\" ry=\"30\"></ellipse><ellipse stroke=\"#FFF\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-dasharray=\"4,1,4\" cx=\"30\" cy=\"30\" rx=\"26\" ry=\"26\"></ellipse><svg x=\"16\" y=\"18.5\" class=\"GifPlayer-icon\"><path d=\"M12.842 12.981V11.4H7.64v1.653h3.27v.272c-.018 1.881-1.442 3.147-3.516 3.147-2.382 0-3.876-1.846-3.876-4.834 0-2.936 1.485-4.79 3.832-4.79 1.732 0 2.936.835 3.428 2.364h1.977c-.43-2.566-2.522-4.201-5.405-4.201-3.55 0-5.845 2.601-5.845 6.644 0 4.096 2.268 6.654 5.863 6.654 3.322 0 5.475-2.083 5.475-5.327zM17.518 18V5.317H15.55V18h1.97zm5.142 0v-5.256h5.449v-1.74h-5.45V7.11h5.95V5.317h-7.918V18h1.969z\" fill=\"#fff\"></path></svg></g></svg></div></div></figure><p>下面我们先来了解一下Java线程池的参数。</p><p>希望看完这篇文章后, 再提起线程池的时候, 你脑海首先出现的, 会是一个花瓶 : )</p><hr><h2><b>1 </b>线程池的参数意义</h2><p>Java线程池的构造函数如下：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"n\">ThreadPoolExecutor</span><span class=\"err\">（</span>\n  <span class=\"kt\">int</span> <span class=\"n\">corePoolSize</span><span class=\"o\">,</span>\n  <span class=\"kt\">int</span> <span class=\"n\">maximumPoolSize</span><span class=\"o\">,</span>\n  <span class=\"kt\">long</span> <span class=\"n\">keepAliveTime</span><span class=\"o\">,</span>\n  <span class=\"n\">TimeUnit</span> <span class=\"n\">unit</span><span class=\"o\">,</span>\n  <span class=\"n\">BlockingQueue</span><span class=\"o\">&lt;</span><span class=\"n\">Runnable</span><span class=\"o\">&gt;</span> <span class=\"n\">workQueue</span><span class=\"o\">,</span>\n  <span class=\"n\">ThreadFactory</span> <span class=\"n\">threadFactory</span><span class=\"o\">,</span>\n  <span class=\"n\">RejectedExecutionHandler</span> <span class=\"n\">handler</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"c1\">//...\n</span><span class=\"c1\"></span><span class=\"o\">}</span></code></pre></div><p>线程池有这么几个重要的参数：</p><ul><li><code>corePoolSize=&gt; </code>线程池里的核心线程数量</li><li><code>maximumPoolSize</code>=&gt; 线程池里允许有的最大线程数量</li><li><code>keepAliveTime=&gt; </code>空闲线程存活时间</li><li><code>unit=&gt; </code>keepAliveTime的时间单位,比如分钟,小时等</li><li><code>workQueue=&gt; 缓冲</code>队列</li><li><code>threadFactory=&gt; </code>线程工厂用来创建新的线程放入线程池</li><li><code>handler=&gt; </code>线程池拒绝任务的处理策略,比如抛出异常等策略</li></ul><p>线程池大体的原理就是这样的：corePoolSize -&gt;queue -&gt;  maxPoolSzie , 吧啦吧啦......</p><p>那么现在重点来了， 这堆参数解释不看源码真的搞不懂怎么办？</p><p>或者你看懂了这些参数的文字解析，但是到用的时候总是记不住怎么办？</p><p>或者我们来一组实际参数，你能理解这代表的含义吗？</p><div class=\"highlight\"><pre><code class=\"language-aspectj\">corePoolSize：1\nmamximumPoolSize：3\nkeepAliveTime：60s\nworkQueue：ArrayBlockingQueue，有界阻塞队列，队列大小是4\nhandler：默认的策略，抛出来一个ThreadPoolRejectException</code></pre></div><p>别慌，我们可以把线程池的参数做成花瓶的参数，这样一来很多东西就不言自明了。</p><hr><h2><b>2 </b>线程池的参数可视化</h2><p class=\"ztext-empty-paragraph\"><br></p><p>我们回到前面所说的花瓶。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-6f79519fa67078cbdad7de5909309466_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"356\" data-rawheight=\"209\" class=\"content_image\" width=\"356\"/></noscript><img src=\"https://pic3.zhimg.com/80/v2-6f79519fa67078cbdad7de5909309466_720w.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"356\" data-rawheight=\"209\" class=\"content_image lazy\" width=\"356\" data-actualsrc=\"https://pic3.zhimg.com/v2-6f79519fa67078cbdad7de5909309466_b.jpg\" data-lazy-status=\"ok\"></figure><p>这个花瓶由  瓶口 、 瓶颈 、  瓶身 三个部分组成。</p><p>这三个部分分别对应着线程池的三个参数：maximumPoolSize, workQueue,corePoolSize。</p><figure data-size=\"small\"><noscript><img src=\"https://pic1.zhimg.com/v2-2af5b93ee3abdc61ef67a32e1996d2d8_b.gif\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"640\" data-rawheight=\"561\" data-thumbnail=\"https://pic1.zhimg.com/v2-2af5b93ee3abdc61ef67a32e1996d2d8_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-2af5b93ee3abdc61ef67a32e1996d2d8_r.jpg\"/></noscript><div class=\"RichText-gifPlaceholder\"><div class=\"GifPlayer\" data-size=\"small\" data-za-detail-view-path-module=\"GifItem\"><img class=\"ztext-gif\" role=\"presentation\" src=\"https://pic1.zhimg.com/v2-2af5b93ee3abdc61ef67a32e1996d2d8_b.jpg\" data-thumbnail=\"https://pic1.zhimg.com/v2-2af5b93ee3abdc61ef67a32e1996d2d8_b.jpg\" data-size=\"small\"><svg width=\"60\" height=\"60\" viewBox=\"0 0 60 60\" class=\"GifPlayer-icon\"><g fill=\"none\" fill-rule=\"evenodd\"><ellipse fill=\"#000\" opacity=\"0.45\" cx=\"30\" cy=\"30\" rx=\"30\" ry=\"30\"></ellipse><ellipse stroke=\"#FFF\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-dasharray=\"4,1,4\" cx=\"30\" cy=\"30\" rx=\"26\" ry=\"26\"></ellipse><svg x=\"16\" y=\"18.5\" class=\"GifPlayer-icon\"><path d=\"M12.842 12.981V11.4H7.64v1.653h3.27v.272c-.018 1.881-1.442 3.147-3.516 3.147-2.382 0-3.876-1.846-3.876-4.834 0-2.936 1.485-4.79 3.832-4.79 1.732 0 2.936.835 3.428 2.364h1.977c-.43-2.566-2.522-4.201-5.405-4.201-3.55 0-5.845 2.601-5.845 6.644 0 4.096 2.268 6.654 5.863 6.654 3.322 0 5.475-2.083 5.475-5.327zM17.518 18V5.317H15.55V18h1.97zm5.142 0v-5.256h5.449v-1.74h-5.45V7.11h5.95V5.317h-7.918V18h1.969z\" fill=\"#fff\"></path></svg></g></svg></div></div></figure><p class=\"ztext-empty-paragraph\"><br></p><figure data-size=\"small\"><noscript><img src=\"https://pic3.zhimg.com/v2-c9f2f593928754d4019489bf4437f706_b.gif\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"640\" data-rawheight=\"979\" data-thumbnail=\"https://pic3.zhimg.com/v2-c9f2f593928754d4019489bf4437f706_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-c9f2f593928754d4019489bf4437f706_r.jpg\"/></noscript><div class=\"RichText-gifPlaceholder\"><div class=\"GifPlayer\" data-size=\"small\" data-za-detail-view-path-module=\"GifItem\"><img class=\"ztext-gif\" role=\"presentation\" src=\"https://pic3.zhimg.com/v2-c9f2f593928754d4019489bf4437f706_b.jpg\" data-thumbnail=\"https://pic3.zhimg.com/v2-c9f2f593928754d4019489bf4437f706_b.jpg\" data-size=\"small\"><svg width=\"60\" height=\"60\" viewBox=\"0 0 60 60\" class=\"GifPlayer-icon\"><g fill=\"none\" fill-rule=\"evenodd\"><ellipse fill=\"#000\" opacity=\"0.45\" cx=\"30\" cy=\"30\" rx=\"30\" ry=\"30\"></ellipse><ellipse stroke=\"#FFF\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-dasharray=\"4,1,4\" cx=\"30\" cy=\"30\" rx=\"26\" ry=\"26\"></ellipse><svg x=\"16\" y=\"18.5\" class=\"GifPlayer-icon\"><path d=\"M12.842 12.981V11.4H7.64v1.653h3.27v.272c-.018 1.881-1.442 3.147-3.516 3.147-2.382 0-3.876-1.846-3.876-4.834 0-2.936 1.485-4.79 3.832-4.79 1.732 0 2.936.835 3.428 2.364h1.977c-.43-2.566-2.522-4.201-5.405-4.201-3.55 0-5.845 2.601-5.845 6.644 0 4.096 2.268 6.654 5.863 6.654 3.322 0 5.475-2.083 5.475-5.327zM17.518 18V5.317H15.55V18h1.97zm5.142 0v-5.256h5.449v-1.74h-5.45V7.11h5.95V5.317h-7.918V18h1.969z\" fill=\"#fff\"></path></svg></g></svg></div></div></figure><p class=\"ztext-empty-paragraph\"><br></p><p>线程池里的线程，我用一个红色小球表示，每来一个任务，就会生成一个小球：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-269d5cf464d616cbb808dab465a6513a_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"63\" data-rawheight=\"58\" class=\"content_image\" width=\"63\"/></noscript><img src=\"https://pic3.zhimg.com/80/v2-269d5cf464d616cbb808dab465a6513a_720w.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"63\" data-rawheight=\"58\" class=\"content_image lazy\" width=\"63\" data-actualsrc=\"https://pic3.zhimg.com/v2-269d5cf464d616cbb808dab465a6513a_b.png\" data-lazy-status=\"ok\"></figure><p class=\"ztext-empty-paragraph\"><br></p><p>而核心线程，也就是正在处理中的任务，则用灰色的虚线小球表示 （目前第一版动画先这样简陋点吧......）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-4e3f2c5d7c33df04781ba02cc2b79166_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"56\" data-rawheight=\"58\" class=\"content_image\" width=\"56\"/></noscript><img src=\"https://pic3.zhimg.com/80/v2-4e3f2c5d7c33df04781ba02cc2b79166_720w.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"56\" data-rawheight=\"58\" class=\"content_image lazy\" width=\"56\" data-actualsrc=\"https://pic3.zhimg.com/v2-4e3f2c5d7c33df04781ba02cc2b79166_b.png\" data-lazy-status=\"ok\"></figure><p class=\"ztext-empty-paragraph\"><br></p><p>于是画风就变成了这样，“花瓶”有这么几个重要的参数：</p><ul><li>corePoolSize=&gt; 瓶身的容量</li><li>maximumPoolSize=&gt; 瓶口的容量</li><li>keepAliveTime=&gt; 红色小球的存活时间</li><li>unit=&gt; keepAliveTime的时间单位,比如分钟,小时等</li><li>workQueue=&gt; 瓶颈，不同类型的瓶颈容量不同</li><li>threadFactory=&gt; 你投递小球进花瓶的小手 （线程工厂）</li><li>handler=&gt; 线程池拒绝任务的处理策略,比如小球被排出瓶外</li></ul><p>如果往这个花瓶里面放入很多小球时（线程池执行任务）；</p><p>瓶身 (corePoolSize) 装不下了, 就会堆积到 瓶颈 (queue) 的位置；</p><p>瓶颈还是装不下, 就会堆积到 瓶口 (maximumPoolSize)；</p><p>直到最后小球从瓶口溢出。</p><p>还记得上面提到的那一组实际参数吗，代表的花瓶大体上是如下图这样的：</p><p class=\"ztext-empty-paragraph\"><br></p><figure data-size=\"small\"><noscript><img src=\"https://pic1.zhimg.com/v2-59b2c8be53324afce753ae1187f317ec_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"704\" data-rawheight=\"522\" class=\"origin_image zh-lightbox-thumb\" width=\"704\" data-original=\"https://pic1.zhimg.com/v2-59b2c8be53324afce753ae1187f317ec_r.jpg\"/></noscript><img src=\"https://pic1.zhimg.com/80/v2-59b2c8be53324afce753ae1187f317ec_720w.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"704\" data-rawheight=\"522\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"704\" data-original=\"https://pic1.zhimg.com/v2-59b2c8be53324afce753ae1187f317ec_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-59b2c8be53324afce753ae1187f317ec_b.jpg\" data-lazy-status=\"ok\"></figure><p>那么参数可视化到底有什么实际意义呢？</p><hr><h2>3 阿里的规范</h2><p>首先我们来看阿里开发手册中对于 Java 线程池的使用规范：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-91d52edbd0506e23c193ba4d86408cc9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"193\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-91d52edbd0506e23c193ba4d86408cc9_r.jpg\"/></noscript><img src=\"https://pic2.zhimg.com/80/v2-91d52edbd0506e23c193ba4d86408cc9_720w.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"193\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-91d52edbd0506e23c193ba4d86408cc9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-91d52edbd0506e23c193ba4d86408cc9_b.jpg\" data-lazy-status=\"ok\"></figure><p>为什么规范中提及的四种线程会导致OOM呢？</p><p>我们看看这四种线程池的具体参数，然后再用花瓶动画演示一下导致OOM的原因。</p><hr><h2><b> 线程池FixedThreadPool</b></h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"err\">&#8203;</span><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">ExecutorService</span> <span class=\"nf\">newFixedThreadPool</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">nThreads</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">ThreadPoolExecutor</span><span class=\"o\">(</span><span class=\"n\">nThreads</span><span class=\"o\">,</span> <span class=\"n\">nThreads</span><span class=\"o\">,</span>\n    <span class=\"n\">0L</span><span class=\"o\">,</span> <span class=\"n\">TimeUnit</span><span class=\"o\">.</span><span class=\"na\">MILLISECONDS</span><span class=\"o\">,</span>\n    <span class=\"k\">new</span> <span class=\"n\">LinkedBlockingQueue</span><span class=\"o\">&lt;</span><span class=\"n\">Runnable</span><span class=\"o\">&gt;());</span></code></pre></div><p>我们关心的参数如下</p><div class=\"highlight\"><pre><code class=\"language-text\">corePoolSize：nThreads\nmamximumPoolSize：nThreads\nworkQueue：LinkedBlockingQueue</code></pre></div><p>FixedThreadPool表示的花瓶就是下图这样子：</p><figure data-size=\"small\"><noscript><img src=\"https://pic1.zhimg.com/v2-93a7f74e4f23bceacac6da4897e3ded8_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"734\" data-rawheight=\"714\" class=\"origin_image zh-lightbox-thumb\" width=\"734\" data-original=\"https://pic1.zhimg.com/v2-93a7f74e4f23bceacac6da4897e3ded8_r.jpg\"/></noscript><img src=\"https://pic1.zhimg.com/80/v2-93a7f74e4f23bceacac6da4897e3ded8_720w.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"734\" data-rawheight=\"714\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"734\" data-original=\"https://pic1.zhimg.com/v2-93a7f74e4f23bceacac6da4897e3ded8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-93a7f74e4f23bceacac6da4897e3ded8_b.jpg\" data-lazy-status=\"ok\"></figure><h2><b>线程池SingleThreadPool:</b></h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">ExecutorService</span> <span class=\"nf\">newSingleThreadExecutor</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n      <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">FinalizableDelegatedExecutorService</span>\n        <span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">ThreadPoolExecutor</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">,</span> <span class=\"n\">1</span><span class=\"o\">,</span>\n         <span class=\"n\">0L</span><span class=\"o\">,</span> <span class=\"n\">TimeUnit</span><span class=\"o\">.</span><span class=\"na\">MILLISECONDS</span><span class=\"o\">,</span>\n         <span class=\"k\">new</span> <span class=\"n\">LinkedBlockingQueue</span><span class=\"o\">&lt;</span><span class=\"n\">Runnable</span><span class=\"o\">&gt;()));</span>\n<span class=\"err\">&#8203;</span>  <span class=\"o\">}</span></code></pre></div><p>我们关心的参数如下</p><div class=\"highlight\"><pre><code class=\"language-text\">corePoolSize：1\nmamximumPoolSize：1\nworkQueue：LinkedBlockingQueue</code></pre></div><p>SingleThreadPool表示的花瓶就是下图这样子：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d96eed436e4a960328387417277b4687_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"498\" data-rawheight=\"213\" class=\"origin_image zh-lightbox-thumb\" width=\"498\" data-original=\"https://pic4.zhimg.com/v2-d96eed436e4a960328387417277b4687_r.jpg\"/></noscript><img src=\"https://pic4.zhimg.com/80/v2-d96eed436e4a960328387417277b4687_720w.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"498\" data-rawheight=\"213\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"498\" data-original=\"https://pic4.zhimg.com/v2-d96eed436e4a960328387417277b4687_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d96eed436e4a960328387417277b4687_b.jpg\" data-lazy-status=\"ok\"></figure><hr><p>虽然两个线程池的样子没什么差异，但是这里我们发现了一个问题:</p><p><b>为什么 FixedThreadPool 和 SingleThreadPool 的 corePoolSize和mamximumPoolSize 要设计成一样的?</b></p><p>回答这个问题, 我们应该关注一下线程池的 workQueue 参数。</p><p>线程池FixedThreadPool和SingleThreadPool 都用到的阻塞队列 LinkedBlockingQueue。</p><h2><b>LinkedBlockingQueue</b></h2><blockquote>The capacity, if unspecified, is equal to {@link Integer#MAX_VALUE}. Linked nodes are dynamically created upon each insertion unless this would bring the queue above capacity.</blockquote><p>从LinkedBlockingQueue的源码注释中我们可以看到, 如果不指定队列的容量, 那么默认就是接近无限大的。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b0b7397c2accaa3ca7bc620eb135b846_b.gif\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"541\" data-thumbnail=\"https://pic3.zhimg.com/v2-b0b7397c2accaa3ca7bc620eb135b846_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-b0b7397c2accaa3ca7bc620eb135b846_r.jpg\"/></noscript><div class=\"RichText-gifPlaceholder\"><div class=\"GifPlayer isPlaying\" data-size=\"normal\" data-za-detail-view-path-module=\"GifItem\"><img class=\"ztext-gif\" role=\"presentation\" src=\"https://pic3.zhimg.com/v2-b0b7397c2accaa3ca7bc620eb135b846_b.webp\" data-thumbnail=\"https://pic3.zhimg.com/v2-b0b7397c2accaa3ca7bc620eb135b846_b.jpg\" data-size=\"normal\"><svg width=\"60\" height=\"60\" viewBox=\"0 0 60 60\" class=\"GifPlayer-icon\"><g fill=\"none\" fill-rule=\"evenodd\"><ellipse fill=\"#000\" opacity=\"0.45\" cx=\"30\" cy=\"30\" rx=\"30\" ry=\"30\"></ellipse><ellipse stroke=\"#FFF\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-dasharray=\"4,1,4\" cx=\"30\" cy=\"30\" rx=\"26\" ry=\"26\"></ellipse><svg x=\"16\" y=\"18.5\" class=\"GifPlayer-icon\"><path d=\"M12.842 12.981V11.4H7.64v1.653h3.27v.272c-.018 1.881-1.442 3.147-3.516 3.147-2.382 0-3.876-1.846-3.876-4.834 0-2.936 1.485-4.79 3.832-4.79 1.732 0 2.936.835 3.428 2.364h1.977c-.43-2.566-2.522-4.201-5.405-4.201-3.55 0-5.845 2.601-5.845 6.644 0 4.096 2.268 6.654 5.863 6.654 3.322 0 5.475-2.083 5.475-5.327zM17.518 18V5.317H15.55V18h1.97zm5.142 0v-5.256h5.449v-1.74h-5.45V7.11h5.95V5.317h-7.918V18h1.969z\" fill=\"#fff\"></path></svg></g></svg></div></div><figcaption>FixedThreadPool线程池添加线程的动画</figcaption></figure><p>从动画可以看出, 花瓶的瓶颈是会无限变长的, 也就是说不管瓶口容量设计得多大, 都是没有作用的!</p><p>所以不管线程池FixedThreadPool和SingleThreadPool 的mamximumPoolSize 等于多少, 都是不生效的!</p><hr><h2><b>线程池CachedThreadPool</b></h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">ExecutorService</span> <span class=\"nf\">newCachedThreadPool</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n  <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">ThreadPoolExecutor</span><span class=\"o\">(</span><span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">,</span>\n  <span class=\"n\">60L</span><span class=\"o\">,</span> <span class=\"n\">TimeUnit</span><span class=\"o\">.</span><span class=\"na\">SECONDS</span><span class=\"o\">,</span>\n  <span class=\"k\">new</span> <span class=\"n\">SynchronousQueue</span><span class=\"o\">&lt;</span><span class=\"n\">Runnable</span><span class=\"o\">&gt;());</span></code></pre></div><p>我们关心的参数如下</p><div class=\"highlight\"><pre><code class=\"language-text\">corePoolSize：0\nmamximumPoolSize：Integer.MAX_VALUE\nworkQueue：SynchronousQueue</code></pre></div><p>表示的花瓶就是下图这样子：</p><p class=\"ztext-empty-paragraph\"><br></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6a526c423ea2e642e7bfbc0a661e0f8c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"488\" data-rawheight=\"202\" class=\"origin_image zh-lightbox-thumb\" width=\"488\" data-original=\"https://pic1.zhimg.com/v2-6a526c423ea2e642e7bfbc0a661e0f8c_r.jpg\"/></noscript><img src=\"https://pic1.zhimg.com/80/v2-6a526c423ea2e642e7bfbc0a661e0f8c_720w.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"488\" data-rawheight=\"202\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"488\" data-original=\"https://pic1.zhimg.com/v2-6a526c423ea2e642e7bfbc0a661e0f8c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-6a526c423ea2e642e7bfbc0a661e0f8c_b.jpg\" data-lazy-status=\"ok\"></figure><p class=\"ztext-empty-paragraph\"><br></p><p>这里我们由发现了一个问题:</p><p><b>为什么CachedThreadPool的mamximumPoolSize要设计成接近无限大的?</b></p><p>回答这个问题, 我们再看一下线程池CachedThreadPool的 workQueue 参数：SynchronousQueue。</p><h2><b>SynchronousQueue</b></h2><p>来看SynchronousQueue的源码注释：</p><blockquote>A synchronous queue does not have any internal capacity, not even a capacity of one.</blockquote><p>从注释中我们可以看到, 同步队列可以认为是容量为0。</p><p>所以如果mamximumPoolSize不设计得很大, 就很容易导致溢出。</p><p class=\"ztext-empty-paragraph\"><br></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-5ec04e8e029d8040aec7847f920a3ef2_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"314\" data-thumbnail=\"https://pic3.zhimg.com/v2-5ec04e8e029d8040aec7847f920a3ef2_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-5ec04e8e029d8040aec7847f920a3ef2_r.jpg\"/></noscript><div class=\"RichText-gifPlaceholder\"><div class=\"GifPlayer\" data-size=\"normal\" data-za-detail-view-path-module=\"GifItem\"><img class=\"ztext-gif\" role=\"presentation\" src=\"https://pic3.zhimg.com/v2-5ec04e8e029d8040aec7847f920a3ef2_b.jpg\" data-thumbnail=\"https://pic3.zhimg.com/v2-5ec04e8e029d8040aec7847f920a3ef2_b.jpg\" data-size=\"normal\"><svg width=\"60\" height=\"60\" viewBox=\"0 0 60 60\" class=\"GifPlayer-icon\"><g fill=\"none\" fill-rule=\"evenodd\"><ellipse fill=\"#000\" opacity=\"0.45\" cx=\"30\" cy=\"30\" rx=\"30\" ry=\"30\"></ellipse><ellipse stroke=\"#FFF\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-dasharray=\"4,1,4\" cx=\"30\" cy=\"30\" rx=\"26\" ry=\"26\"></ellipse><svg x=\"16\" y=\"18.5\" class=\"GifPlayer-icon\"><path d=\"M12.842 12.981V11.4H7.64v1.653h3.27v.272c-.018 1.881-1.442 3.147-3.516 3.147-2.382 0-3.876-1.846-3.876-4.834 0-2.936 1.485-4.79 3.832-4.79 1.732 0 2.936.835 3.428 2.364h1.977c-.43-2.566-2.522-4.201-5.405-4.201-3.55 0-5.845 2.601-5.845 6.644 0 4.096 2.268 6.654 5.863 6.654 3.322 0 5.475-2.083 5.475-5.327zM17.518 18V5.317H15.55V18h1.97zm5.142 0v-5.256h5.449v-1.74h-5.45V7.11h5.95V5.317h-7.918V18h1.969z\" fill=\"#fff\"></path></svg></g></svg></div></div></figure><p class=\"ztext-empty-paragraph\"><br></p><p>但是瓶口设置得太大，堆积的小球太多，又会导致OOM（内存溢出）。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-51f8b60c2dea7ed8807bfe348aeff08c_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"287\" data-thumbnail=\"https://pic1.zhimg.com/v2-51f8b60c2dea7ed8807bfe348aeff08c_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-51f8b60c2dea7ed8807bfe348aeff08c_r.jpg\"/></noscript><div class=\"RichText-gifPlaceholder\"><div class=\"GifPlayer\" data-size=\"normal\" data-za-detail-view-path-module=\"GifItem\"><img class=\"ztext-gif\" role=\"presentation\" src=\"https://pic1.zhimg.com/v2-51f8b60c2dea7ed8807bfe348aeff08c_b.jpg\" data-thumbnail=\"https://pic1.zhimg.com/v2-51f8b60c2dea7ed8807bfe348aeff08c_b.jpg\" data-size=\"normal\"><svg width=\"60\" height=\"60\" viewBox=\"0 0 60 60\" class=\"GifPlayer-icon\"><g fill=\"none\" fill-rule=\"evenodd\"><ellipse fill=\"#000\" opacity=\"0.45\" cx=\"30\" cy=\"30\" rx=\"30\" ry=\"30\"></ellipse><ellipse stroke=\"#FFF\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-dasharray=\"4,1,4\" cx=\"30\" cy=\"30\" rx=\"26\" ry=\"26\"></ellipse><svg x=\"16\" y=\"18.5\" class=\"GifPlayer-icon\"><path d=\"M12.842 12.981V11.4H7.64v1.653h3.27v.272c-.018 1.881-1.442 3.147-3.516 3.147-2.382 0-3.876-1.846-3.876-4.834 0-2.936 1.485-4.79 3.832-4.79 1.732 0 2.936.835 3.428 2.364h1.977c-.43-2.566-2.522-4.201-5.405-4.201-3.55 0-5.845 2.601-5.845 6.644 0 4.096 2.268 6.654 5.863 6.654 3.322 0 5.475-2.083 5.475-5.327zM17.518 18V5.317H15.55V18h1.97zm5.142 0v-5.256h5.449v-1.74h-5.45V7.11h5.95V5.317h-7.918V18h1.969z\" fill=\"#fff\"></path></svg></g></svg></div></div></figure><hr><h2><b>线程池</b>ScheduledThreadPool</h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"nf\">ScheduledThreadPoolExecutor</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">corePoolSize</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"kd\">super</span><span class=\"o\">(</span><span class=\"n\">corePoolSize</span><span class=\"o\">,</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">,</span> \n  <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">NANOSECONDS</span><span class=\"o\">,</span>\n  <span class=\"k\">new</span> <span class=\"n\">DelayedWorkQueue</span><span class=\"o\">());</span>\n<span class=\"o\">}</span></code></pre></div><p>我们关心的参数如下</p><div class=\"highlight\"><pre><code class=\"language-text\">corePoolSize：corePoolSize\nmamximumPoolSize：Integer.MAX_VALUE\nworkQueue：DelayedWorkQueue</code></pre></div><p>可以看到, 这里出现了一个新的队列 workQueue：DelayedWorkQueue</p><h2><b>DelayedWorkQueue</b></h2><p>DelayedWorkQueue 是无界队列, 基于数组实现, 队列的长度可以扩容到 Integer.MAX_VALUE。</p><p>同时ScheduledThreadPool的 mamximumPoolSize 也是接近无限大的。</p><p>可以想象得到,<b>ScheduledThreadPool</b>就是史上最强花瓶, 极端情况下长度已经突破天际了!</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-12a0ddf9e5beffc674bbc33e6925ac82_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"697\" data-rawheight=\"512\" class=\"origin_image zh-lightbox-thumb\" width=\"697\" data-original=\"https://pic3.zhimg.com/v2-12a0ddf9e5beffc674bbc33e6925ac82_r.jpg\"/></noscript><img src=\"https://pic3.zhimg.com/80/v2-12a0ddf9e5beffc674bbc33e6925ac82_720w.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"697\" data-rawheight=\"512\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"697\" data-original=\"https://pic3.zhimg.com/v2-12a0ddf9e5beffc674bbc33e6925ac82_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-12a0ddf9e5beffc674bbc33e6925ac82_b.jpg\" data-lazy-status=\"ok\"></figure><p class=\"ztext-empty-paragraph\"><br></p><p>到这里, 相信大家已经明白, 为什么这四种线程会导致OOM了。</p><p>怎么感觉这四种线程还真是名副其实的“花瓶”呢 ：）</p><hr><h2>后续</h2><p>目前花瓶动画还只是粗略的版本,  有部分瑕疵是不可避免的,  根据二八定律, 我的主要想法大体上是先做出来了，剩下的细节再慢慢补。</p><p>目前只体现了线程池的三个参数。</p><p>如果现在加入参数 <b>keepAliveTime</b>， 那么动画又会有什么效果的呢？</p><p>敬请期待后续更新的文章。</p><hr><h2><b>可视化的意义</b></h2><p>有很多人或许会认为, 学习个线程池, 还要做什么动画, 这不是走偏了吗?</p><p>引用大神的一句话回答这个问题:</p><blockquote>Data visualization knowledge is not necessary -- just the desire to spread some knowledge.  <br><br>—— Ben Johnson</blockquote><p>数据可视化确实不是必需的， 但是有时候我们仅仅只是渴望给大家分享一些知识。</p><p>而且在这个分享的过程中， 动画会让你做出更多的思考:</p><p>思考动画怎么才能符合真实场景的效果。</p><p>比如当我们开始思考，动画中花瓶颈部的长度变化，以及DelayedWorkQueue队列容量的变化，这两者如何才能对应的上时，于是不可避免的, 我们会开始研究起DelayedWorkQueue的<b>扩容方式</b>。</p><p>甚至每一种队列都可以单独展开做成更加细化的动画。</p><p>而想要做好这些动画, 又要开始研究不同队列的源码了, 有需求才有动力!</p><hr><h2>温馨提示</h2><p>本文的动画使用的是matter.js，这是一个很不错的2D物理引擎。在此感谢前端技术的日益发展，让很多人得以实现脑海中的奇思妙想。</p><p>如果对本文的动画代码感兴趣，请关注公众号“<b>字节武装</b>”。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ef1db19af4304d069947d49441aa98a1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"565\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-ef1db19af4304d069947d49441aa98a1_r.jpg\"/></noscript><img src=\"https://pic2.zhimg.com/80/v2-ef1db19af4304d069947d49441aa98a1_720w.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"565\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-ef1db19af4304d069947d49441aa98a1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ef1db19af4304d069947d49441aa98a1_b.jpg\" data-lazy-status=\"ok\"></figure><p></p></div></div>"
  },
  {
    "category": "concurrency",
    "qes": "ThreadPoolTaskExecutor和ThreadPoolExecutor区别",
    "ans": "<div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"htmledit_views\">\n                    <ul><li>ThreadPoolTaskExecutor是spring core包中的，而ThreadPoolExecutor是JDK中的JUC。</li><li>ThreadPoolTaskExecutor是对ThreadPoolExecutor进行了封装处理。</li></ul>\n<p>看看ThreadPoolTaskExecutor源码</p> \n<p><img alt=\"\" class=\"has\" height=\"783\" src=\"https://img-blog.csdnimg.cn/20191213131116305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2phdmFfd3hpZA==,size_16,color_FFFFFF,t_70\" width=\"1200\"></p> \n<p>看看ThreadPoolExecutor源码</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs kotlin\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">public</span> ThreadPoolExecutor(int corePoolSize,</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                              int maximumPoolSize,</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                              long keepAliveTime,</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                              TimeUnit unit,</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                              BlockingQueue&lt;Runnable&gt; workQueue,</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                              ThreadFactory threadFactory,</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                              RejectedExecutionHandler handler) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">if</span> (corePoolSize &lt; <span class=\"hljs-number\">0</span> ||</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            maximumPoolSize &lt;= <span class=\"hljs-number\">0</span> ||</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            maximumPoolSize &lt; corePoolSize ||</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            keepAliveTime &lt; <span class=\"hljs-number\">0</span>)</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            <span class=\"hljs-keyword\">throw</span> new IllegalArgumentException();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"13\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">if</span> (workQueue == <span class=\"hljs-literal\">null</span> || threadFactory == <span class=\"hljs-literal\">null</span> || handler == <span class=\"hljs-literal\">null</span>)</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"14\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            <span class=\"hljs-keyword\">throw</span> new NullPointerException();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"15\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">this</span>.corePoolSize = corePoolSize;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"16\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">this</span>.maximumPoolSize = maximumPoolSize;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"17\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">this</span>.workQueue = workQueue;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"18\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"19\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">this</span>.threadFactory = threadFactory;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"20\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">this</span>.handler = handler;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"21\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>int corePoolSize:线程池维护线程的最小数量.&nbsp; 　　</p> \n<p>int maximumPoolSize:线程池维护线程的最大数量.&nbsp; 　　</p> \n<p>long keepAliveTime:空闲线程的存活时间.&nbsp; 　　</p> \n<p>TimeUnit unit: 时间单位,现有纳秒,微秒,毫秒,秒枚举值.&nbsp; 　　</p> \n<p>BlockingQueue&lt;Runnable&gt; workQueue:持有等待执行的任务队列.</p> \n<p>ThreadFactory:线程工厂</p> \n<p>RejectedExecutionHandler handler:用来拒绝一个任务的执行</p> \n<p>而拒绝策略有四种：</p> \n<p>(1)ThreadPoolExecutor.AbortPolicy策略，是默认的策略,处理程序遭到拒绝将抛出运行时 RejectedExecutionException。&nbsp;</p> \n<p>(2)ThreadPoolExecutor.CallerRunsPolicy策略 ,调用者的线程会执行该任务,如果执行器已关闭,则丢弃.&nbsp;</p> \n<p>(3)ThreadPoolExecutor.DiscardPolicy策略，不能执行的任务将被丢弃.&nbsp;</p> \n<p>(4)ThreadPoolExecutor.DiscardOldestPolicy策略，如果执行程序尚未关闭，则位于工作队列头部的任务将被删除，然后重试执行程序（如果再次失败，则重复此过程）.</p> \n<p>上一章有详细讲解</p> \n<p>那我们现在来用一用ThreadPoolTaskExecutor</p> \n<p>弄一个工具类</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs java\"><ol class=\"hljs-ln\" style=\"width:1152px\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">package</span> utils;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> org.springframework.ui.ModelMap;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> java.lang.reflect.Method;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> java.util.concurrent.CountDownLatch;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ThreadTool</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-keyword\">static</span> ThreadPoolTaskExecutor threadPoolTaskExecutor;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"13\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-keyword\">static</span> {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"14\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        threadPoolTaskExecutor = <span class=\"hljs-keyword\">new</span> ThreadPoolTaskExecutor();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"15\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        threadPoolTaskExecutor.setCorePoolSize(<span class=\"hljs-number\">5</span>);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"16\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        threadPoolTaskExecutor.setMaxPoolSize(<span class=\"hljs-number\">10</span>);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"17\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        threadPoolTaskExecutor.setQueueCapacity(<span class=\"hljs-number\">100</span>);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"18\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        threadPoolTaskExecutor.initialize();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"19\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"20\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"21\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-comment\"><span class=\"hljs-comment\">/**</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"22\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">     * 使用线程池执行业务方法并加入视图</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"23\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> tasks 计数器</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"24\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> modelMap 视图</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"25\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> modelName 视图名</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"26\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> service 要调用的service</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"27\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> method 被调用的方法</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"28\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> param 方法参数</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"29\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">     */</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"30\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">runMethod</span><span class=\"hljs-params\">(CountDownLatch tasks, ModelMap modelMap, String modelName, Object service, Method method, Object... param)</span></span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"31\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        threadPoolTaskExecutor.submit(<span class=\"hljs-keyword\">new</span> RunInThreadPool(</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"32\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                tasks,modelMap,modelName,service,method,param));</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"33\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"34\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"35\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"36\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>RunInThreaddPool</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs kotlin\"><ol class=\"hljs-ln\" style=\"width:1128px\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">package</span> utils;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> java.lang.reflect.InvocationTargetException;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> java.lang.reflect.Method;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> java.util.Map;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> java.util.concurrent.CountDownLatch;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RunInThreadPool</span> <span class=\"hljs-title\">implements</span> <span class=\"hljs-title\">Runnable</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    CountDownLatch countDownLatch;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    Map modelMap;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    String keyName;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"13\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    Object service;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"14\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    Method method;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"15\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    Object[] param;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"16\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"17\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-comment\"><span class=\"hljs-comment\">/**</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"18\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> countDownLatch 计数器</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"19\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> modelMap       视图</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"20\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> keyName        参数名</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"21\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> service        要调用的service</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"22\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> method         被调用的方法</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"23\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> param          方法参数</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"24\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">     */</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"25\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-keyword\">public</span> RunInThreadPool(CountDownLatch countDownLatch, Map modelMap, String keyName, Object service, Method method, Object... param) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"26\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">this</span>.countDownLatch = countDownLatch;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"27\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">this</span>.modelMap = modelMap;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"28\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">this</span>.keyName = keyName;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"29\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">this</span>.service = service;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"30\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">this</span>.method = method;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"31\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">this</span>.param = param;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"32\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"33\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"34\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-meta\">@Override</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"35\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-keyword\">public</span> void run() {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"36\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        Object result = <span class=\"hljs-literal\">null</span>;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"37\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">try</span> {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"38\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            <span class=\"hljs-built_in\">Long</span> start = System.currentTimeMillis();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"39\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            result = method.invoke(service, param);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"40\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            <span class=\"hljs-built_in\">Long</span> end = System.currentTimeMillis();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"41\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            System.<span class=\"hljs-keyword\">out</span>.println(String.format(<span class=\"hljs-string\">\"%s *** 执行 ((( %s ))) 方法,耗时 &lt;&lt;&lt; %s 秒 &gt;&gt;&gt; 参数\"</span>,</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"42\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                    service.getClass(),</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"43\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                    method.getName(),</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"44\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                    (end - start),</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"45\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">                    JsonUtils.toJson(param)));</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"46\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        } <span class=\"hljs-keyword\">catch</span> (IllegalAccessException e) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"47\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            e.printStackTrace();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"48\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        } <span class=\"hljs-keyword\">catch</span> (InvocationTargetException e) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"49\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            e.printStackTrace();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"50\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"51\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        modelMap.put(keyName, result);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"52\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        countDownLatch.countDown();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"53\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"54\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>实战案例：</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs php\"><ol class=\"hljs-ln\" style=\"width:1005px\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        @RequestMapping(<span class=\"hljs-string\">\"/goodsDetail\"</span>)</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">String</span> goodsDetail(GoodsBean goodsBean, PageBean pageBean, ModelMap modelMap) throws <span class=\"hljs-built_in\">Exception</span> {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            <span class=\"hljs-keyword\">final</span> CountDownLatch latch = <span class=\"hljs-keyword\">new</span> CountDownLatch(<span class=\"hljs-number\">7</span>);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            Method getRelatedGoods = goodsService.getClass().getMethod(<span class=\"hljs-string\">\"getRelatedGoods\"</span>, GoodsBean.<span class=\"hljs-keyword\">class</span>, <span class=\"hljs-keyword\">String</span>.<span class=\"hljs-keyword\">class</span>);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            getRelatedGoods.setAccessible(<span class=\"hljs-keyword\">Boolean</span>.<span class=\"hljs-literal\">TRUE</span>);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            ThreadTool.runMethod(latch , modelMap, <span class=\"hljs-string\">\"relatedGoods0\"</span>, goodsService, getRelatedGoods, goodsBean, <span class=\"hljs-string\">\"0\"</span>);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            <span class=\"hljs-comment\">//剩下六个类似的业务。。。。</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            ...............................</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            latch.await();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"production/index\"</span>;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        }</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>对比：</p> \n<pre class=\"has\" name=\"code\"><code class=\"hljs kotlin\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-meta\">@RequestMapping(<span class=\"hljs-meta-string\">\"/getRelatedGoods\"</span>)</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-meta\">@AppController</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-keyword\">public</span> String getRelatedGoods(GoodsBean goodsBean, String show_type,ModelMap modelMap) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        modelMap.addAttribute(<span class=\"hljs-string\">\"getRelatedGoods\"</span>,goodsService.getRelatedGoods(goodsBean, show_type));</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"production/index\"</span>;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p>&nbsp;</p>\n                </div><div><div></div></div>\n        </div>"
  },
  {
    "category": "concurrency",
    "qes": "多线程一定快吗？",
    "ans": "对于简单的多线程任务，可以发现，当并发执行累加操作不超过百万次时，速度会比串行执行累加\n操作要慢。那么，为什么并发执行的速度会比串行慢呢？这是因为线程有创建和上下文\n切换的开销 。"
  },
  {
    "category": "concurrency",
    "qes": "如何减少上下文切换",
    "ans": "减少上下文切换的方法有无锁并发编程、\nCAS算法、使用最少线程和使用协程。\n⚫ 无锁并发编程。多线程竞争锁时，会引起上下文切换，所以多线程处理数据时，可\n以用一些办法来避免使用锁，如将数据的 ID按照 Hash算法取模分段，不同的线程\n处理不同段的数据。\n⚫ CAS算法。 Java的 Atomic包使用 CAS算法来更新数据，而不需要加锁。\n⚫ 使用最少线程。避免创建不需要的线程，比如任务很少，但是创建了很多线程来处\n理，这样会造成大量线程都处于等待状态。\n⚫ 协程：在单线程里实现多任务的调度，并在单线程里维持多个任务间的切换。"
  },
  {
    "category": "concurrency",
    "qes": "避免死 锁 的几个常 见 方法。",
    "ans":"⚫避免一个线程同时获取多个锁。\n⚫避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。\n⚫尝试使用定时锁，使用lock.tryLocktimeout）来替代使用内部锁机制。\n⚫对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情\n况。"
  },
  {
    "category": "concurrency",
    "qes": "volatile 的应用",
    "ans": "在多线程并发编程中\nsynchronized和 volatile都扮演着重要的角色， volatile是轻量级\n的 synchronized，它在多处理器开发中保证了共享变量的 “可见性 ”。可见性的意思是当一\n个线程修改一个共享变量时，另外一个线程能读到这个修改的值。如果 volatile变量修饰\n符使用恰当的话，它比 synchronized的使用和执行成本更低，因为它不会引起线程上下\n文的切换和调度。本文将深入分析在硬件层面上 Intel处理器是如何实现 volatile的，通\n过深入分析帮助我们正确地使用 volatile变量。我们先从了解 volatile的定义开始。"
  },
  {
    "category": "concurrency",
    "qes": "而言之， volatile变 量自身具有哪些特性。",
    "ans": "1.可 见 性。 对 一个 volatile变 量的 读 总 是能看到（任意 线 程） 对这 个 volatile变 量\n最后的写入。\n⚫2. 原子性： 对 任意 单 个 volatile变 量的 读 /写具有原子性，但 类 似于 volatile++这 种\n复合操作不具有原子性。"
  },
  {
    "category": "concurrency",
    "qes": "volatile变量是如何保证内存可见性的",
    "ans": "简单来说就是，volatile变量的写操作完成的同时会将主内存的值刷新，并通知需要读取volatile变量的线程；接收到前一步通知的线程会进行对volatile变量的的读操作，此时会将本地值先置为失效，然后读取主内存的值"
  },
  {
    "category": "concurrency",
    "qes": "volatile写和 volatile读的内存语义做个总结。",
    "ans": "线程 A写一个 volatile变量，实质上是线程 A向接下来将要读这个 volatile变量\n的某个线程发出了（其对共享变量所做修改的）消息。\n⚫ 线程 B读一个 volatile变量，实质上是线程 B接收了之前某个线程发出的（在写\n这个 volatile 变量之前对共享变量所做修改的）消息。\n⚫ 线程 A写一个 volatile变量，随后线程 B读这个 volatile变量，这个过程实质上\n是线程 A通过主内存向线程 B发送消息。"
  },
  {
    "category": "concurrency",
    "qes": "下面 对锁释 放和 锁获 取的\n内存 语义 做个 总结 。",
    "ans":"线程A释放一个锁实质上是线程A向接下来将要获取这个锁的某个线程发出\n了（线程A对共享变量所做修改的）消息。\n⚫线程B获取一个锁实质上是线程B接收了之前某个线程发出的（在释放这个\n锁之前对共享变量所做修改的）消息。\n⚫线程A释放锁，随后线程B获取这个锁这个过程实质上是线程A通过主内存\n向线程B发送消息。"
  },
  {
    "category": "concurrency",
    "qes": "锁、volatile和CAS的比较",
    "ans": "<div class=\"RichText ztext Post-RichText\"><h2><b>一、锁</b></h2><p>锁是一种<b>悲观</b>的机制。为多线程提供了互斥的访问机制。多个线程同时竞争锁时，没获得锁的线程将会被挂起(智能的JVM会根据之前获取锁操作中对锁的持有时间长短来判断是使线程挂起还是自旋)</p><p>锁的劣势：<br>1.未竞争到锁的线程挂起后再恢复时，会进行上下文的切换，开销大。<br>2.当一个线程正在等待锁时，它不能干任何其它事情。<br>如果持有锁的线程被延迟执行(例如发生了缺页错误、调度延迟、或者其它类似情况)，那么所有需要该锁的线程都必须等待下去。<br>如果被阻塞线程的优先级较高，而持有锁的线程优先级较低，那么这将是一个严重的问题——<b>优先级反转</b>。即使高优先级的线程可以抢先执行，但仍然需要等待锁被释放，从而导致它的优先级会降至低优先级线程的级别。<br>如果持有锁的线程被永久阻塞(例如由于出现无限循环，死锁，活锁或者其他的活跃性障碍)，所有等待这个锁的线程就永远无法执行下去。</p><p class=\"ztext-empty-paragraph\"><br></p><h2><b>二、volatile</b></h2><p>与锁相比，volatile是一种更轻量级的同步机制。<br>volatile的优势：在使用这些变量时，不会发生上下文切换和线程调度等操作。<br>volatile的局限：<b>不能保证复合操作的原子性</b>。例如i++，并不能通过volatile来保证原子性。</p><p><b>三、CAS</b></p><p>对于细粒度操作，除了volatile提供的轻量级的同步机制，还有另外一种更高效的<b>乐观</b>方法。<br>在针对多处理器操作而设计的处理器中提供了一些特殊指令，用于管理对共享数据的并发访问。<br>现在，几乎所有的现代处理器中都包含了某种形式的原子读-改-写指令，例如比较并交换(compare and swap)、关联加载/条件存储(load linked/store conditional)。操作系统和JVM使用这些指令来实现锁和并发的数据结构。</p><p class=\"ztext-empty-paragraph\"><br></p><h2><b>四、锁与原子变量的比较  以及 非阻塞算法 </b></h2><p class=\"ztext-empty-paragraph\"><br></p><p>总结</p><p>1.锁的优缺点？</p><p>2.volatile的优缺点？</p><p>3.什么是CAS？其原理、优势？</p><p>4.JVM如何支持CAS的？</p><p>5.什么是ABA问题？如果解决？</p><p class=\"ztext-empty-paragraph\"><br></p><p>以上问题答案可以参考这个视频<b><a href=\"https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1ra4y1i7dE/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">多线程与高并发实战丨基础概念丨JUC同步工具丨同步容器丨线程池丨高频面试加分项丨吊打面试官的硬核技能 | 阿里P8</a></b></p><p></p></div>"
  },
  {
    "category": "concurrency",
    "qes": "Java并发-顺序一致性模型",
    "ans": "<div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h1 id=\"顺序一致性模型\"><a name=\"t0\"></a><a name=\"t0\"></a>顺序一致性模型</h1> \n<p>顺序一致性内存模型有两大特性 <br> 1）一个线程中的所有操作必须按照程序的顺序来执行。 <br> 2）（不管程序是否同步）所有线程都只能看到一个单一的操作执行顺序。在顺序一致性内存模型中，<code>每个操作都必须原子执行且立刻对所有线程可见</code>。 <br> <img src=\"https://img-blog.csdn.net/2018062418431399?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5ODQyOTI5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></p> \n<p>在概念上，顺序一致性模型有一个单一的全局内存，这个内存通过一个左右摆动的开关可以连接到任意一个线程，同时每一个线程必须按照程序的顺序来执行内存读/写操作。在任意时间点最多只能有一个线程可以连接到内存。</p> \n<p>假设两个线程A，B并发执行，其中A线程有3个操作，它们在程序中的顺序是：A1-A2-A3。其中B线程也有3个操作，它们在程序中的顺序是：B1-B2-B3。</p> \n<p>假设两个线程使用监视器锁来正确同步： <br> <img src=\"https://img-blog.csdn.net/20180624185008126?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5ODQyOTI5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></p> \n<p>假设这两个线程没有做同步： <br> <img src=\"https://img-blog.csdn.net/20180624185056961?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5ODQyOTI5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></p> \n<p>在JMM中就没有这个保证。未同步程序在JMM中不但整体的执行顺序是无序的，而且所有线程看到的操作执行顺序也可能不一致。</p> \n<h1 id=\"顺序一致性模型与jmm的区别\"><a name=\"t1\"></a><a name=\"t1\"></a>顺序一致性模型与JMM的区别</h1> \n<p>1.顺序一致性模型保证单线程内的操作会按程序的顺序执行，而JMM不保证单线程内的操作会按程序的顺序执行。（比如正确同步的多线程程序在临界区内的重排序） <br> 2.顺序一致性模型保证所有线程能看到一致的操作执行顺序，而JMM不保证所有线程能看到一致的操作执行顺序。 <br> 3.JMM不保证对64位long型和double型变量的写操作具有原子性，而顺序一致性模型能保证对所有的内存读/写操作都具有原子性。</p> \n<p>这3个差异与处理器总线的工作机制密切相关。 <br> 总线事务包括读事务和写事物。读事务从内存传递数据到处理器，写事务从处理器传送数据到内存。每个事物会读/写内存中一个或多个物理上连续的字。在一个处理器执行总线事物期间，总线会禁止其他的处理器和I/O设备执行内存的读/写。 <br> <img src=\"https://img-blog.csdn.net/20180624192531707?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5ODQyOTI5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></p> \n<p>假设处理器A，B，C同时向总线发起总线事务，只是总线仲裁会对竞争做出裁决，这里假设总线在仲裁后判定处理器A在竞争中获胜。此时处理器A继续它的总线事物，而其他两个处理器则要等待处理器A的总线事务完成后才能再次执行内存访问。期间不管总线事物是读事务还是写事物。 <br> 总线的这些工作机制可以把所有处理器对内存的访问以串型化的方式来执行。在任意时间点，最多只能有一个处理器可以访问内存。这个特性确保了单个总线之中的内存读/写操作的原子性。</p>\n                </div>"
  },
  {
    "category": "concurrency",
    "qes": "顺序一致性和指令重排序",
    "ans": "顺\n序一致性内存模型是一个理 论 参考模型， JMM和 处 理器内存模型在 设计时 通常会\n以 顺 序一致性内存模型 为 参照。在 设计时 JMM和 处 理器内存模型会 对顺 序一致性模型\n做一些放松，因 为 如果完全按照 顺 序一致性模型来 实现处 理器和 JMM，那么很多的 处 理\n器和 编译 器 优 化都要被禁止， 这对执 行性能将会有很大的影响。\n根据\n对 不同 类 型的 读 /写操作 组 合的 执 行 顺 序的放松，可以把常 见处 理器的内存模型\n划分 为 如下几种 类 型。\n1) ·放松程序中写 -读操作的顺序，由此产生了 Total Store Ordering内存模型（简称\n为 TSO）。\n2) ·在上面的基础上，继续放松程序中写 -写操作的顺序，由此产生了 Partial Store Order内存模型（简称为 PSO）。\n3) ·在前面两条的基 础 上， 继续 放松程序中 读 -写和 读 -读 操作的 顺 序，由此 产 生了\nRelaxedMemory Order内存模型（ 简 称 为 RMO）和 PowerPC内存模型。"
  },
  {
    "category": "concurrency",
    "qes": "为什么suspend已经过期，并不推荐再次使用",
    "ans": "suspend()、 resume()和 stop()这三个方法均已过期，不建议使用的原因主要有：以\nsuspend()方法为例，在调用后，线程不会释放已经占\n有的资源（比如锁），而是占有着资源进入睡眠状态，这样容易引发死锁问题。同样，\nstop()方法在终结一个线程时不会保证线程的资源正常释放，通常是没有给予线程完成资\n源释放工作的机会，因此会导致程序可能工作在不确定状态下。"
  },
  {
    "category": "concurrency",
    "qes": "volatile和 synchronized关键字",
    "ans": "Java支持多个线程同时访问一个对象或者对象的成员变量，由于每个线程可以拥有\n这个变量的拷贝（虽然对象以及成员变量分配的内存是在共享内存中的，但是每个执行\n的线程还是可以拥有一份拷贝，这样做的目的是加速程序的执行，这是现代多核处理器\n的一个显著特性），所以程序在执行过程中，一个线程看到的变量并不一定是最新的。\n关键字\nvolatile可以用来修饰字段（成员变量），就是告知程序任何对该变量的访问\n均需要从共享内存中获取，而对它的改变必须同步刷新回共享内存，它能保证所有线程\n对变量访问的可见性。\n举个例子，定义一个表示程序是否运行\n的成员变量 boolean on=true，那么另一个线\n程可能对它执行关闭动作（ on=false），这里涉及多个线程对变量的访问，因此需要将其\n定义成为 volatile boolean on true，这样其他线程对它进行改变时，可以让所有线程感知\n到变化，因为所有对 on变量的访问和修改都需要以共享内存为准。但是，过多地使用\nvolatile是不必要的，因为它会降低程序执行的效率。\n关键字\nsynchronized可以修饰方法或者以同步块的形式来进行使用，它主要确保多\n个线程在同一个时刻，只能有一个线程处于方法或者同步 块中，它保证了线程对变量访\n问的可见性和排他性。"
  },
  {
    "category": "concurrency",
    "qes": "",
    "ans": ""
  },
  {
    "category": "concurrency",
    "qes": "",
    "ans": ""
  },
  {
    "category": "concurrency",
    "qes": "",
    "ans": ""
  },
  {
    "category": "concurrency",
    "qes": "",
    "ans": ""
  },
  {
    "category": "concurrency",
    "qes": "",
    "ans": ""
  },
  {
    "category": "concurrency",
    "qes": "",
    "ans": ""
  },
  {
    "category": "concurrency",
    "qes": "",
    "ans": ""
  }
]