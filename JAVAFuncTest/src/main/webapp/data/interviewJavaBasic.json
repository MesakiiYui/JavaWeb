[
  {
    "category": "javaBasic",
    "qes": "重载overload和重写override的区别",
    "ans": "<div class=\"article-body\">\n\t\t\n\t\t\t<div class=\"article-intro\" id=\"content\">\n\t\t\t\n\t\t\t<h1>Java 重写(Override)与重载(Overload)</h1>\n<hr>\n<h2>重写(Override)</h2>\n<p> 重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。<strong>即外壳不变，核心重写！</strong>\n</p>\n\n<p>重写的好处在于子类可以根据需要，定义特定于自己的行为。\n也就是说子类能够根据需要实现父类的方法。</p>\n<p>重写方法不能抛出新的检查异常或者比被重写方法申明更加宽泛的异常。例如：\n父类的一个方法申明了一个检查异常 IOException，但是在重写这个方法的时候不能抛出 Exception 异常，因为 Exception 是 IOException 的父类，只能抛出 IOException 的子类异常。\n</p>\n<p>\n在面向对象原则里，重写意味着可以重写任何现有方法。实例如下：</p>\n<div class=\"example\">\n<h2 class=\"example\">TestDog.java 文件代码：</h2>\n<div class=\"example_code\">\n<div class=\"hl-main\"><span class=\"hl-reserved\">class</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">Animal</span><span class=\"hl-brackets\">{</span><span class=\"hl-code\">\n   </span><span class=\"hl-reserved\">public</span><span class=\"hl-code\"> </span><span class=\"hl-types\">void</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">move</span><span class=\"hl-brackets\">(</span><span class=\"hl-brackets\">)</span><span class=\"hl-brackets\">{</span><span class=\"hl-code\">\n      </span><span class=\"hl-identifier\">System</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">out</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">println</span><span class=\"hl-brackets\">(</span><span class=\"hl-quotes\">\"</span><span class=\"hl-string\">动物可以移动</span><span class=\"hl-quotes\">\"</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">;\n   </span><span class=\"hl-brackets\">}</span><span class=\"hl-code\">\n</span><span class=\"hl-brackets\">}</span><span class=\"hl-code\">\n \n</span><span class=\"hl-reserved\">class</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">Dog</span><span class=\"hl-code\"> </span><span class=\"hl-reserved\">extends</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">Animal</span><span class=\"hl-brackets\">{</span><span class=\"hl-code\">\n   </span><span class=\"hl-reserved\">public</span><span class=\"hl-code\"> </span><span class=\"hl-types\">void</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">move</span><span class=\"hl-brackets\">(</span><span class=\"hl-brackets\">)</span><span class=\"hl-brackets\">{</span><span class=\"hl-code\">\n      </span><span class=\"hl-identifier\">System</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">out</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">println</span><span class=\"hl-brackets\">(</span><span class=\"hl-quotes\">\"</span><span class=\"hl-string\">狗可以跑和走</span><span class=\"hl-quotes\">\"</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">;\n   </span><span class=\"hl-brackets\">}</span><span class=\"hl-code\">\n</span><span class=\"hl-brackets\">}</span><span class=\"hl-code\">\n \n</span><span class=\"hl-reserved\">public</span><span class=\"hl-code\"> </span><span class=\"hl-reserved\">class</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">TestDog</span><span class=\"hl-brackets\">{</span><span class=\"hl-code\">\n   </span><span class=\"hl-reserved\">public</span><span class=\"hl-code\"> </span><span class=\"hl-types\">static</span><span class=\"hl-code\"> </span><span class=\"hl-types\">void</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">main</span><span class=\"hl-brackets\">(</span><span class=\"hl-identifier\">String</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">args</span><span class=\"hl-brackets\">[</span><span class=\"hl-brackets\">]</span><span class=\"hl-brackets\">)</span><span class=\"hl-brackets\">{</span><span class=\"hl-code\">\n      </span><span class=\"hl-identifier\">Animal</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">a</span><span class=\"hl-code\"> = </span><span class=\"hl-reserved\">new</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">Animal</span><span class=\"hl-brackets\">(</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">; </span><span class=\"hl-comment\">//</span><span class=\"hl-comment\"> Animal 对象</span><span class=\"hl-comment\"></span><span class=\"hl-code\">\n      </span><span class=\"hl-identifier\">Animal</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">b</span><span class=\"hl-code\"> = </span><span class=\"hl-reserved\">new</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">Dog</span><span class=\"hl-brackets\">(</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">; </span><span class=\"hl-comment\">//</span><span class=\"hl-comment\"> Dog 对象</span><span class=\"hl-comment\"></span><span class=\"hl-code\">\n \n      </span><span class=\"hl-identifier\">a</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">move</span><span class=\"hl-brackets\">(</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">;</span><span class=\"hl-comment\">//</span><span class=\"hl-comment\"> 执行 Animal 类的方法</span><span class=\"hl-comment\"></span><span class=\"hl-code\">\n \n      </span><span class=\"hl-identifier\">b</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">move</span><span class=\"hl-brackets\">(</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">;</span><span class=\"hl-comment\">//</span><span class=\"hl-comment\">执行 Dog 类的方法</span><span class=\"hl-comment\"></span><span class=\"hl-code\">\n   </span><span class=\"hl-brackets\">}</span><span class=\"hl-code\">\n</span><span class=\"hl-brackets\">}</span></div>\n</div>\n</div>\n<p>以上实例编译运行结果如下：</p>\n<pre class=\"prettyprint prettyprinted\" style=\"\"><span class=\"pun\">动物可以移动</span><span class=\"pln\">\n</span><span class=\"pun\">狗可以跑和走</span></pre>\n<p>在上面的例子中可以看到，尽管 b 属于 Animal 类型，但是它运行的是 Dog 类的 move方法。</p><p>\n这是由于在编译阶段，只是检查参数的引用类型。</p><p>\n然而在运行时，Java 虚拟机(JVM)指定对象的类型并且运行该对象的方法。</p><p>\n因此在上面的例子中，之所以能编译成功，是因为 Animal 类中存在 move 方法，然而运行时，运行的是特定对象的方法。</p><p>\n思考以下例子：</p>\n<div class=\"example\">\n<h2 class=\"example\">TestDog.java 文件代码：</h2>\n<div class=\"example_code\">\n<div class=\"hl-main\"><span class=\"hl-reserved\">class</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">Animal</span><span class=\"hl-brackets\">{</span><span class=\"hl-code\">\n   </span><span class=\"hl-reserved\">public</span><span class=\"hl-code\"> </span><span class=\"hl-types\">void</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">move</span><span class=\"hl-brackets\">(</span><span class=\"hl-brackets\">)</span><span class=\"hl-brackets\">{</span><span class=\"hl-code\">\n      </span><span class=\"hl-identifier\">System</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">out</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">println</span><span class=\"hl-brackets\">(</span><span class=\"hl-quotes\">\"</span><span class=\"hl-string\">动物可以移动</span><span class=\"hl-quotes\">\"</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">;\n   </span><span class=\"hl-brackets\">}</span><span class=\"hl-code\">\n</span><span class=\"hl-brackets\">}</span><span class=\"hl-code\">\n \n</span><span class=\"hl-reserved\">class</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">Dog</span><span class=\"hl-code\"> </span><span class=\"hl-reserved\">extends</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">Animal</span><span class=\"hl-brackets\">{</span><span class=\"hl-code\">\n   </span><span class=\"hl-reserved\">public</span><span class=\"hl-code\"> </span><span class=\"hl-types\">void</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">move</span><span class=\"hl-brackets\">(</span><span class=\"hl-brackets\">)</span><span class=\"hl-brackets\">{</span><span class=\"hl-code\">\n      </span><span class=\"hl-identifier\">System</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">out</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">println</span><span class=\"hl-brackets\">(</span><span class=\"hl-quotes\">\"</span><span class=\"hl-string\">狗可以跑和走</span><span class=\"hl-quotes\">\"</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">;\n   </span><span class=\"hl-brackets\">}</span><span class=\"hl-code\">\n   </span><span class=\"hl-reserved\">public</span><span class=\"hl-code\"> </span><span class=\"hl-types\">void</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">bark</span><span class=\"hl-brackets\">(</span><span class=\"hl-brackets\">)</span><span class=\"hl-brackets\">{</span><span class=\"hl-code\">\n      </span><span class=\"hl-identifier\">System</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">out</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">println</span><span class=\"hl-brackets\">(</span><span class=\"hl-quotes\">\"</span><span class=\"hl-string\">狗可以吠叫</span><span class=\"hl-quotes\">\"</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">;\n   </span><span class=\"hl-brackets\">}</span><span class=\"hl-code\">\n</span><span class=\"hl-brackets\">}</span><span class=\"hl-code\">\n \n</span><span class=\"hl-reserved\">public</span><span class=\"hl-code\"> </span><span class=\"hl-reserved\">class</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">TestDog</span><span class=\"hl-brackets\">{</span><span class=\"hl-code\">\n   </span><span class=\"hl-reserved\">public</span><span class=\"hl-code\"> </span><span class=\"hl-types\">static</span><span class=\"hl-code\"> </span><span class=\"hl-types\">void</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">main</span><span class=\"hl-brackets\">(</span><span class=\"hl-identifier\">String</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">args</span><span class=\"hl-brackets\">[</span><span class=\"hl-brackets\">]</span><span class=\"hl-brackets\">)</span><span class=\"hl-brackets\">{</span><span class=\"hl-code\">\n      </span><span class=\"hl-identifier\">Animal</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">a</span><span class=\"hl-code\"> = </span><span class=\"hl-reserved\">new</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">Animal</span><span class=\"hl-brackets\">(</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">; </span><span class=\"hl-comment\">//</span><span class=\"hl-comment\"> Animal 对象</span><span class=\"hl-comment\"></span><span class=\"hl-code\">\n      </span><span class=\"hl-identifier\">Animal</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">b</span><span class=\"hl-code\"> = </span><span class=\"hl-reserved\">new</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">Dog</span><span class=\"hl-brackets\">(</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">; </span><span class=\"hl-comment\">//</span><span class=\"hl-comment\"> Dog 对象</span><span class=\"hl-comment\"></span><span class=\"hl-code\">\n \n      </span><span class=\"hl-identifier\">a</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">move</span><span class=\"hl-brackets\">(</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">;</span><span class=\"hl-comment\">//</span><span class=\"hl-comment\"> 执行 Animal 类的方法</span><span class=\"hl-comment\"></span><span class=\"hl-code\">\n      </span><span class=\"hl-identifier\">b</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">move</span><span class=\"hl-brackets\">(</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">;</span><span class=\"hl-comment\">//</span><span class=\"hl-comment\">执行 Dog 类的方法</span><span class=\"hl-comment\"></span><span class=\"hl-code\">\n      </span><span class=\"hl-identifier\">b</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">bark</span><span class=\"hl-brackets\">(</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">;\n   </span><span class=\"hl-brackets\">}</span><span class=\"hl-code\">\n</span><span class=\"hl-brackets\">}</span></div>\n</div>\n</div><p>以上实例编译运行结果如下：</p>\n<pre class=\"prettyprint prettyprinted\" style=\"\"><span class=\"typ\">TestDog</span><span class=\"pun\">.</span><span class=\"pln\">java</span><span class=\"pun\">:</span><span class=\"lit\">30</span><span class=\"pun\">:</span><span class=\"pln\"> cannot find symbol\nsymbol  </span><span class=\"pun\">:</span><span class=\"pln\"> method bark</span><span class=\"pun\">()</span><span class=\"pln\">\nlocation</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Animal</span><span class=\"pln\">\n                b</span><span class=\"pun\">.</span><span class=\"pln\">bark</span><span class=\"pun\">();</span><span class=\"pln\">\n                 </span><span class=\"pun\">^</span></pre>\n<p>该程序将抛出一个编译错误，因为b的引用类型Animal没有bark方法。</p>\n<hr>\n<h2>方法的重写规则</h2>\n<ul>\n\t<li><p>参数列表与被重写方法的参数列表必须完全相同。</p></li>\n\t<li><p>返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类（java5 及更早版本返回类型要一样，java7 及更高版本可以不同）。</p></li>\n\t<li><p>访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。</p></li>\n\t<li><p>父类的成员方法只能被它的子类重写。</p></li>\n\t<li><p>声明为 final 的方法不能被重写。</p></li>\n\t<li><p>声明为 static 的方法不能被重写，但是能够被再次声明。</p></li>\n\t\n\t<li><p>子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法。</p></li>\n\t<li><p>子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法。</p></li>\n\t<li><p>重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。</p></li>\n\t<li><p>构造方法不能被重写。</p></li>\n\t<li><p>如果不能继承一个类，则不能重写该类的方法。</p></li>\n</ul>\n<hr><h2>Super 关键字的使用</h2>\n<p>\n当需要在子类中调用父类的被重写方法时，要使用 super 关键字。\n</p>\n<div class=\"example\">\n<h2 class=\"example\">TestDog.java 文件代码：</h2>\n<div class=\"example_code\">\n<div class=\"hl-main\"><span class=\"hl-reserved\">class</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">Animal</span><span class=\"hl-brackets\">{</span><span class=\"hl-code\">\n   </span><span class=\"hl-reserved\">public</span><span class=\"hl-code\"> </span><span class=\"hl-types\">void</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">move</span><span class=\"hl-brackets\">(</span><span class=\"hl-brackets\">)</span><span class=\"hl-brackets\">{</span><span class=\"hl-code\">\n      </span><span class=\"hl-identifier\">System</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">out</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">println</span><span class=\"hl-brackets\">(</span><span class=\"hl-quotes\">\"</span><span class=\"hl-string\">动物可以移动</span><span class=\"hl-quotes\">\"</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">;\n   </span><span class=\"hl-brackets\">}</span><span class=\"hl-code\">\n</span><span class=\"hl-brackets\">}</span><span class=\"hl-code\">\n \n</span><span class=\"hl-reserved\">class</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">Dog</span><span class=\"hl-code\"> </span><span class=\"hl-reserved\">extends</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">Animal</span><span class=\"hl-brackets\">{</span><span class=\"hl-code\">\n   </span><span class=\"hl-reserved\">public</span><span class=\"hl-code\"> </span><span class=\"hl-types\">void</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">move</span><span class=\"hl-brackets\">(</span><span class=\"hl-brackets\">)</span><span class=\"hl-brackets\">{</span><span class=\"hl-code\">\n      </span><span class=\"hl-reserved\">super</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">move</span><span class=\"hl-brackets\">(</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">; </span><span class=\"hl-comment\">//</span><span class=\"hl-comment\"> 应用super类的方法</span><span class=\"hl-comment\"></span><span class=\"hl-code\">\n      </span><span class=\"hl-identifier\">System</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">out</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">println</span><span class=\"hl-brackets\">(</span><span class=\"hl-quotes\">\"</span><span class=\"hl-string\">狗可以跑和走</span><span class=\"hl-quotes\">\"</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">;\n   </span><span class=\"hl-brackets\">}</span><span class=\"hl-code\">\n</span><span class=\"hl-brackets\">}</span><span class=\"hl-code\">\n \n</span><span class=\"hl-reserved\">public</span><span class=\"hl-code\"> </span><span class=\"hl-reserved\">class</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">TestDog</span><span class=\"hl-brackets\">{</span><span class=\"hl-code\">\n   </span><span class=\"hl-reserved\">public</span><span class=\"hl-code\"> </span><span class=\"hl-types\">static</span><span class=\"hl-code\"> </span><span class=\"hl-types\">void</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">main</span><span class=\"hl-brackets\">(</span><span class=\"hl-identifier\">String</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">args</span><span class=\"hl-brackets\">[</span><span class=\"hl-brackets\">]</span><span class=\"hl-brackets\">)</span><span class=\"hl-brackets\">{</span><span class=\"hl-code\">\n \n      </span><span class=\"hl-identifier\">Animal</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">b</span><span class=\"hl-code\"> = </span><span class=\"hl-reserved\">new</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">Dog</span><span class=\"hl-brackets\">(</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">; </span><span class=\"hl-comment\">//</span><span class=\"hl-comment\"> Dog 对象</span><span class=\"hl-comment\"></span><span class=\"hl-code\">\n      </span><span class=\"hl-identifier\">b</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">move</span><span class=\"hl-brackets\">(</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">; </span><span class=\"hl-comment\">//</span><span class=\"hl-comment\">执行 Dog类的方法</span><span class=\"hl-comment\"></span><span class=\"hl-code\">\n \n   </span><span class=\"hl-brackets\">}</span><span class=\"hl-code\">\n</span><span class=\"hl-brackets\">}</span></div>\n</div>\n</div><p>以上实例编译运行结果如下：</p>\n<pre class=\"prettyprint prettyprinted\" style=\"\"><span class=\"pun\">动物可以移动</span><span class=\"pln\">\n</span><span class=\"pun\">狗可以跑和走</span></pre>\n\n<h2>重载(Overload)</h2>\n<p>重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。</p>\n<p>每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</p>\n<p>最常用的地方就是构造器的重载。</p>\n<p><strong>重载规则:</strong></p>\n<ul>\n<li>被重载的方法必须改变参数列表(参数个数或类型不一样)；</li>\n<li>被重载的方法可以改变返回类型；</li>\n<li>被重载的方法可以改变访问修饰符；</li>\n<li>被重载的方法可以声明新的或更广的检查异常；</li>\n<li>方法能够在同一个类中或者在一个子类中被重载。</li>\n<li>无法以返回值类型作为重载函数的区分标准。\n</li>\n</ul>\n<h3>实例</h3>\n<div class=\"example\">\n<h2 class=\"example\">Overloading.java 文件代码：</h2>\n<div class=\"example_code\">\n<div class=\"hl-main\"><span class=\"hl-reserved\">public</span><span class=\"hl-code\"> </span><span class=\"hl-reserved\">class</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">Overloading</span><span class=\"hl-code\"> </span><span class=\"hl-brackets\">{</span><span class=\"hl-code\">\n    </span><span class=\"hl-reserved\">public</span><span class=\"hl-code\"> </span><span class=\"hl-types\">int</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">test</span><span class=\"hl-brackets\">(</span><span class=\"hl-brackets\">)</span><span class=\"hl-brackets\">{</span><span class=\"hl-code\">\n        </span><span class=\"hl-identifier\">System</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">out</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">println</span><span class=\"hl-brackets\">(</span><span class=\"hl-quotes\">\"</span><span class=\"hl-string\">test1</span><span class=\"hl-quotes\">\"</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">;\n        </span><span class=\"hl-reserved\">return</span><span class=\"hl-code\"> </span><span class=\"hl-number\">1</span><span class=\"hl-code\">;\n    </span><span class=\"hl-brackets\">}</span><span class=\"hl-code\">\n \n    </span><span class=\"hl-reserved\">public</span><span class=\"hl-code\"> </span><span class=\"hl-types\">void</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">test</span><span class=\"hl-brackets\">(</span><span class=\"hl-types\">int</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">a</span><span class=\"hl-brackets\">)</span><span class=\"hl-brackets\">{</span><span class=\"hl-code\">\n        </span><span class=\"hl-identifier\">System</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">out</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">println</span><span class=\"hl-brackets\">(</span><span class=\"hl-quotes\">\"</span><span class=\"hl-string\">test2</span><span class=\"hl-quotes\">\"</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">;\n    </span><span class=\"hl-brackets\">}</span><span class=\"hl-code\">   \n \n    </span><span class=\"hl-comment\">//</span><span class=\"hl-comment\">以下两个参数类型顺序不同</span><span class=\"hl-comment\"></span><span class=\"hl-code\">\n    </span><span class=\"hl-reserved\">public</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">String</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">test</span><span class=\"hl-brackets\">(</span><span class=\"hl-types\">int</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">a</span><span class=\"hl-code\">,</span><span class=\"hl-identifier\">String</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">s</span><span class=\"hl-brackets\">)</span><span class=\"hl-brackets\">{</span><span class=\"hl-code\">\n        </span><span class=\"hl-identifier\">System</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">out</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">println</span><span class=\"hl-brackets\">(</span><span class=\"hl-quotes\">\"</span><span class=\"hl-string\">test3</span><span class=\"hl-quotes\">\"</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">;\n        </span><span class=\"hl-reserved\">return</span><span class=\"hl-code\"> </span><span class=\"hl-quotes\">\"</span><span class=\"hl-string\">returntest3</span><span class=\"hl-quotes\">\"</span><span class=\"hl-code\">;\n    </span><span class=\"hl-brackets\">}</span><span class=\"hl-code\">   \n \n    </span><span class=\"hl-reserved\">public</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">String</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">test</span><span class=\"hl-brackets\">(</span><span class=\"hl-identifier\">String</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">s</span><span class=\"hl-code\">,</span><span class=\"hl-types\">int</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">a</span><span class=\"hl-brackets\">)</span><span class=\"hl-brackets\">{</span><span class=\"hl-code\">\n        </span><span class=\"hl-identifier\">System</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">out</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">println</span><span class=\"hl-brackets\">(</span><span class=\"hl-quotes\">\"</span><span class=\"hl-string\">test4</span><span class=\"hl-quotes\">\"</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">;\n        </span><span class=\"hl-reserved\">return</span><span class=\"hl-code\"> </span><span class=\"hl-quotes\">\"</span><span class=\"hl-string\">returntest4</span><span class=\"hl-quotes\">\"</span><span class=\"hl-code\">;\n    </span><span class=\"hl-brackets\">}</span><span class=\"hl-code\">   \n \n    </span><span class=\"hl-reserved\">public</span><span class=\"hl-code\"> </span><span class=\"hl-types\">static</span><span class=\"hl-code\"> </span><span class=\"hl-types\">void</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">main</span><span class=\"hl-brackets\">(</span><span class=\"hl-identifier\">String</span><span class=\"hl-brackets\">[</span><span class=\"hl-brackets\">]</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">args</span><span class=\"hl-brackets\">)</span><span class=\"hl-brackets\">{</span><span class=\"hl-code\">\n        </span><span class=\"hl-identifier\">Overloading</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">o</span><span class=\"hl-code\"> = </span><span class=\"hl-reserved\">new</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">Overloading</span><span class=\"hl-brackets\">(</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">;\n        </span><span class=\"hl-identifier\">System</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">out</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">println</span><span class=\"hl-brackets\">(</span><span class=\"hl-identifier\">o</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">test</span><span class=\"hl-brackets\">(</span><span class=\"hl-brackets\">)</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">;\n        </span><span class=\"hl-identifier\">o</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">test</span><span class=\"hl-brackets\">(</span><span class=\"hl-number\">1</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">;\n        </span><span class=\"hl-identifier\">System</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">out</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">println</span><span class=\"hl-brackets\">(</span><span class=\"hl-identifier\">o</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">test</span><span class=\"hl-brackets\">(</span><span class=\"hl-number\">1</span><span class=\"hl-code\">,</span><span class=\"hl-quotes\">\"</span><span class=\"hl-string\">test3</span><span class=\"hl-quotes\">\"</span><span class=\"hl-brackets\">)</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">;\n        </span><span class=\"hl-identifier\">System</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">out</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">println</span><span class=\"hl-brackets\">(</span><span class=\"hl-identifier\">o</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">test</span><span class=\"hl-brackets\">(</span><span class=\"hl-quotes\">\"</span><span class=\"hl-string\">test4</span><span class=\"hl-quotes\">\"</span><span class=\"hl-code\">,</span><span class=\"hl-number\">1</span><span class=\"hl-brackets\">)</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">;\n    </span><span class=\"hl-brackets\">}</span><span class=\"hl-code\">\n</span><span class=\"hl-brackets\">}</span></div>\n</div>\n</div>\n<hr><h2>重写与重载之间的区别</h2>\n<table class=\"reference\">\n<tbody>\n<tr>\n<th width=\"72\">\n区别点\n</th>\n<th width=\"80\">\n重载方法  \n</th>\n<th width=\"340\">\n重写方法\n</th>\n</tr>\n<tr>\n<td width=\"72\">\n参数列表\n</td>\n<td width=\"80\">\n必须修改\n</td>\n<td width=\"340\">\n一定不能修改\n</td>\n</tr>\n<tr>\n<td width=\"72\">\n返回类型\n</td>\n<td width=\"80\">\n可以修改\n</td>\n<td width=\"340\">\n一定不能修改\n</td>\n</tr>\n<tr>\n<td width=\"72\">\n异常\n</td>\n<td width=\"80\">\n可以修改\n</td>\n<td width=\"340\">\n可以减少或删除，一定不能抛出新的或者更广的异常\n</td>\n</tr>\n<tr>\n<td width=\"72\">\n访问\n</td>\n<td width=\"80\">\n可以修改\n</td>\n<td width=\"340\">\n一定不能做更严格的限制（可以降低限制）\n</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2>总结</h2>\n<p>方法的重写(Overriding)和重载(Overloading)是java多态性的不同表现，重写是父类与子类之间多态性的一种表现，重载可以理解成多态的具体表现形式。</p>\n<ul><li>\n(1)方法重载是一个类中定义了多个方法名相同,而他们的参数的数量不同或数量相同而类型和次序不同,则称为方法的重载(Overloading)。</li><li>\n(2)方法重写是在子类存在方法与父类的方法的名字相同,而且参数的个数与类型一样,返回值也一样的方法,就称为重写(Overriding)。</li><li>\n(3)方法重载是一个类的多态性表现,而方法重写是子类与父类的一种多态性表现。</li></ul>\n<p><img src=\"//www.runoob.com/wp-content/uploads/2013/12/overloading-vs-overriding.png\"></p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/12/20171102-1.png\"></p>\n\t\t\t<!-- 其他扩展 -->\n\t\t\t\t\t\t\n\t\t\t</div>\n\t\t\t\n\t\t</div>"
  },
  {
    "category": "javaBasic",
    "qes": "java中接口（interface）和虚基类（abstract class）的区别",
    "ans": "<div id=\"cnblogs_post_body\" class=\"blogpost-body\">\n    <p>在<a class=\"replace_word\" title=\"Java SE知识库\" href=\"http://lib.csdn.net/base/javase\" target=\"_blank\">Java</a>语言中，abstract class和interface是支持抽象类定义的两种机制。正是由于这两种机制的存在，才赋予了Java强大的面向对象能力。abstract class和interface之间在对于抽象类定义的支持方面具有很大的相似性，甚至可以相互替换，因此很多开发者在进行抽象类定义时对于abstract class和interface的选择显得比较随意。其实，两者之间还是有很大的区别的，对于它们的选择甚至反映出对于问题领域本质的理解、对于设计意图的理解是否正确、合理。</p>\n<p>&nbsp;</p>\n<div>\n<table style=\"width: 100%\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td width=\"7%\">\n<p align=\"left\">&nbsp;</p>\n</td>\n<td width=\"41%\">\n<p align=\"center\">Abstract class</p>\n</td>\n<td width=\"51%\">\n<p align=\"center\">Interface</p>\n</td>\n</tr>\n<tr>\n<td width=\"7%\">\n<p align=\"center\">实例化</p>\n</td>\n<td width=\"41%\">\n<p align=\"center\">不能</p>\n</td>\n<td width=\"51%\">\n<p align=\"center\">不能</p>\n</td>\n</tr>\n<tr>\n<td width=\"7%\">\n<p align=\"center\">类</p>\n</td>\n<td width=\"41%\">\n<p align=\"center\">一种继承关系，一个类只能使用一次继承关系。可以通过继承多个接口实现多重继承</p>\n</td>\n<td width=\"51%\">\n<p align=\"center\">一个类可以实现多个interface</p>\n</td>\n</tr>\n<tr>\n<td width=\"7%\">\n<p align=\"center\">数据成员</p>\n</td>\n<td width=\"41%\">\n<p align=\"center\">可有自己的</p>\n</td>\n<td width=\"51%\">\n<p align=\"center\">静态的不能被修改即必须是static final，一般不在此定义</p>\n</td>\n</tr>\n<tr>\n<td width=\"7%\">\n<p align=\"center\">方法</p>\n</td>\n<td width=\"41%\">\n<p align=\"center\">可以私有的，非abstract方法，必须实现</p>\n</td>\n<td width=\"51%\">\n<p align=\"center\">不可有私有的，默认是public，abstract&nbsp;类型</p>\n</td>\n</tr>\n<tr>\n<td width=\"7%\">\n<p align=\"center\">变量</p>\n</td>\n<td width=\"41%\">\n<p align=\"center\">可有私有的，默认是friendly&nbsp;型，其值可以在子类中重新定义，也可以重新赋值</p>\n</td>\n<td width=\"51%\">\n<p align=\"center\">不可有私有的，默认是public static final&nbsp;型，且必须给其初值，实现类中不能重新定义，不能改变其值。</p>\n</td>\n</tr>\n<tr>\n<td width=\"7%\">\n<p align=\"center\">设计理念</p>\n</td>\n<td width=\"41%\">\n<p align=\"center\">表示的是“is-a”关系</p>\n</td>\n<td width=\"51%\">\n<p align=\"center\">表示的是“like-a”关系</p>\n</td>\n</tr>\n<tr>\n<td width=\"7%\">\n<p align=\"center\">实现</p>\n</td>\n<td width=\"41%\">\n<p align=\"center\">需要继承，要用extends</p>\n</td>\n<td width=\"51%\">\n<p align=\"center\">要用implements</p>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>abstract class和interface在Java语言中都是用来进行抽象类（本文中的抽象类并非从abstract class翻译而来，它表示的是一个抽象体，而abstract class为Java语言中用于定义抽象类的一种方法）定义的，那么什么是抽象类，使用抽象类能为我们带来什么好处呢？</p>\n<p>声明方法的存在而不去实现它的类被叫做抽象类（abstract class），它用于要创建一个体现某些基本行为的类，并为该类声明方法，但不能在该类中实现该类的情况。不能创建abstract 类的实例。然而可以创建一个变量，其类型是一个抽象类，并让它指向具体子类的一个实例。不能有抽象构造函数或抽象静态方法。Abstract 类的子类为它们父类中的所有抽象方法提供实现，否则它们也是抽象类为。取而代之，在子类中实现该方法。知道其行为的其它类可以在类中实现这些方法。</p>\n<p>接口（interface）是抽象类的变体。在接口中，所有方法都是抽象的。多继承性可通过实现 这样的接口而获得。接口中的所有方法都是抽象的，没有一个有程序体。接口只可以定义static final成员变量。接口的实现与子类相似，除了该实现类不能从接口定义中继承行为。当类实现特殊接口时，它定义（即将程序体给予）所有这种接口的方法。 然后，它可以在实现了该接口的类的任何对象上调用接口的方法。由于有抽象类，它允许使用接口名作为引用变量的类型。通常的动态联编将生效。引用可以转换到 接口类型或从接口类型转换，instanceof 运算符可以用来决定某对象的类是否实现了接口。</p>\n<p>接口可以继承接口。抽象类可以实现(implements)接口，抽象类是可以继承实体类，但前提是实体类必须有明确的构造函数。接口更关注“能实现什么功能”，而不管“怎么实现的”。</p>\n<p><strong>1.相同点</strong><br>&nbsp; A. 两者都是抽象类，都不能实例化。<br>&nbsp; B. interface实现类及abstrct class的子类都必须要实现已经声明的抽象方法。</p>\n<p><strong>2. 不同点</strong><br>&nbsp; A. interface需要实现，要用implements，而abstract class需要继承，要用extends。<br>&nbsp; B. 一个类可以实现多个interface，但一个类只能继承一个abstract class。<br>&nbsp; C. interface强调特定功能的实现，而abstract class强调所属关系。&nbsp;<br>&nbsp; D. 尽管interface实现类及abstrct class的子类都必须要实现相应的抽象方法，但实现的形式不同。interface中的每一个方法都是抽象方法，都只是声明的 (declaration, 没有方法体)，实现类必须要实现。而abstract class的子类可以有选择地实现。<br>&nbsp;&nbsp;这个选择有两点含义：<br>&nbsp;&nbsp;&nbsp; 一是Abastract class中并非所有的方法都是抽象的，只有那些冠有abstract的方法才是抽象的，子类必须实现。那些没有abstract的方法，在Abstrct class中必须定义方法体。<br>&nbsp;&nbsp;&nbsp; 二是abstract class的子类在继承它时，对非抽象方法既可以直接继承，也可以覆盖；而对抽象方法，可以选择实现，也可以通过再次声明其方法为抽象的方式，无需实现，留给其子类来实现，但此类必须也声明为抽象类。既是抽象类，当然也不能实例化。<br>&nbsp; E. abstract class是interface与Class的中介。<br>&nbsp; interface是完全抽象的，只能声明方法，而且只能声明pulic的方法，不能声明private及protected的方法，不能定义方法体，也 不能声明实例变量。然而，interface却可以声明常量变量，并且在JDK中不难找出这种例子。但将常量变量放在interface中违背了其作为接 口的作用而存在的宗旨，也混淆了interface与类的不同价值。如果的确需要，可以将其放在相应的abstract class或Class中。<br>&nbsp; abstract class在interface及Class中起到了承上启下的作用。一方面，abstract class是抽象的，可以声明抽象方法，以规范子类必须实现的功能；另一方面，它又可以定义缺省的方法体，供子类直接使用或覆盖。另外，它还可以定义自己 的实例变量，以供子类通过继承来使用。</p>\n<p><strong>3. interface的应用场合</strong><br>&nbsp; A. 类与类之前需要特定的接口进行协调，而不在乎其如何实现。<br>&nbsp; B. 作为能够实现特定功能的标识存在，也可以是什么接口方法都没有的纯粹标识。<br>&nbsp; C. 需要将一组类视为单一的类，而调用者只通过接口来与这组类发生联系。<br>&nbsp; D. 需要实现特定的多项功能，而这些功能之间可能完全没有任何联系。</p>\n<p><strong>4. abstract class的应用场合</strong><br>&nbsp; 一句话，在既需要统一的接口，又需要实例变量或缺省的方法的情况下，就可以使用它。最常见的有：<br>&nbsp; A. 定义了一组接口，但又不想强迫每个实现类都必须实现所有的接口。可以用abstract class定义一组方法体，甚至可以是空方法体，然后由子类选择自己所感兴趣的方法来覆盖。<br>&nbsp; B. 某些场合下，只靠纯粹的接口不能满足类与类之间的协调，还必需类中表示状态的变量来区别不同的关系。abstract的中介作用可以很好地满足这一点。<br>&nbsp; C. 规范了一组相互协调的方法，其中一些方法是共同的，与状态无关的，可以共享的，无需子类分别实现；而另一些方法却需要各个子类根据自己特定的状态来实现特定的功能。</p>\n<p>&nbsp;</p>\n<p>&nbsp; 注： 本文原作网址：http://blog.csdn.net/b271737818/article/details/3950245&nbsp;</p>\n<p>&nbsp; 原作者：<a class=\"user_name\" href=\"http://my.csdn.net/b271737818\" target=\"_blank\">moolf</a>&nbsp;&nbsp;</p>\n</div>"
  },
  {
    "category": "javaBasic",
    "qes": "",
    "ans": ""
  },
  {
    "category": "javaBasic",
    "qes": "",
    "ans": ""
  },
  {
    "category": "javaBasic",
    "qes": "",
    "ans": ""
  },
  {
    "category": "javaBasic",
    "qes": "",
    "ans": ""
  },
  {
    "category": "javaBasic",
    "qes": "",
    "ans": ""
  },
  {
    "category": "javaBasic",
    "qes": "",
    "ans": ""
  },
  {
    "category": "javaBasic",
    "qes": "",
    "ans": ""
  },
  {
    "category": "javaBasic",
    "qes": "",
    "ans": ""
  },
  {
    "category": "javaBasic",
    "qes": "",
    "ans": ""
  },
  {
    "category": "javaBasic",
    "qes": "",
    "ans": ""
  },
  {
    "category": "javaBasic",
    "qes": "",
    "ans": ""
  },
  {
    "category": "javaBasic",
    "qes": "",
    "ans": ""
  },
  {
    "category": "javaBasic",
    "qes": "",
    "ans": ""
  },
  {
    "category": "javaBasic",
    "qes": "",
    "ans": ""
  },
  {
    "category": "javaBasic",
    "qes": "",
    "ans": ""
  }

]